2023-02-13 14:45:35,826 [30192] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-02-13 14:45:35,827 [30192] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-02-13 14:45:35,827 [30192] INFO     root:247: [JupyterRequire] Initializing comms.
2023-02-13 14:45:35,829 [30192] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-02-13 14:45:35,830 [30192] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-02-13 14:45:35,831 [30192] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-02-13 14:45:37,994 [30192] INFO     numexpr.utils:145: [JupyterRequire] Note: NumExpr detected 12 cores but "NUMEXPR_MAX_THREADS" not set, so enforcing safe limit of 8.
2023-02-13 14:45:37,996 [30192] INFO     numexpr.utils:157: [JupyterRequire] NumExpr defaulting to 8 threads.
2023-02-13 14:45:41,307 [30192] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\pyforest\_importable.py
2023-02-13 14:45:41,438 [30192] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\jedi\third_party\typeshed\stdlib\2and3\builtins.pyi
2023-02-13 14:45:41,524 [30192] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-02-13 14:45:41,524 [30192] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-02-13 14:45:41,524 [30192] INFO     root:247: [JupyterRequire] Initializing comms.
2023-02-13 14:45:41,525 [30192] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-02-13 14:45:41,527 [30192] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-02-13 14:45:41,527 [30192] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-02-13 14:45:43,332 [30192] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-13 14:45:43,334 [30192] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-13 14:45:43,334 [30192] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-13 14:45:43,334 [30192] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-13 14:45:43,334 [30192] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-13 14:50:21,348 [30192] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-13 14:50:21,348 [30192] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 11
2023-02-13 14:50:21,348 [30192] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:11]
2023-02-13 14:50:21,355 [30192] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 11 (to 10 in part parser)
2023-02-13 14:50:21,356 [30192] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-13 14:50:21,373 [30192] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\jedi\third_party\typeshed\stdlib\3\sys.pyi
2023-02-13 17:48:28,260 [30192] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-02-13 17:48:28,265 [30192] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-02-13 17:48:28,265 [30192] INFO     root:247: [JupyterRequire] Initializing comms.
2023-02-13 17:48:28,311 [30192] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-02-13 17:48:28,314 [30192] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-02-13 17:48:28,316 [30192] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-02-17 14:57:32,906 [21296] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-02-17 14:57:32,906 [21296] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-02-17 14:57:32,907 [21296] INFO     root:247: [JupyterRequire] Initializing comms.
2023-02-17 14:57:32,908 [21296] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-02-17 14:57:32,909 [21296] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-02-17 14:57:32,910 [21296] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-02-17 14:57:33,721 [21296] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-02-17 14:57:33,723 [21296] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-02-17 14:57:33,723 [21296] INFO     root:247: [JupyterRequire] Initializing comms.
2023-02-17 14:57:33,725 [21296] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-02-17 14:57:33,726 [21296] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-02-17 14:57:33,727 [21296] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-02-17 18:22:57,916 [21296] INFO     numexpr.utils:145: [JupyterRequire] Note: NumExpr detected 12 cores but "NUMEXPR_MAX_THREADS" not set, so enforcing safe limit of 8.
2023-02-17 18:22:57,917 [21296] INFO     numexpr.utils:157: [JupyterRequire] NumExpr defaulting to 8 threads.
2023-02-17 18:22:58,878 [21296] DEBUG    matplotlib:224: [JupyterRequire] matplotlib data path: C:\Users\sunny\anaconda3\lib\site-packages\matplotlib\mpl-data
2023-02-17 18:22:58,891 [21296] DEBUG    matplotlib:224: [JupyterRequire] CONFIGDIR=C:\Users\sunny\.matplotlib
2023-02-17 18:22:58,891 [21296] DEBUG    matplotlib:1394: [JupyterRequire] matplotlib version 3.4.3
2023-02-17 18:22:58,891 [21296] DEBUG    matplotlib:1395: [JupyterRequire] interactive is False
2023-02-17 18:22:58,891 [21296] DEBUG    matplotlib:1396: [JupyterRequire] platform is win32
2023-02-17 18:22:58,891 [21296] DEBUG    matplotlib:1397: [JupyterRequire] loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_thread', '_warnings', '_weakref', '_io', 'marshal', 'nt', 'winreg', '_frozen_importlib_external', 'time', 'zipimport', '_codecs', 'codecs', 'encodings.aliases', 'encodings', 'encodings.utf_8', 'encodings.cp1252', '_signal', 'encodings.latin_1', '_abc', 'abc', 'io', '__main__', '_stat', 'stat', '_collections_abc', 'genericpath', 'ntpath', 'os.path', 'os', '_sitebuiltins', '_locale', '_bootlocale', '_distutils_hack', 'types', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib', 'importlib.machinery', '_heapq', 'heapq', 'itertools', 'keyword', '_operator', 'operator', 'reprlib', '_collections', 'collections', 'collections.abc', '_functools', 'functools', 'contextlib', 'enum', '_sre', 'sre_constants', 'sre_parse', 'sre_compile', 'copyreg', 're', 'typing.io', 'typing.re', 'typing', 'importlib.abc', 'importlib.util', 'google', 'google.cloud', 'google.logging', 'mpl_toolkits', 'sphinxcontrib', 'zope', 'site', '_weakrefset', 'weakref', 'pkgutil', 'runpy', 'ipykernel._version', '_json', 'json.scanner', 'json.decoder', 'json.encoder', 'json', 'errno', 'signal', 'threading', 'msvcrt', '_winapi', 'subprocess', 'jupyter_client._version', 'posixpath', 'fnmatch', 'glob', '_socket', 'math', 'select', 'selectors', 'socket', 'zlib', '_compression', '_bz2', 'bz2', '_lzma', 'lzma', 'shutil', '_bisect', 'bisect', '_random', '_sha512', 'random', 'tempfile', 'getpass', 'platform', 'zmq.libzmq', 'zmq.backend.select', 'cython_runtime', 'zmq.backend.cython.constants', '_cython_0_29_24', 'zmq.backend.cython.error', 'zmq.error', 'zmq.backend.cython.message', 'zmq.backend.cython.context', 'copy', '_struct', 'struct', '_compat_pickle', '_pickle', 'pickle', 'zmq.backend.cython.socket', 'zmq.backend.cython.utils', 'zmq.backend.cython._poll', 'zmq.backend.cython._version', 'zmq.backend.cython._device', 'zmq.backend.cython._proxy_steerable', 'zmq.backend.cython', 'zmq.backend', 'zmq.utils', 'zmq.utils.constant_names', 'zmq.sugar.constants', 'atexit', 'zmq.sugar.attrsettr', 'zmq.sugar.poll', 'zmq.utils.jsonapi', 'zmq.utils.strtypes', 'zmq.sugar.socket', 'zmq.sugar.context', 'zmq.sugar.frame', 'zmq.sugar.tracker', 'zmq.sugar.version', 'zmq.sugar.stopwatch', 'zmq.sugar', 'zmq', '_ast', 'ast', '_opcode', 'opcode', 'dis', 'token', 'tokenize', 'linecache', 'inspect', 'traitlets.utils', 'traitlets.utils.getargspec', 'traitlets.utils.importstring', 'traitlets.utils.sentinel', 'traitlets.utils.bunch', 'traitlets.utils.descriptions', 'traitlets.traitlets', 'traitlets.utils.decorators', 'traitlets._version', 'traitlets', 'traceback', '_string', 'string', 'logging', 'pprint', 'gettext', 'argparse', 'traitlets.config.loader', 'textwrap', 'traitlets.utils.text', 'traitlets.config.configurable', 'traitlets.config.application', 'traitlets.config', 'jupyter_client.localinterfaces', 'jupyter_core.version', 'jupyter_core', 'urllib', 'urllib.parse', 'pathlib', 'jupyter_core.paths', 'jupyter_client.utils', 'jupyter_client.connect', 'traitlets.log', 'jupyter_client.launcher', 'concurrent', 'concurrent.futures._base', 'concurrent.futures', '_ssl', 'binascii', 'base64', 'ssl', 'asyncio.constants', 'asyncio.format_helpers', 'asyncio.base_futures', 'asyncio.log', 'asyncio.coroutines', '_contextvars', 'contextvars', 'asyncio.exceptions', 'asyncio.base_tasks', '_asyncio', 'asyncio.events', 'asyncio.futures', 'asyncio.protocols', 'asyncio.transports', 'asyncio.sslproto', 'asyncio.locks', 'asyncio.tasks', 'asyncio.staggered', 'asyncio.trsock', 'asyncio.base_events', 'asyncio.runners', 'asyncio.queues', 'asyncio.streams', 'asyncio.subprocess', 'asyncio.threads', '_overlapped', 'asyncio.base_subprocess', 'asyncio.proactor_events', 'asyncio.selector_events', 'asyncio.windows_utils', 'asyncio.windows_events', 'asyncio', 'jupyter_client.channelsabc', 'jupyter_client.channels', 'jupyter_client.clientabc', 'jupyter_client.client', 'jupyter_client.kernelspec', 'jupyter_client.managerabc', 'jupyter_client.manager', '_queue', 'queue', 'jupyter_client.blocking.channels', 'jupyter_client.blocking.client', 'jupyter_client.blocking', 'zmq._future', 'zmq.asyncio', 'jupyter_client.asynchronous.channels', 'jupyter_client.asynchronous.client', 'jupyter_client.asynchronous', '_uuid', 'uuid', 'jupyter_client.multikernelmanager', 'jupyter_client', 'ipykernel.connect', 'ipykernel', 'tornado', '_datetime', 'datetime', 'numbers', 'logging.handlers', 'html.entities', 'html', 'array', 'tornado.speedups', 'tornado.util', 'tornado.escape', 'colorama.ansi', '_ctypes', 'ctypes._endian', 'ctypes', 'ctypes.wintypes', 'colorama.win32', 'colorama.winterm', 'colorama.ansitowin32', 'colorama.initialise', 'colorama', 'tornado.log', 'tornado.concurrent', 'tornado.ioloop', '__future__', 'tornado.platform', 'tornado.gen', 'tornado.platform.asyncio', 'zmq.eventloop.ioloop', 'zmq.eventloop', 'zmq.eventloop.zmqstream', 'IPython.core', 'IPython.core.getipython', 'IPython.core.release', 'sysconfig', 'pydoc', 'bdb', 'IPython.utils', 'IPython.utils.ipstruct', 'IPython.utils.coloransi', 'pygments', 'IPython.utils.colorable', 'IPython.utils.PyColorize', 'locale', 'IPython.utils.encoding', 'IPython.utils.py3compat', 'IPython.core.excolors', 'IPython.testing', 'IPython.testing.skipdoctest', 'cmd', 'codeop', 'code', 'pdb', 'IPython.core.debugger', 'IPython.core.display_trap', 'shlex', 'IPython.utils._process_common', 'IPython.utils._process_win32', 'IPython.utils.process', 'IPython.utils.decorators', 'IPython.utils.path', 'IPython.utils.data', 'IPython.utils.terminal', 'IPython.core.ultratb', 'IPython.utils._sysinfo', 'IPython.utils.sysinfo', 'IPython.core.crashhandler', 'IPython.utils.importstring', 'IPython.paths', 'IPython.core.profiledir', 'IPython.core.application', 'IPython.terminal', '_hashlib', '_blake2', 'hashlib', 'IPython.core.compilerop', 'IPython.core.error', 'IPython.utils.text', 'IPython.core.magic_arguments', 'getopt', 'mimetypes', 'IPython.core.display', 'IPython.core.page', 'IPython.lib.security', 'IPython.lib', 'IPython.lib.pretty', 'IPython.utils.openpy', 'IPython.utils.dir2', 'IPython.utils.wildcard', 'pygments.lexers._mapping', 'pygments.modeline', 'pygments.plugin', 'pygments.util', 'pygments.lexers', 'pygments.filter', 'pygments.token', 'pygments.filters', 'pygments.regexopt', 'pygments.lexer', 'pygments.unistring', 'pygments.lexers.python', 'pygments.formatters._mapping', 'pygments.formatters', 'pygments.styles', 'pygments.formatter', 'pygments.formatters.html', 'IPython.core.oinspect', 'IPython.core.inputtransformer2', 'decorator', 'IPython.core.magic', 'pickleshare', 'IPython.core.autocall', 'IPython.core.macro', 'IPython.core.splitinput', 'IPython.core.prefilter', 'IPython.core.alias', 'IPython.core.builtin_trap', 'backcall.backcall', 'backcall', 'IPython.core.events', 'IPython.core.displayhook', 'IPython.core.displaypub', 'IPython.core.extensions', 'IPython.utils.sentinel', 'IPython.core.formatters', '_sqlite3', 'sqlite3.dbapi2', 'sqlite3', 'IPython.core.history', 'IPython.core.logger', 'IPython.core.payload', 'IPython.core.usage', 'IPython.lib.display', 'IPython.display', 'IPython.utils.capture', 'IPython.utils.io', 'IPython.core.hooks', 'IPython.utils.strdispatch', 'IPython.utils.syspathcontext', 'IPython.utils.tempdir', 'IPython.utils.contexts', 'IPython.core.async_helpers', 'IPython.core.interactiveshell', 'prompt_toolkit.application.current', 'prompt_toolkit.eventloop.utils', 'prompt_toolkit.eventloop.async_generator', 'wcwidth.table_wide', 'wcwidth.table_zero', 'wcwidth.unicode_versions', 'wcwidth.wcwidth', 'wcwidth', 'prompt_toolkit.utils', 'prompt_toolkit.eventloop.inputhook', 'prompt_toolkit.eventloop', 'prompt_toolkit.application.run_in_terminal', 'prompt_toolkit.selection', 'prompt_toolkit.clipboard.base', 'prompt_toolkit.clipboard.in_memory', 'prompt_toolkit.clipboard', 'prompt_toolkit.cache', 'prompt_toolkit.enums', 'prompt_toolkit.filters.base', 'prompt_toolkit.filters.app', 'prompt_toolkit.filters.cli', 'prompt_toolkit.filters.utils', 'prompt_toolkit.filters', 'prompt_toolkit.document', 'prompt_toolkit.auto_suggest', 'prompt_toolkit.data_structures', 'prompt_toolkit.styles.base', 'prompt_toolkit.styles.named_colors', 'prompt_toolkit.styles.style', 'prompt_toolkit.styles.defaults', 'prompt_toolkit.styles.pygments', 'colorsys', 'prompt_toolkit.styles.style_transformation', 'prompt_toolkit.styles', 'prompt_toolkit.output.color_depth', 'prompt_toolkit.output.base', 'prompt_toolkit.output.defaults', 'prompt_toolkit.output', 'prompt_toolkit.output.vt100', 'prompt_toolkit.mouse_events', 'prompt_toolkit.formatted_text.base', 'prompt_toolkit.formatted_text.ansi', 'xml', 'xml.dom.domreg', 'xml.dom', 'xml.dom.minicompat', 'xml.dom.NodeFilter', 'xml.dom.xmlbuilder', 'xml.dom.minidom', 'prompt_toolkit.formatted_text.html', 'prompt_toolkit.formatted_text.pygments', 'prompt_toolkit.formatted_text.utils', 'prompt_toolkit.formatted_text', 'prompt_toolkit.completion.base', 'prompt_toolkit.completion.deduplicate', 'prompt_toolkit.completion.filesystem', 'prompt_toolkit.completion.word_completer', 'prompt_toolkit.completion.fuzzy_completer', 'prompt_toolkit.completion.nested', 'prompt_toolkit.completion', 'prompt_toolkit.history', 'prompt_toolkit.keys', 'prompt_toolkit.key_binding.key_bindings', 'prompt_toolkit.key_binding.key_processor', 'prompt_toolkit.key_binding', 'prompt_toolkit.key_binding.vi_state', 'prompt_toolkit.search', 'prompt_toolkit.validation', 'prompt_toolkit.buffer', 'prompt_toolkit.input.base', 'prompt_toolkit.input.defaults', 'prompt_toolkit.input', 'prompt_toolkit.input.typeahead', 'prompt_toolkit.key_binding.bindings', 'prompt_toolkit.key_binding.bindings.scroll', 'prompt_toolkit.key_binding.bindings.page_navigation', 'prompt_toolkit.lexers.base', 'prompt_toolkit.lexers.pygments', 'prompt_toolkit.lexers', 'prompt_toolkit.layout.utils', 'prompt_toolkit.layout.processors', 'prompt_toolkit.layout.controls', 'prompt_toolkit.layout.dimension', 'prompt_toolkit.layout.margins', 'prompt_toolkit.layout.mouse_handlers', 'prompt_toolkit.layout.screen', 'prompt_toolkit.layout.containers', 'prompt_toolkit.layout.layout', 'prompt_toolkit.layout.menus', 'prompt_toolkit.layout.scrollable_pane', 'prompt_toolkit.layout', 'prompt_toolkit.key_binding.bindings.completion', 'prompt_toolkit.key_binding.bindings.named_commands', 'prompt_toolkit.key_binding.bindings.basic', 'prompt_toolkit.key_binding.bindings.cpr', 'prompt_toolkit.key_binding.bindings.emacs', 'prompt_toolkit.key_binding.bindings.mouse', 'prompt_toolkit.input.ansi_escape_sequences', 'prompt_toolkit.input.vt100_parser', 'prompt_toolkit.key_binding.digraphs', 'prompt_toolkit.key_binding.bindings.vi', 'prompt_toolkit.key_binding.defaults', 'prompt_toolkit.key_binding.emacs_state', 'prompt_toolkit.layout.dummy', 'prompt_toolkit.renderer', 'prompt_toolkit.application.application', 'prompt_toolkit.application.dummy', 'prompt_toolkit.application', 'prompt_toolkit.key_binding.bindings.focus', 'prompt_toolkit.widgets.toolbars', 'prompt_toolkit.widgets.base', 'prompt_toolkit.widgets.dialogs', 'prompt_toolkit.widgets.menus', 'prompt_toolkit.widgets', 'prompt_toolkit.shortcuts.dialogs', 'prompt_toolkit.shortcuts.progress_bar.formatters', 'prompt_toolkit.shortcuts.progress_bar.base', 'prompt_toolkit.shortcuts.progress_bar', 'prompt_toolkit.key_binding.bindings.auto_suggest', 'prompt_toolkit.key_binding.bindings.open_in_editor', 'prompt_toolkit.shortcuts.prompt', 'prompt_toolkit.shortcuts.utils', 'prompt_toolkit.shortcuts', 'prompt_toolkit', 'prompt_toolkit.patch_stdout', 'pygments.style', 'unicodedata', 'IPython.core.latex_symbols', 'IPython.utils.generics', 'parso.utils', 'parso.tree', 'parso.python', 'parso.python.token', 'parso.python.tokenize', 'parso.pgen2.grammar_parser', 'parso.pgen2.generator', 'parso.pgen2', 'parso.parser', 'parso._compatibility', 'difflib', 'parso.python.prefix', 'parso.python.tree', 'parso.python.parser', 'parso.python.diff', 'gc', 'parso.cache', 'parso.normalizer', 'parso.python.errors', 'parso.python.pep8', 'parso.file_io', 'parso.grammar', 'parso', 'jedi._compatibility', 'jedi.parser_utils', 'jedi.debug', 'jedi.settings', 'jedi.cache', 'jedi.file_io', 'jedi.inference.cache', 'jedi.inference.helpers', 'jedi.inference.utils', 'jedi.inference.base_value', 'jedi.inference.sys_path', 'jedi.inference.recursion', 'jedi.inference.flow_analysis', 'jedi.common', 'jedi.inference.lazy_value', 'jedi.inference.docstrings', 'jedi.plugins', 'jedi.inference.names', 'jedi.inference.filters', 'jedi.inference.compiled.getattr_static', 'jedi.inference.compiled.access', 'jedi.inference.signature', 'jedi.inference.context', 'jedi.inference.compiled.value', 'jedi.inference.compiled', 'jedi.inference.analysis', 'jedi.inference.gradual', 'jedi.inference.value.module', 'jedi.inference.value.dynamic_arrays', 'jedi.inference.value.iterable', 'jedi.inference.arguments', 'jedi.inference.parser_cache', 'jedi.inference.gradual.generics', 'jedi.inference.value.function', 'jedi.inference.value.klass', 'jedi.inference.value.instance', 'jedi.inference.value', 'jedi.inference.gradual.base', 'jedi.inference.gradual.type_var', 'jedi.inference.gradual.typing', 'jedi.inference.gradual.stub_value', 'jedi.inference.gradual.typeshed', 'jedi.inference.compiled.subprocess.functions', 'jedi.api.exceptions', 'jedi.inference.compiled.subprocess', 'jedi.inference.imports', 'jedi.inference.param', 'jedi.inference.gradual.annotation', 'jedi.inference.value.decorator', 'jedi.inference.syntax_tree', 'jedi.inference', 'jedi.inference.gradual.conversion', 'jedi.inference.compiled.mixed', 'pydoc_data', 'pydoc_data.topics', 'jedi.api.keywords', 'jedi.api.completion_cache', 'jedi.api.helpers', 'jedi.api.classes', 'jedi.api.interpreter', 'jedi.api.strings', 'jedi.api.file_name', 'jedi.api.completion', 'filecmp', 'jedi.api.environment', 'jedi.inference.references', 'jedi.api.project', 'jedi.api.errors', 'jedi.api.refactoring', 'jedi.api.refactoring.extract', 'jedi.inference.gradual.utils', 'jedi.api', 'jedi.plugins.stdlib', 'jedi.plugins.flask', 'jedi.plugins.pytest', 'jedi.plugins.django', 'jedi.plugins.registry', 'jedi', 'IPython.core.completer', 'IPython.terminal.ptutils', 'IPython.lib.clipboard', 'IPython.terminal.shortcuts', 'IPython.terminal.debugger', 'IPython.terminal.magics', 'IPython.terminal.pt_inputhooks', 'IPython.terminal.prompts', 'IPython.terminal.interactiveshell', 'IPython.core.magics.auto', 'IPython.core.magics.basic', 'email', 'http', 'email.errors', 'email.quoprimime', 'email.base64mime', 'quopri', 'email.encoders', 'email.charset', 'email.header', 'calendar', 'email._parseaddr', 'email.utils', 'email._policybase', 'email.feedparser', 'email.parser', 'uu', 'email._encoded_words', 'email.iterators', 'email.message', 'http.client', 'urllib.response', 'urllib.error', 'nturl2path', 'urllib.request', 'IPython.core.magics.code', 'IPython.core.magics.config', 'IPython.core.magics.display', 'timeit', '_lsprof', 'profile', 'cProfile', 'dataclasses', 'pstats', 'IPython.utils.module_paths', 'IPython.utils.timing', 'IPython.core.magics.execution', 'IPython.core.magics.extension', 'IPython.core.magics.history', 'IPython.core.magics.logging', 'IPython.core.magics.namespace', 'IPython.core.magics.osm', 'IPython.core.magics.packaging', 'IPython.core.pylabtools', 'IPython.core.magics.pylab', 'IPython.lib.backgroundjobs', 'IPython.core.magics.script', 'IPython.core.magics', 'IPython.core.shellapp', 'IPython.extensions', 'IPython.extensions.storemagic', 'IPython.terminal.ipapp', 'IPython.terminal.embed', 'IPython.utils.frame', 'IPython', 'ipython_genutils._version', 'ipython_genutils', 'ipython_genutils.encoding', 'ipython_genutils.py3compat', 'ipython_genutils.path', 'imp', 'hmac', 'dateutil._version', 'dateutil', 'six', '_decimal', 'decimal', 'dateutil._common', 'dateutil.relativedelta', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.tz.win', 'dateutil.tz.tz', 'dateutil.tz', 'dateutil.parser._parser', 'dateutil.parser.isoparser', 'dateutil.parser', '_strptime', 'jupyter_client.jsonutil', 'jupyter_client.adapter', 'jupyter_client.session', 'ipykernel.iostream', 'ipykernel.control', 'ipykernel.heartbeat', 'IPython.utils.tokenutil', 'tornado.locks', 'tornado.queues', 'ipykernel.jsonutil', 'ipykernel.kernelbase', 'ipykernel.comm.comm', 'ipykernel.comm.manager', 'ipykernel.comm', 'IPython.core.payloadpage', 'ipykernel.displayhook', 'ipykernel.zmqshell', 'setuptools._distutils', 'distutils.debug', 'distutils.errors', 'distutils.fancy_getopt', 'distutils.dep_util', 'distutils._log', 'distutils.spawn', 'distutils.util', 'distutils.dist', 'distutils.dir_util', 'distutils.file_util', 'zipfile', 'distutils.archive_util', 'distutils.cmd', 'configparser', 'distutils.config', 'distutils.extension', 'distutils.core', '_distutils_hack.override', 'setuptools._deprecation_warning', 'xml.parsers', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'xml.parsers.expat', 'plistlib', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources._vendor.jaraco', 'pkg_resources.extern.jaraco', 'importlib._common', 'importlib.resources', 'pkg_resources._vendor.more_itertools.recipes', 'pkg_resources._vendor.more_itertools.more', 'pkg_resources._vendor.more_itertools', 'pkg_resources.extern.more_itertools', 'pkg_resources.extern.jaraco.functools', 'pkg_resources.extern.jaraco.context', 'pkg_resources.extern.jaraco.text', 'pkg_resources._vendor.platformdirs.api', 'pkg_resources._vendor.platformdirs.version', 'pkg_resources._vendor.platformdirs.windows', 'pkg_resources._vendor.platformdirs', 'pkg_resources.extern.platformdirs', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources._vendor.packaging', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging.version', 'pkg_resources._vendor.packaging._manylinux', 'pkg_resources._vendor.packaging._musllinux', 'pkg_resources.extern.packaging.tags', 'pkg_resources.extern.packaging.utils', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources._vendor.pyparsing.util', 'pkg_resources._vendor.pyparsing.unicode', 'pkg_resources._vendor.pyparsing.exceptions', 'pkg_resources._vendor.pyparsing.actions', 'pkg_resources._vendor.pyparsing.results', 'pkg_resources._vendor.pyparsing.core', 'pkg_resources._vendor.pyparsing.helpers', 'pkg_resources._vendor.pyparsing.testing', 'pkg_resources._vendor.pyparsing.common', 'pkg_resources._vendor.pyparsing', 'pkg_resources.extern.pyparsing', 'pkg_resources.extern.packaging.markers', 'pkg_resources.extern.packaging.requirements', 'encodings.cp437', 'pkg_resources', 'setuptools.version', 'distutils.filelist', 'setuptools.monkey', 'setuptools.extension', 'distutils.log', 'distutils.command', 'setuptools.extern', 'setuptools._vendor', 'setuptools._vendor.packaging.__about__', 'setuptools._vendor.packaging', 'setuptools.extern.packaging', 'setuptools._vendor.ordered_set', 'setuptools.extern.ordered_set', 'setuptools._vendor.more_itertools.recipes', 'setuptools._vendor.more_itertools.more', 'setuptools._vendor.more_itertools', 'setuptools.extern.more_itertools', '_csv', 'csv', 'setuptools._vendor.zipp', 'setuptools._vendor.importlib_metadata._functools', 'setuptools._vendor.importlib_metadata._text', 'setuptools._vendor.importlib_metadata._adapters', 'setuptools._vendor.importlib_metadata._compat', 'setuptools._vendor.importlib_metadata._meta', 'setuptools._vendor.importlib_metadata._collections', 'setuptools._vendor.importlib_metadata._itertools', 'setuptools._vendor.importlib_metadata', 'setuptools.extern.importlib_metadata', 'zipp', 'importlib_metadata._functools', 'importlib_metadata._text', 'importlib_metadata._adapters', 'importlib_metadata._compat', 'importlib_metadata._meta', 'importlib_metadata._collections', 'importlib_metadata._itertools', 'importlib_metadata', 'setuptools._importlib', 'distutils.command.bdist', 'setuptools.command', 'setuptools.windows_support', 'setuptools._vendor.pyparsing.util', 'setuptools._vendor.pyparsing.unicode', 'setuptools._vendor.pyparsing.exceptions', 'setuptools._vendor.pyparsing.actions', 'setuptools._vendor.pyparsing.results', 'setuptools._vendor.pyparsing.core', 'setuptools._vendor.pyparsing.helpers', 'setuptools._vendor.pyparsing.testing', 'setuptools._vendor.pyparsing.common', 'setuptools._vendor.pyparsing', 'setuptools.extern.pyparsing', 'setuptools._vendor.packaging._manylinux', 'setuptools._vendor.packaging._musllinux', 'setuptools.extern.packaging.tags', 'setuptools.extern.packaging._structures', 'setuptools.extern.packaging.version', 'setuptools.extern.packaging.utils', 'setuptools.extern.packaging.specifiers', 'setuptools.extern.packaging.markers', 'setuptools.extern.packaging.requirements', 'setuptools._path', 'setuptools.config.expand', 'setuptools.config.setupcfg', 'setuptools.config', 'setuptools.errors', 'email._header_value_parser', 'email.headerregistry', 'setuptools.config._apply_pyprojecttoml', 'setuptools.config.pyprojecttoml', 'setuptools.discovery', 'setuptools._vendor.jaraco', 'setuptools.extern.jaraco', 'setuptools.extern.jaraco.functools', 'setuptools.extern.jaraco.context', 'setuptools.extern.jaraco.text', 'setuptools._reqs', 'setuptools._itertools', 'setuptools._entry_points', 'setuptools.dist', 'setuptools.py34compat', 'setuptools._imp', 'setuptools.depends', 'setuptools.logging', 'setuptools.msvc', 'unittest.util', 'unittest.result', 'unittest.case', 'unittest.suite', 'unittest.loader', 'unittest.signals', 'unittest.runner', 'unittest.main', 'unittest', 'unittest.mock', 'distutils.ccompiler', 'distutils._msvccompiler', 'setuptools', 'distutils', 'distutils.version', 'ipykernel.eventloops', 'ipykernel.compiler', 'debugpy._version', 'debugpy.common', 'debugpy.common.json', 'debugpy.common.fmt', 'debugpy.common.compat', 'debugpy', 'debugpy._vendored._util', 'debugpy._vendored', '_pydevd_bundle', 'encodings.ascii', 'stringprep', 'encodings.idna', '_pydevd_bundle.pydevd_vm_type', '_pydev_imps', 'xmlrpc', 'gzip', 'xmlrpc.client', 'socketserver', 'http.server', 'xmlrpc.server', '_pydev_imps._pydev_saved_modules', '_pydevd_bundle.pydevd_constants', '_pydev_bundle', '_pydev_runfiles', '_pydevd_frame_eval', 'pydev_ipython', 'pydevd_concurrency_analyser', 'pydevd_plugins', '_pydev_bundle.pydev_log', '_pydev_bundle._pydev_filesystem_encoding', '_pydevd_bundle.pydevd_comm_constants', 'pydevd_file_utils', '_pydev_imps._pydev_execfile', '_pydevd_bundle.pydevd_exec2', '_pydev_bundle.pydev_imports', '_pydev_bundle.pydev_is_thread_alive', '_pydev_bundle.pydev_override', 'pydevd_plugins.extensions', '_pydevd_bundle.pydevd_extension_utils', '_pydevd_bundle.pydevd_frame_utils', '_pydevd_bundle.pydevd_filtering', '_pydevd_bundle.pydevd_io', '_pydevd_bundle.pydevd_utils', '_pydev_bundle._pydev_tipper_common', '_pydev_bundle._pydev_imports_tipper', '_pydev_bundle._pydev_calltip_util', '_pydevd_bundle.pydevd_safe_repr', '_pydevd_bundle.pydevd_resolver', '_pydevd_bundle.pydevd_extension_api', '_pydevd_bundle.pydevd_xml', '_pydevd_bundle.pydevd_dont_trace', '_pydevd_frame_eval.vendored', '_pydevd_frame_eval.vendored.bytecode.flags', '_pydevd_frame_eval.vendored.bytecode.instr', '_pydevd_frame_eval.vendored.bytecode.bytecode', '_pydevd_frame_eval.vendored.bytecode.concrete', '_pydevd_frame_eval.vendored.bytecode.cfg', '_pydevd_frame_eval.vendored.bytecode', '_pydevd_bundle.pydevd_bytecode_utils', '_pydevd_bundle.pydevd_cython', '_pydevd_bundle.pydevd_cython_wrapper', '_pydevd_bundle.pydevd_additional_thread_info', '_pydevd_bundle.pydevd_thread_lifecycle', '_pydevd_bundle.pydevd_save_locals', '_pydevd_bundle.pydevd_defaults', '_pydev_bundle.pydev_monkey', 'pydevd_tracing', '_pydevd_bundle.pydevd_daemon_thread', '_pydevd_bundle.pydevd_timeout', '_pydevd_bundle.pydevd_vars', '_pydev_bundle.pydev_console_utils', '_pydevd_bundle.pydevd_import_class', '_pydevd_bundle.pydevd_breakpoints', '_pydevd_bundle.pydevd_custom_frames', '_pydevd_bundle.pydevd_dont_trace_files', '_pydevd_bundle.pydevd_net_command', '_pydev_bundle.pydev_umd', 'pydevconsole', '_pydev_bundle._pydev_completer', '_pydevd_bundle.pydevd_net_command_factory_xml', '_pydevd_bundle.pydevd_frame', '_pydevd_bundle.pydevd_additional_thread_info_regular', '_pydevd_bundle.pydevd_trace_dispatch', '_pydevd_frame_eval.pydevd_frame_eval_main', '_pydevd_bundle.pydevd_source_mapping', 'pydevd_concurrency_analyser.pydevd_thread_wrappers', 'pydevd_concurrency_analyser.pydevd_concurrency_logger', '_pydevd_bundle._debug_adapter', '_pydevd_bundle._debug_adapter.pydevd_schema_log', '_pydevd_bundle._debug_adapter.pydevd_base_schema', '_pydevd_bundle._debug_adapter.pydevd_schema', '_pydevd_bundle.pydevd_reload', '_pydev_bundle.fsnotify', '_pydevd_bundle.pydevd_console', '_pydevd_bundle.pydevd_comm', '_pydevd_bundle.pydevd_net_command_factory_json', '_pydevd_bundle.pydevd_collect_bytecode_info', '_pydevd_bundle.pydevd_api', '_pydevd_bundle.pydevd_json_debug_options', '_pydevd_bundle.pydevd_process_net_command_json', '_pydevd_bundle.pydevd_traceproperty', '_pydevd_bundle.pydevd_process_net_command', '_pydevd_bundle.pydevd_suspended_frames', '_pydevd_bundle.pydevd_trace_api', 'pydevd_plugins.django_debug', 'pydevd_plugins.jinja2_debug', '_pydevd_bundle.pydevd_plugin_utils', 'pydevd_plugins.extensions.types', 'pydevd_plugins.extensions.types.pydevd_helpers', 'pydevd_plugins.extensions.types.pydevd_plugin_numpy_types', 'pydevd_plugins.extensions.types.pydevd_plugins_django_form_str', 'pydevd', 'debugpy._vendored.force_pydevd', 'debugpy.server', 'debugpy.adapter', 'debugpy.common.timestamp', 'debugpy.common.util', 'debugpy.common.log', 'debugpy.common.sockets', 'debugpy.server.api', 'ipykernel.debugger', 'ipykernel.ipkernel', 'ipykernel.parentpoller', 'ipykernel.kernelapp', 'win32api', 'win32security', 'ntsecuritycon', 'faulthandler', 'IPython.core.completerlib', 'storemagic', 'pyforest._importable', 'pyforest.user_specific_imports', 'pyforest._imports', 'pyforest.utils', 'pyforest', 'logging.config', 'pythonjsonlogger', 'pythonjsonlogger.jsonlogger', 'daiquiri.types', 'daiquiri.formatter', 'daiquiri.handlers', 'daiquiri.output', 'daiquiri', 'jupyter_require.__about__', 'csscompressor', 'jupyter_require.core', 'jupyter_require.notebook', 'jupyter_nbutils.__about__', 'jupyter_nbutils.config', 'jupyter_nbutils.utils', 'jupyter_nbutils', 'jupyter_require.magic', 'jupyter_require', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'mkl._mklinit', 'mkl._py_mkl_service', 'mkl', 'numpy._distributor_init', 'numpy.core._multiarray_umath', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.compat', 'numpy.core.overrides', 'numpy.core.multiarray', 'numpy.core.umath', 'numpy.core._string_helpers', 'numpy.core._dtype', 'numpy.core._type_aliases', 'numpy.core.numerictypes', 'numpy.core._asarray', 'numpy.core._exceptions', 'numpy.core._methods', 'numpy.core.fromnumeric', 'numpy.core.shape_base', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core.numeric', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._multiarray_tests', 'numpy.core._add_newdocs', 'numpy.core._add_newdocs_scalars', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'numpy._pytesttester', 'numpy.core', 'numpy.lib.mixins', 'numpy.lib.ufunclike', 'numpy.lib.type_check', 'numpy.lib.scimath', 'numpy.lib.twodim_base', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.linalg.linalg', 'numpy.linalg', 'numpy.matrixlib.defmatrix', 'numpy.matrixlib', 'numpy.lib.histograms', 'numpy.lib.function_base', 'numpy.lib.stride_tricks', 'numpy.lib.index_tricks', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.npyio', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.lib', 'numpy.fft._pocketfft_internal', 'numpy.fft._pocketfft', 'numpy.fft.helper', 'numpy.fft', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.polynomial', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.polynomial', 'numpy.random._common', 'secrets', 'numpy.random.bit_generator', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random.mtrand', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.random._pickle', 'numpy.random', 'numpy.ctypeslib', 'numpy.ma.core', 'numpy.ma.extras', 'numpy.ma', 'numpy', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'pytz', 'mmap', 'pandas._typing', 'pandas._libs.tslibs.dtypes', 'pandas._libs.tslibs.base', 'pandas._libs.tslibs.np_datetime', 'pandas._libs.tslibs.nattype', 'pandas._libs.tslibs.timezones', 'pandas._libs.tslibs.ccalendar', 'pandas._libs.tslibs.tzconversion', 'pandas._config.config', 'pandas._config.dates', 'pandas._config.display', 'pandas._config', 'pandas._config.localization', 'pandas._libs.tslibs.strptime', 'pandas._libs.tslibs.fields', 'pandas._libs.tslibs.timedeltas', 'pandas._libs.tslibs.timestamps', 'dateutil.easter', 'pandas._libs.properties', 'pandas._libs.tslibs.offsets', 'pandas._libs.tslibs.parsing', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs.vectorized', 'pandas._libs.tslibs', 'pandas._libs.ops_dispatch', 'pandas._libs.missing', 'pandas._libs.hashtable', 'pandas._libs.algos', 'pandas._libs.interval', 'pandas._libs', 'pandas.util._decorators', 'pandas.core', 'pandas.core.util', 'pandas._libs.tslib', 'pandas._libs.lib', 'pandas._libs.hashing', 'pandas.core.dtypes', 'pandas.errors', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.base', 'pandas.core.dtypes.inference', 'pandas.core.dtypes.dtypes', 'pandas.core.dtypes.common', 'pandas.core.util.hashing', 'pandas.util', 'pandas.util.version', 'pandas.compat.numpy', 'pyarrow._generated_version', '_cython_0_29_28', 'cloudpickle.compat', 'typing_extensions', 'cloudpickle.cloudpickle', 'cloudpickle.cloudpickle_fast', 'cloudpickle', 'pyarrow.util', 'pyarrow.lib', 'pyarrow._hdfsio', 'pyarrow.filesystem', 'pyarrow.hdfs', 'pyarrow.ipc', 'pyarrow.serialization', 'pyarrow.types', 'pyarrow', 'pandas.compat.pyarrow', 'pandas.compat', 'pandas.core.config_init', 'pandas.core.dtypes.missing', 'pandas.util._exceptions', 'pandas.util._validators', 'pandas.core.dtypes.cast', 'pandas.core.array_algos', 'pandas.core.common', 'pandas.core.construction', 'pandas.core.array_algos.take', 'pandas.core.indexers', 'pandas.core.algorithms', 'pandas.compat.numpy.function', 'pandas.compat._optional', 'pandas.core.missing', 'pandas.core.roperator', 'pandas._libs.ops', 'pandas.core.computation', 'numexpr.__config__', 'numexpr.interpreter', 'numexpr.expressions', 'numexpr.utils', 'numexpr.necompiler', 'numexpr.version', 'numexpr', 'pandas.core.computation.check', 'pandas.core.computation.expressions', 'pandas.core.ops.missing', 'pandas.core.ops.dispatch', 'pandas.core.ops.invalid', 'pandas.core.ops.array_ops', 'pandas.core.ops.common', 'pandas.core.ops.docstrings', 'pandas.core.ops.mask_ops', 'pandas.core.ops.methods', 'pandas.core.ops', 'pandas.core.sorting', 'pandas.core.arrays.base', 'bottleneck.reduce', 'bottleneck.nonreduce', 'bottleneck.nonreduce_axis', 'bottleneck.move', 'bottleneck.slow.reduce', 'bottleneck.slow.nonreduce', 'bottleneck.slow.nonreduce_axis', 'bottleneck.slow.move', 'bottleneck.slow', 'bottleneck.benchmark', 'bottleneck.benchmark.autotimeit', 'bottleneck.benchmark.bench', 'bottleneck.benchmark.bench_detailed', 'bottleneck.tests', 'bottleneck.tests.util', 'bottleneck._pytesttester', 'bottleneck._version', 'bottleneck', 'pandas.core.nanops', 'pandas.core.array_algos.masked_reductions', 'pandas.core.arraylike', 'pandas.core.arrays.masked', 'pandas.core.arrays.boolean', 'pandas._libs.arrays', 'pandas.core.accessor', 'pandas.core.array_algos.transforms', 'pandas.core.arrays._mixins', 'pandas.core.base', 'pandas.core.strings.accessor', 'pandas.core.strings.base', 'pandas.core.strings', 'pandas.core.strings.object_array', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.console', 'pandas.core.arrays.categorical', 'pandas.tseries', 'pandas.tseries.frequencies', 'pandas.core.arrays.datetimelike', 'pandas.core.arrays._ranges', 'pandas.core.arrays.numeric', 'pandas.core.tools', 'pandas.core.tools.numeric', 'pandas.core.arrays.integer', 'pandas.tseries.offsets', 'pandas.core.arrays.datetimes', 'pandas.core.arrays.floating', 'pandas.core.indexes', 'pandas._libs.index', 'pandas._libs.join', 'pandas._libs.sparse', 'pandas.core.arrays.sparse.dtype', 'pandas.io.formats.printing', 'pandas.core.arrays.sparse.array', 'pandas.core.arrays.sparse.accessor', 'pandas.core.arrays.sparse', 'pandas.core.dtypes.concat', 'pandas.core.array_algos.putmask', 'pandas.core.indexes.frozen', 'pandas.core.indexes.base', 'pandas.core.arrays.interval', 'pandas.core.arrays.numpy_', 'pandas.core.arrays.period', 'pandas.core.arrays.string_', 'pyarrow._compute', 'pyarrow._compute_docstrings', 'pyarrow.vendored', 'pyarrow.vendored.docscrape', 'pyarrow.compute', 'pandas.core.arrays.string_arrow', 'pandas.core.arrays.timedeltas', 'pandas.core.arrays', 'pandas.core.flags', 'pandas._libs.reduction', 'pandas.core.indexes.extension', 'pandas.core.indexes.category', 'pandas.core.indexes.numeric', 'pandas.core.tools.timedeltas', 'pandas.core.indexes.datetimelike', 'pandas.core.tools.times', 'pandas.core.indexes.datetimes', 'pandas.core.indexes.multi', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.interval', 'pandas.core.indexes.period', 'pandas.core.indexes.range', 'pandas.core.indexes.api', 'pandas.core.aggregation', 'pandas.core.apply', 'pandas._libs.indexing', 'pandas.core.indexing', 'pandas.core.reshape', 'pandas._libs.internals', 'pandas._libs.writers', 'pandas.core.array_algos.quantile', 'pandas.core.array_algos.replace', 'pandas.core.internals.blocks', 'pandas.core.internals.api', 'pandas.core.internals.base', 'pandas.core.internals.array_manager', 'pandas.core.internals.ops', 'pandas.core.internals.managers', 'pandas.core.internals.concat', 'pandas.core.internals', 'pandas.core.reshape.concat', 'pandas.io.common', 'pandas.io.formats.format', 'pandas.core.describe', 'pandas.core.internals.construction', 'pandas.core.shared_docs', 'pandas._libs.window', 'pandas._libs.window.aggregations', 'pandas.core.util.numba_', 'pandas.core.window.common', 'pandas.core.window.doc', 'pandas._libs.window.indexers', 'pandas.core.window.indexers', 'pandas.core.window.numba_', 'pandas.core.window.online', 'pandas.core.window.rolling', 'pandas.core.window.ewm', 'pandas.core.window.expanding', 'pandas.core.window', 'pandas.core.generic', 'pandas.core.reshape.util', 'pandas.core.reshape.melt', 'pandas._libs.reshape', 'pandas.core.indexes.accessors', 'pandas.arrays', 'pandas.core.tools.datetimes', 'pandas.plotting._core', 'pandas.plotting._misc', 'pandas.plotting', 'pandas.core.series', 'pandas.io.formats.info', 'pandas.core.frame', 'pandas.core.groupby.base', 'pandas._libs.groupby', 'pandas.core.groupby.numba_', 'pandas.core.groupby.categorical', 'pandas.core.groupby.grouper', 'pandas.core.groupby.ops', 'pandas.core.groupby.groupby', 'pandas.core.groupby.generic', 'pandas.core.groupby', 'pandas.core.api', 'pandas.tseries.api', 'pandas.core.computation.common', 'pandas.core.computation.align', 'pandas.compat.chainmap', 'pandas.core.computation.scope', 'pandas.core.computation.ops', 'pandas.core.computation.parsing', 'pandas.core.computation.expr', 'pandas.core.computation.engines', 'pandas.core.computation.eval', 'pandas.core.computation.api', 'pandas.core.reshape.merge', 'pandas.core.reshape.pivot', 'pandas.core.reshape.reshape', 'pandas.core.reshape.tile', 'pandas.core.reshape.api', 'pandas.api.extensions', 'pandas.api.indexers', 'pandas.core.dtypes.api', 'pandas.api.types', 'pandas.api', 'pandas.util._print_versions', 'pandas.io.clipboards', 'pandas._libs.parsers', 'pandas.io.excel._util', 'pandas.io.date_converters', 'pandas.io.parsers.base_parser', 'pandas.io.parsers.c_parser_wrapper', 'pandas.io.parsers.python_parser', 'pandas.io.parsers.readers', 'pandas.io.parsers', 'pandas.io.excel._odfreader', 'pandas.io.excel._openpyxl', 'pandas.io.excel._pyxlsb', 'pandas.io.excel._xlrd', 'pandas.io.excel._base', 'pandas._libs.json', 'pandas.io.formats._color_data', 'pandas.io.formats.css', 'pandas.io.formats.excel', 'pandas.io.excel._odswriter', 'pandas.io.excel._xlsxwriter', 'pandas.io.excel._xlwt', 'pandas.io.excel', 'pandas.io.feather_format', 'pandas.io.gbq', 'pandas.io.html', 'pandas.io.json._normalize', 'pandas.io.json._table_schema', 'pandas.io.json._json', 'pandas.io.json', 'pandas.io.orc', 'pandas.io.parquet', 'pandas.compat.pickle_compat', 'pandas.io.pickle', 'pandas.core.computation.pytables', 'pandas.io.pytables', 'pandas.io.sas.sasreader', 'pandas.io.sas', 'pandas.io.spss', 'pandas.io.sql', 'pandas.io.stata', 'pandas.io.xml', 'pandas.io.api', 'pandas.util._tester', 'pandas._testing._random', 'pandas._testing.contexts', 'pandas._testing._io', 'pandas._testing._warnings', 'cmath', 'pandas._libs.testing', 'pandas._testing.asserters', 'pandas._testing.compat', 'pandas._testing', 'pandas.testing', 'pandas._version', 'pandas', 'seaborn', 'seaborn.rcmod', 'matplotlib', 'matplotlib._api.deprecation', 'matplotlib._api', 'matplotlib._c_internal_utils', 'matplotlib.cbook', 'matplotlib.docstring', 'PIL._version', 'PIL', 'defusedxml.common', 'defusedxml', 'xml.etree', 'xml.etree.ElementPath', '_elementtree', 'xml.etree.ElementTree', 'defusedxml.ElementTree', 'PIL.ImageMode', 'PIL.TiffTags', 'PIL._binary', 'PIL._util', 'PIL._imaging', 'cffi.lock', 'cffi.error', 'cffi.model', 'cffi.api', 'cffi', 'PIL.Image', 'matplotlib._animation_data', 'matplotlib.animation', 'PIL.ImageChops', 'PIL.ImageFile', 'PIL.GimpGradientFile', 'PIL.GimpPaletteFile', 'PIL.ImageColor', 'PIL.PaletteFile', 'PIL.ImagePalette', 'PIL.ImageSequence', 'PIL.PngImagePlugin', 'matplotlib._path', 'matplotlib.bezier', 'matplotlib.path', 'matplotlib.transforms', 'matplotlib.ticker', 'matplotlib.scale', 'matplotlib._color_data', 'matplotlib.colors', 'pyparsing.util', 'pyparsing.unicode', 'pyparsing.exceptions', 'pyparsing.actions', 'pyparsing.results', 'pyparsing.core', 'pyparsing.helpers', 'pyparsing.testing', 'pyparsing.common', 'pyparsing', 'matplotlib.fontconfig_pattern', 'matplotlib._enums', 'cycler', 'matplotlib.rcsetup', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver', 'dateutil.rrule', 'matplotlib.units', 'matplotlib.dates']
2023-02-17 18:22:59,892 [21296] DEBUG    matplotlib:224: [JupyterRequire] CACHEDIR=C:\Users\sunny\.matplotlib
2023-02-17 18:22:59,898 [21296] DEBUG    matplotlib.font_manager:1439: [JupyterRequire] Using fontManager instance from C:\Users\sunny\.matplotlib\fontlist-v330.json
2023-02-17 18:23:00,141 [21296] DEBUG    matplotlib.pyplot:290: [JupyterRequire] Loaded backend module://matplotlib_inline.backend_inline version unknown.
2023-02-17 18:23:00,141 [21296] DEBUG    matplotlib.pyplot:290: [JupyterRequire] Loaded backend module://matplotlib_inline.backend_inline version unknown.
2023-02-17 18:23:00,440 [21296] DEBUG    matplotlib.pyplot:290: [JupyterRequire] Loaded backend module://matplotlib_inline.backend_inline version unknown.
2023-02-17 18:23:18,342 [21296] DEBUG    matplotlib.font_manager:1329: [JupyterRequire] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.
2023-02-17 18:23:18,344 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2023-02-17 18:23:18,344 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,345 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2023-02-17 18:23:18,345 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2023-02-17 18:23:18,345 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-02-17 18:23:18,345 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,346 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2023-02-17 18:23:18,346 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,346 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,346 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,346 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,348 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,348 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2023-02-17 18:23:18,348 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2023-02-17 18:23:18,348 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2023-02-17 18:23:18,348 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-02-17 18:23:18,348 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,348 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,348 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2023-02-17 18:23:18,348 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,349 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2023-02-17 18:23:18,349 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2023-02-17 18:23:18,349 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,349 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,349 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,349 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2023-02-17 18:23:18,349 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,349 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-02-17 18:23:18,349 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,350 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,350 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-02-17 18:23:18,350 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2023-02-17 18:23:18,350 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,350 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-02-17 18:23:18,350 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2023-02-17 18:23:18,350 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,350 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2023-02-17 18:23:18,350 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-02-17 18:23:18,351 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,351 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,351 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,351 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25
2023-02-17 18:23:18,351 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
2023-02-17 18:23:18,351 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,351 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,351 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24
2023-02-17 18:23:18,352 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335
2023-02-17 18:23:18,352 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,352 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05
2023-02-17 18:23:18,352 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975
2023-02-17 18:23:18,352 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,352 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,352 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,352 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,352 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,353 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
2023-02-17 18:23:18,353 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,353 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
2023-02-17 18:23:18,353 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,353 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25
2023-02-17 18:23:18,353 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24
2023-02-17 18:23:18,353 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
2023-02-17 18:23:18,353 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24
2023-02-17 18:23:18,353 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,354 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05
2023-02-17 18:23:18,354 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,354 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545
2023-02-17 18:23:18,354 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335
2023-02-17 18:23:18,354 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,354 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,354 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145
2023-02-17 18:23:18,354 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,354 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
2023-02-17 18:23:18,355 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sitka' (SitkaVF.ttf) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,355 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
2023-02-17 18:23:18,355 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525
2023-02-17 18:23:18,355 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335
2023-02-17 18:23:18,355 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335
2023-02-17 18:23:18,355 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,355 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,355 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
2023-02-17 18:23:18,356 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,356 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05
2023-02-17 18:23:18,356 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,356 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,356 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,356 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
2023-02-17 18:23:18,356 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,356 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
2023-02-17 18:23:18,356 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,357 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
2023-02-17 18:23:18,357 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24
2023-02-17 18:23:18,357 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
2023-02-17 18:23:18,357 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,357 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05
2023-02-17 18:23:18,357 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,357 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05
2023-02-17 18:23:18,357 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
2023-02-17 18:23:18,358 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05
2023-02-17 18:23:18,358 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,358 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,358 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05
2023-02-17 18:23:18,358 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,358 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,358 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
2023-02-17 18:23:18,358 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,359 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,359 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24
2023-02-17 18:23:18,360 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,360 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,360 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,360 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
2023-02-17 18:23:18,361 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,361 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335
2023-02-17 18:23:18,361 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335
2023-02-17 18:23:18,361 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145
2023-02-17 18:23:18,361 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535
2023-02-17 18:23:18,361 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,361 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05
2023-02-17 18:23:18,363 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25
2023-02-17 18:23:18,363 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,363 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335
2023-02-17 18:23:18,363 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635
2023-02-17 18:23:18,363 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,364 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363
2023-02-17 18:23:18,364 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,364 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
2023-02-17 18:23:18,364 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
2023-02-17 18:23:18,364 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145
2023-02-17 18:23:18,364 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
2023-02-17 18:23:18,364 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
2023-02-17 18:23:18,364 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335
2023-02-17 18:23:18,365 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
2023-02-17 18:23:18,365 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,365 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,365 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335
2023-02-17 18:23:18,365 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335
2023-02-17 18:23:18,365 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,365 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,366 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,366 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,366 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
2023-02-17 18:23:18,366 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,366 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145
2023-02-17 18:23:18,366 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,366 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,366 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335
2023-02-17 18:23:18,366 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05
2023-02-17 18:23:18,366 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
2023-02-17 18:23:18,367 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364
2023-02-17 18:23:18,367 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,367 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,367 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 500 normal>) = 10.145
2023-02-17 18:23:18,368 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43
2023-02-17 18:23:18,368 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI Variable' (SegUIVar.ttf) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,368 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
2023-02-17 18:23:18,368 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,368 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,368 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,368 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,368 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,369 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,369 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05
2023-02-17 18:23:18,369 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05
2023-02-17 18:23:18,369 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335
2023-02-17 18:23:18,369 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,369 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,369 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335
2023-02-17 18:23:18,369 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
2023-02-17 18:23:18,369 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145
2023-02-17 18:23:18,370 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,370 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24
2023-02-17 18:23:18,370 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,370 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,370 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335
2023-02-17 18:23:18,370 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,370 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
2023-02-17 18:23:18,370 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24
2023-02-17 18:23:18,370 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25
2023-02-17 18:23:18,371 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
2023-02-17 18:23:18,371 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,371 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
2023-02-17 18:23:18,371 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
2023-02-17 18:23:18,371 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
2023-02-17 18:23:18,371 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,371 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,371 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25
2023-02-17 18:23:18,372 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
2023-02-17 18:23:18,372 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335
2023-02-17 18:23:18,372 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24
2023-02-17 18:23:18,372 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,372 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,372 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05
2023-02-17 18:23:18,372 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25
2023-02-17 18:23:18,372 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,372 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,373 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,373 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25
2023-02-17 18:23:18,373 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,373 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25
2023-02-17 18:23:18,373 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,373 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975
2023-02-17 18:23:18,373 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,373 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,374 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05
2023-02-17 18:23:18,374 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,374 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,374 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335
2023-02-17 18:23:18,374 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145
2023-02-17 18:23:18,374 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145
2023-02-17 18:23:18,374 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24
2023-02-17 18:23:18,374 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145
2023-02-17 18:23:18,374 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24
2023-02-17 18:23:18,375 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,375 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,375 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,375 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
2023-02-17 18:23:18,375 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,375 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,375 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
2023-02-17 18:23:18,375 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335
2023-02-17 18:23:18,375 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05
2023-02-17 18:23:18,376 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,376 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,376 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,376 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,376 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05
2023-02-17 18:23:18,376 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,376 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
2023-02-17 18:23:18,376 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525
2023-02-17 18:23:18,376 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25
2023-02-17 18:23:18,376 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,377 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,377 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535
2023-02-17 18:23:18,377 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,377 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,377 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,377 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
2023-02-17 18:23:18,377 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
2023-02-17 18:23:18,377 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335
2023-02-17 18:23:18,378 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,378 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
2023-02-17 18:23:18,378 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335
2023-02-17 18:23:18,378 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05
2023-02-17 18:23:18,378 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,378 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05
2023-02-17 18:23:18,378 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,378 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,378 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
2023-02-17 18:23:18,378 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05
2023-02-17 18:23:18,379 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
2023-02-17 18:23:18,379 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,379 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,379 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
2023-02-17 18:23:18,379 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sitka' (SitkaVF-Italic.ttf) italic normal 400 normal>) = 11.05
2023-02-17 18:23:18,379 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05
2023-02-17 18:23:18,379 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335
2023-02-17 18:23:18,379 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,380 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,380 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,380 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
2023-02-17 18:23:18,380 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,380 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335
2023-02-17 18:23:18,380 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,380 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05
2023-02-17 18:23:18,380 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,380 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24
2023-02-17 18:23:18,381 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
2023-02-17 18:23:18,381 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,381 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335
2023-02-17 18:23:18,381 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
2023-02-17 18:23:18,381 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
2023-02-17 18:23:18,381 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,381 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
2023-02-17 18:23:18,381 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145
2023-02-17 18:23:18,381 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,382 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525
2023-02-17 18:23:18,382 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,382 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,382 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25
2023-02-17 18:23:18,382 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,382 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,382 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,382 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
2023-02-17 18:23:18,382 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,383 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545
2023-02-17 18:23:18,383 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
2023-02-17 18:23:18,383 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
2023-02-17 18:23:18,383 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,383 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145
2023-02-17 18:23:18,383 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24
2023-02-17 18:23:18,383 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,383 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,384 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145
2023-02-17 18:23:18,384 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,384 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
2023-02-17 18:23:18,384 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05
2023-02-17 18:23:18,384 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,384 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
2023-02-17 18:23:18,384 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25
2023-02-17 18:23:18,384 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25
2023-02-17 18:23:18,384 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,385 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,385 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,385 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,385 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,385 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
2023-02-17 18:23:18,385 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335
2023-02-17 18:23:18,385 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,385 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,385 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535
2023-02-17 18:23:18,386 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,386 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335
2023-02-17 18:23:18,386 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
2023-02-17 18:23:18,386 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335
2023-02-17 18:23:18,386 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
2023-02-17 18:23:18,386 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
2023-02-17 18:23:18,386 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635
2023-02-17 18:23:18,386 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335
2023-02-17 18:23:18,386 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,387 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05
2023-02-17 18:23:18,387 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05
2023-02-17 18:23:18,387 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05
2023-02-17 18:23:18,387 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05
2023-02-17 18:23:18,387 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05
2023-02-17 18:23:18,387 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
2023-02-17 18:23:18,387 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,387 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
2023-02-17 18:23:18,387 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
2023-02-17 18:23:18,388 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,388 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145
2023-02-17 18:23:18,388 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,388 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25
2023-02-17 18:23:18,388 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363
2023-02-17 18:23:18,388 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05
2023-02-17 18:23:18,388 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975
2023-02-17 18:23:18,388 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25
2023-02-17 18:23:18,388 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,389 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335
2023-02-17 18:23:18,389 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
2023-02-17 18:23:18,389 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,389 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335
2023-02-17 18:23:18,389 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05
2023-02-17 18:23:18,389 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05
2023-02-17 18:23:18,389 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,389 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,389 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,390 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,390 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,390 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,390 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
2023-02-17 18:23:18,390 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,390 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,390 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
2023-02-17 18:23:18,390 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
2023-02-17 18:23:18,390 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145
2023-02-17 18:23:18,391 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145
2023-02-17 18:23:18,391 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975
2023-02-17 18:23:18,391 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145
2023-02-17 18:23:18,391 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,391 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,391 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,391 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,391 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,391 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535
2023-02-17 18:23:18,392 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335
2023-02-17 18:23:18,392 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05
2023-02-17 18:23:18,392 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
2023-02-17 18:23:18,392 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525
2023-02-17 18:23:18,392 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335
2023-02-17 18:23:18,392 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05
2023-02-17 18:23:18,392 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145
2023-02-17 18:23:18,392 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,393 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335
2023-02-17 18:23:18,393 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145
2023-02-17 18:23:18,393 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
2023-02-17 18:23:18,393 [21296] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe Fluent Icons' (SegoeIcons.ttf) normal normal 400 normal>) = 10.05
2023-02-17 18:23:18,393 [21296] DEBUG    matplotlib.font_manager:1367: [JupyterRequire] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('C:\\Users\\sunny\\anaconda3\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.
2023-02-17 18:23:38,465 [21296] DEBUG    matplotlib.colorbar:620: [JupyterRequire] locator: <matplotlib.colorbar._ColorbarAutoLocator object at 0x0000022DEF0D0B80>
2023-02-17 18:23:38,465 [21296] DEBUG    matplotlib.colorbar:665: [JupyterRequire] Using auto colorbar locator <matplotlib.colorbar._ColorbarAutoLocator object at 0x0000022DEF0D0B80> on colorbar
2023-02-17 18:23:38,465 [21296] DEBUG    matplotlib.colorbar:794: [JupyterRequire] Setting pcolormesh
2023-02-17 18:23:43,527 [21296] DEBUG    matplotlib.colorbar:620: [JupyterRequire] locator: <matplotlib.colorbar._ColorbarAutoLocator object at 0x0000022DEF4A7E20>
2023-02-17 18:23:43,527 [21296] DEBUG    matplotlib.colorbar:665: [JupyterRequire] Using auto colorbar locator <matplotlib.colorbar._ColorbarAutoLocator object at 0x0000022DEF4A7E20> on colorbar
2023-02-17 18:23:43,527 [21296] DEBUG    matplotlib.colorbar:794: [JupyterRequire] Setting pcolormesh
2023-02-17 18:28:26,725 [21296] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-02-17 18:28:26,726 [21296] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-02-17 18:28:26,726 [21296] INFO     root:247: [JupyterRequire] Initializing comms.
2023-02-17 18:28:26,728 [21296] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-02-17 18:28:26,729 [21296] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-02-17 18:28:26,729 [21296] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-02-17 18:28:39,590 [21296] DEBUG    matplotlib.pyplot:290: [JupyterRequire] Loaded backend module://matplotlib_inline.backend_inline version unknown.
2023-02-17 18:28:51,927 [21296] DEBUG    matplotlib.colorbar:620: [JupyterRequire] locator: <matplotlib.colorbar._ColorbarAutoLocator object at 0x0000022D8F8A7B80>
2023-02-17 18:28:51,927 [21296] DEBUG    matplotlib.colorbar:665: [JupyterRequire] Using auto colorbar locator <matplotlib.colorbar._ColorbarAutoLocator object at 0x0000022D8F8A7B80> on colorbar
2023-02-17 18:28:51,927 [21296] DEBUG    matplotlib.colorbar:794: [JupyterRequire] Setting pcolormesh
2023-02-17 18:28:53,008 [21296] DEBUG    matplotlib.colorbar:620: [JupyterRequire] locator: <matplotlib.colorbar._ColorbarAutoLocator object at 0x0000022D8F8C24C0>
2023-02-17 18:28:53,008 [21296] DEBUG    matplotlib.colorbar:665: [JupyterRequire] Using auto colorbar locator <matplotlib.colorbar._ColorbarAutoLocator object at 0x0000022D8F8C24C0> on colorbar
2023-02-17 18:28:53,008 [21296] DEBUG    matplotlib.colorbar:794: [JupyterRequire] Setting pcolormesh
2023-02-17 18:30:03,533 [21296] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\jedi\third_party\typeshed\stdlib\2and3\builtins.pyi
2023-02-17 18:30:03,636 [21296] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\sklearn\__init__.py
2023-02-17 18:30:03,651 [21296] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\sklearn\base.py
2023-02-17 18:30:03,685 [21296] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\sklearn\ensemble\__init__.py
2023-02-17 18:30:03,714 [21296] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\sklearn\ensemble\_base.py
2023-02-17 18:30:16,365 [21296] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-17 18:30:16,365 [21296] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-17 18:30:16,365 [21296] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-17 18:30:16,367 [21296] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-17 18:30:16,367 [21296] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-17 18:30:16,530 [21296] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\jedi\third_party\typeshed\stdlib\3\sys.pyi
2023-02-17 18:30:35,297 [21296] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-17 18:30:35,297 [21296] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-17 18:30:35,297 [21296] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-17 18:30:35,297 [21296] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-17 18:30:35,297 [21296] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-17 18:30:50,015 [21296] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-17 18:30:50,016 [21296] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-17 18:30:50,016 [21296] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-17 18:30:50,017 [21296] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-17 18:30:50,017 [21296] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-17 18:30:50,085 [21296] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\numpy\__init__.py
2023-02-17 18:31:12,676 [21296] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-17 18:31:12,676 [21296] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-17 18:31:12,676 [21296] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-17 18:31:12,676 [21296] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-17 18:31:12,676 [21296] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-17 18:32:59,902 [21296] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-17 18:32:59,902 [21296] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-17 18:32:59,902 [21296] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-17 18:32:59,905 [21296] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-17 18:32:59,905 [21296] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-17 18:33:07,144 [21296] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-17 18:33:07,144 [21296] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-17 18:33:07,144 [21296] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-17 18:33:07,144 [21296] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-17 18:33:07,144 [21296] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-17 18:33:10,164 [21296] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-17 18:33:10,166 [21296] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-17 18:33:10,167 [21296] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-17 18:33:10,167 [21296] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-17 18:33:10,167 [21296] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-17 18:33:10,203 [21296] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\abc.py
2023-02-17 18:33:10,206 [21296] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\jedi\third_party\typeshed\stdlib\3\abc.pyi
2023-02-21 19:40:10,274 [25368] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-02-21 19:40:10,274 [25368] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-02-21 19:40:10,274 [25368] INFO     root:247: [JupyterRequire] Initializing comms.
2023-02-21 19:40:10,274 [25368] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-02-21 19:40:10,274 [25368] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-02-21 19:40:10,274 [25368] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-02-21 19:40:11,761 [25368] INFO     numexpr.utils:145: [JupyterRequire] Note: NumExpr detected 12 cores but "NUMEXPR_MAX_THREADS" not set, so enforcing safe limit of 8.
2023-02-21 19:40:11,763 [25368] INFO     numexpr.utils:157: [JupyterRequire] NumExpr defaulting to 8 threads.
2023-02-21 19:40:12,964 [25368] DEBUG    matplotlib:224: [JupyterRequire] matplotlib data path: C:\Users\sunny\anaconda3\lib\site-packages\matplotlib\mpl-data
2023-02-21 19:40:12,979 [25368] DEBUG    matplotlib:224: [JupyterRequire] CONFIGDIR=C:\Users\sunny\.matplotlib
2023-02-21 19:40:12,982 [25368] DEBUG    matplotlib:1394: [JupyterRequire] matplotlib version 3.4.3
2023-02-21 19:40:12,983 [25368] DEBUG    matplotlib:1395: [JupyterRequire] interactive is False
2023-02-21 19:40:12,983 [25368] DEBUG    matplotlib:1396: [JupyterRequire] platform is win32
2023-02-21 19:40:12,983 [25368] DEBUG    matplotlib:1397: [JupyterRequire] loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_thread', '_warnings', '_weakref', '_io', 'marshal', 'nt', 'winreg', '_frozen_importlib_external', 'time', 'zipimport', '_codecs', 'codecs', 'encodings.aliases', 'encodings', 'encodings.utf_8', 'encodings.cp1252', '_signal', 'encodings.latin_1', '_abc', 'abc', 'io', '__main__', '_stat', 'stat', '_collections_abc', 'genericpath', 'ntpath', 'os.path', 'os', '_sitebuiltins', '_locale', '_bootlocale', '_distutils_hack', 'types', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib', 'importlib.machinery', '_heapq', 'heapq', 'itertools', 'keyword', '_operator', 'operator', 'reprlib', '_collections', 'collections', 'collections.abc', '_functools', 'functools', 'contextlib', 'enum', '_sre', 'sre_constants', 'sre_parse', 'sre_compile', 'copyreg', 're', 'typing.io', 'typing.re', 'typing', 'importlib.abc', 'importlib.util', 'google', 'google.cloud', 'google.logging', 'mpl_toolkits', 'sphinxcontrib', 'zope', 'site', '_weakrefset', 'weakref', 'pkgutil', 'runpy', 'ipykernel._version', '_json', 'json.scanner', 'json.decoder', 'json.encoder', 'json', 'errno', 'signal', 'threading', 'msvcrt', '_winapi', 'subprocess', 'jupyter_client._version', 'posixpath', 'fnmatch', 'glob', '_socket', 'math', 'select', 'selectors', 'socket', 'zlib', '_compression', '_bz2', 'bz2', '_lzma', 'lzma', 'shutil', '_bisect', 'bisect', '_random', '_sha512', 'random', 'tempfile', 'getpass', 'platform', 'zmq.libzmq', 'zmq.backend.select', 'cython_runtime', 'zmq.backend.cython.constants', '_cython_0_29_24', 'zmq.backend.cython.error', 'zmq.error', 'zmq.backend.cython.message', 'zmq.backend.cython.context', 'copy', '_struct', 'struct', '_compat_pickle', '_pickle', 'pickle', 'zmq.backend.cython.socket', 'zmq.backend.cython.utils', 'zmq.backend.cython._poll', 'zmq.backend.cython._version', 'zmq.backend.cython._device', 'zmq.backend.cython._proxy_steerable', 'zmq.backend.cython', 'zmq.backend', 'zmq.utils', 'zmq.utils.constant_names', 'zmq.sugar.constants', 'atexit', 'zmq.sugar.attrsettr', 'zmq.sugar.poll', 'zmq.utils.jsonapi', 'zmq.utils.strtypes', 'zmq.sugar.socket', 'zmq.sugar.context', 'zmq.sugar.frame', 'zmq.sugar.tracker', 'zmq.sugar.version', 'zmq.sugar.stopwatch', 'zmq.sugar', 'zmq', '_ast', 'ast', '_opcode', 'opcode', 'dis', 'token', 'tokenize', 'linecache', 'inspect', 'traitlets.utils', 'traitlets.utils.getargspec', 'traitlets.utils.importstring', 'traitlets.utils.sentinel', 'traitlets.utils.bunch', 'traitlets.utils.descriptions', 'traitlets.traitlets', 'traitlets.utils.decorators', 'traitlets._version', 'traitlets', 'traceback', '_string', 'string', 'logging', 'pprint', 'gettext', 'argparse', 'traitlets.config.loader', 'textwrap', 'traitlets.utils.text', 'traitlets.config.configurable', 'traitlets.config.application', 'traitlets.config', 'jupyter_client.localinterfaces', 'jupyter_core.version', 'jupyter_core', 'urllib', 'urllib.parse', 'pathlib', 'jupyter_core.paths', 'jupyter_client.utils', 'jupyter_client.connect', 'traitlets.log', 'jupyter_client.launcher', 'concurrent', 'concurrent.futures._base', 'concurrent.futures', '_ssl', 'binascii', 'base64', 'ssl', 'asyncio.constants', 'asyncio.format_helpers', 'asyncio.base_futures', 'asyncio.log', 'asyncio.coroutines', '_contextvars', 'contextvars', 'asyncio.exceptions', 'asyncio.base_tasks', '_asyncio', 'asyncio.events', 'asyncio.futures', 'asyncio.protocols', 'asyncio.transports', 'asyncio.sslproto', 'asyncio.locks', 'asyncio.tasks', 'asyncio.staggered', 'asyncio.trsock', 'asyncio.base_events', 'asyncio.runners', 'asyncio.queues', 'asyncio.streams', 'asyncio.subprocess', 'asyncio.threads', '_overlapped', 'asyncio.base_subprocess', 'asyncio.proactor_events', 'asyncio.selector_events', 'asyncio.windows_utils', 'asyncio.windows_events', 'asyncio', 'jupyter_client.channelsabc', 'jupyter_client.channels', 'jupyter_client.clientabc', 'jupyter_client.client', 'jupyter_client.kernelspec', 'jupyter_client.managerabc', 'jupyter_client.manager', '_queue', 'queue', 'jupyter_client.blocking.channels', 'jupyter_client.blocking.client', 'jupyter_client.blocking', 'zmq._future', 'zmq.asyncio', 'jupyter_client.asynchronous.channels', 'jupyter_client.asynchronous.client', 'jupyter_client.asynchronous', '_uuid', 'uuid', 'jupyter_client.multikernelmanager', 'jupyter_client', 'ipykernel.connect', 'ipykernel', 'tornado', '_datetime', 'datetime', 'numbers', 'logging.handlers', 'html.entities', 'html', 'array', 'tornado.speedups', 'tornado.util', 'tornado.escape', 'colorama.ansi', '_ctypes', 'ctypes._endian', 'ctypes', 'ctypes.wintypes', 'colorama.win32', 'colorama.winterm', 'colorama.ansitowin32', 'colorama.initialise', 'colorama', 'tornado.log', 'tornado.concurrent', 'tornado.ioloop', '__future__', 'tornado.platform', 'tornado.gen', 'tornado.platform.asyncio', 'zmq.eventloop.ioloop', 'zmq.eventloop', 'zmq.eventloop.zmqstream', 'IPython.core', 'IPython.core.getipython', 'IPython.core.release', 'sysconfig', 'pydoc', 'bdb', 'IPython.utils', 'IPython.utils.ipstruct', 'IPython.utils.coloransi', 'pygments', 'IPython.utils.colorable', 'IPython.utils.PyColorize', 'locale', 'IPython.utils.encoding', 'IPython.utils.py3compat', 'IPython.core.excolors', 'IPython.testing', 'IPython.testing.skipdoctest', 'cmd', 'codeop', 'code', 'pdb', 'IPython.core.debugger', 'IPython.core.display_trap', 'shlex', 'IPython.utils._process_common', 'IPython.utils._process_win32', 'IPython.utils.process', 'IPython.utils.decorators', 'IPython.utils.path', 'IPython.utils.data', 'IPython.utils.terminal', 'IPython.core.ultratb', 'IPython.utils._sysinfo', 'IPython.utils.sysinfo', 'IPython.core.crashhandler', 'IPython.utils.importstring', 'IPython.paths', 'IPython.core.profiledir', 'IPython.core.application', 'IPython.terminal', '_hashlib', '_blake2', 'hashlib', 'IPython.core.compilerop', 'IPython.core.error', 'IPython.utils.text', 'IPython.core.magic_arguments', 'getopt', 'mimetypes', 'IPython.core.display', 'IPython.core.page', 'IPython.lib.security', 'IPython.lib', 'IPython.lib.pretty', 'IPython.utils.openpy', 'IPython.utils.dir2', 'IPython.utils.wildcard', 'pygments.lexers._mapping', 'pygments.modeline', 'pygments.plugin', 'pygments.util', 'pygments.lexers', 'pygments.filter', 'pygments.token', 'pygments.filters', 'pygments.regexopt', 'pygments.lexer', 'pygments.unistring', 'pygments.lexers.python', 'pygments.formatters._mapping', 'pygments.formatters', 'pygments.styles', 'pygments.formatter', 'pygments.formatters.html', 'IPython.core.oinspect', 'IPython.core.inputtransformer2', 'decorator', 'IPython.core.magic', 'pickleshare', 'IPython.core.autocall', 'IPython.core.macro', 'IPython.core.splitinput', 'IPython.core.prefilter', 'IPython.core.alias', 'IPython.core.builtin_trap', 'backcall.backcall', 'backcall', 'IPython.core.events', 'IPython.core.displayhook', 'IPython.core.displaypub', 'IPython.core.extensions', 'IPython.utils.sentinel', 'IPython.core.formatters', '_sqlite3', 'sqlite3.dbapi2', 'sqlite3', 'IPython.core.history', 'IPython.core.logger', 'IPython.core.payload', 'IPython.core.usage', 'IPython.lib.display', 'IPython.display', 'IPython.utils.capture', 'IPython.utils.io', 'IPython.core.hooks', 'IPython.utils.strdispatch', 'IPython.utils.syspathcontext', 'IPython.utils.tempdir', 'IPython.utils.contexts', 'IPython.core.async_helpers', 'IPython.core.interactiveshell', 'prompt_toolkit.application.current', 'prompt_toolkit.eventloop.utils', 'prompt_toolkit.eventloop.async_generator', 'wcwidth.table_wide', 'wcwidth.table_zero', 'wcwidth.unicode_versions', 'wcwidth.wcwidth', 'wcwidth', 'prompt_toolkit.utils', 'prompt_toolkit.eventloop.inputhook', 'prompt_toolkit.eventloop', 'prompt_toolkit.application.run_in_terminal', 'prompt_toolkit.selection', 'prompt_toolkit.clipboard.base', 'prompt_toolkit.clipboard.in_memory', 'prompt_toolkit.clipboard', 'prompt_toolkit.cache', 'prompt_toolkit.enums', 'prompt_toolkit.filters.base', 'prompt_toolkit.filters.app', 'prompt_toolkit.filters.cli', 'prompt_toolkit.filters.utils', 'prompt_toolkit.filters', 'prompt_toolkit.document', 'prompt_toolkit.auto_suggest', 'prompt_toolkit.data_structures', 'prompt_toolkit.styles.base', 'prompt_toolkit.styles.named_colors', 'prompt_toolkit.styles.style', 'prompt_toolkit.styles.defaults', 'prompt_toolkit.styles.pygments', 'colorsys', 'prompt_toolkit.styles.style_transformation', 'prompt_toolkit.styles', 'prompt_toolkit.output.color_depth', 'prompt_toolkit.output.base', 'prompt_toolkit.output.defaults', 'prompt_toolkit.output', 'prompt_toolkit.output.vt100', 'prompt_toolkit.mouse_events', 'prompt_toolkit.formatted_text.base', 'prompt_toolkit.formatted_text.ansi', 'xml', 'xml.dom.domreg', 'xml.dom', 'xml.dom.minicompat', 'xml.dom.NodeFilter', 'xml.dom.xmlbuilder', 'xml.dom.minidom', 'prompt_toolkit.formatted_text.html', 'prompt_toolkit.formatted_text.pygments', 'prompt_toolkit.formatted_text.utils', 'prompt_toolkit.formatted_text', 'prompt_toolkit.completion.base', 'prompt_toolkit.completion.deduplicate', 'prompt_toolkit.completion.filesystem', 'prompt_toolkit.completion.word_completer', 'prompt_toolkit.completion.fuzzy_completer', 'prompt_toolkit.completion.nested', 'prompt_toolkit.completion', 'prompt_toolkit.history', 'prompt_toolkit.keys', 'prompt_toolkit.key_binding.key_bindings', 'prompt_toolkit.key_binding.key_processor', 'prompt_toolkit.key_binding', 'prompt_toolkit.key_binding.vi_state', 'prompt_toolkit.search', 'prompt_toolkit.validation', 'prompt_toolkit.buffer', 'prompt_toolkit.input.base', 'prompt_toolkit.input.defaults', 'prompt_toolkit.input', 'prompt_toolkit.input.typeahead', 'prompt_toolkit.key_binding.bindings', 'prompt_toolkit.key_binding.bindings.scroll', 'prompt_toolkit.key_binding.bindings.page_navigation', 'prompt_toolkit.lexers.base', 'prompt_toolkit.lexers.pygments', 'prompt_toolkit.lexers', 'prompt_toolkit.layout.utils', 'prompt_toolkit.layout.processors', 'prompt_toolkit.layout.controls', 'prompt_toolkit.layout.dimension', 'prompt_toolkit.layout.margins', 'prompt_toolkit.layout.mouse_handlers', 'prompt_toolkit.layout.screen', 'prompt_toolkit.layout.containers', 'prompt_toolkit.layout.layout', 'prompt_toolkit.layout.menus', 'prompt_toolkit.layout.scrollable_pane', 'prompt_toolkit.layout', 'prompt_toolkit.key_binding.bindings.completion', 'prompt_toolkit.key_binding.bindings.named_commands', 'prompt_toolkit.key_binding.bindings.basic', 'prompt_toolkit.key_binding.bindings.cpr', 'prompt_toolkit.key_binding.bindings.emacs', 'prompt_toolkit.key_binding.bindings.mouse', 'prompt_toolkit.input.ansi_escape_sequences', 'prompt_toolkit.input.vt100_parser', 'prompt_toolkit.key_binding.digraphs', 'prompt_toolkit.key_binding.bindings.vi', 'prompt_toolkit.key_binding.defaults', 'prompt_toolkit.key_binding.emacs_state', 'prompt_toolkit.layout.dummy', 'prompt_toolkit.renderer', 'prompt_toolkit.application.application', 'prompt_toolkit.application.dummy', 'prompt_toolkit.application', 'prompt_toolkit.key_binding.bindings.focus', 'prompt_toolkit.widgets.toolbars', 'prompt_toolkit.widgets.base', 'prompt_toolkit.widgets.dialogs', 'prompt_toolkit.widgets.menus', 'prompt_toolkit.widgets', 'prompt_toolkit.shortcuts.dialogs', 'prompt_toolkit.shortcuts.progress_bar.formatters', 'prompt_toolkit.shortcuts.progress_bar.base', 'prompt_toolkit.shortcuts.progress_bar', 'prompt_toolkit.key_binding.bindings.auto_suggest', 'prompt_toolkit.key_binding.bindings.open_in_editor', 'prompt_toolkit.shortcuts.prompt', 'prompt_toolkit.shortcuts.utils', 'prompt_toolkit.shortcuts', 'prompt_toolkit', 'prompt_toolkit.patch_stdout', 'pygments.style', 'unicodedata', 'IPython.core.latex_symbols', 'IPython.utils.generics', 'parso.utils', 'parso.tree', 'parso.python', 'parso.python.token', 'parso.python.tokenize', 'parso.pgen2.grammar_parser', 'parso.pgen2.generator', 'parso.pgen2', 'parso.parser', 'parso._compatibility', 'difflib', 'parso.python.prefix', 'parso.python.tree', 'parso.python.parser', 'parso.python.diff', 'gc', 'parso.cache', 'parso.normalizer', 'parso.python.errors', 'parso.python.pep8', 'parso.file_io', 'parso.grammar', 'parso', 'jedi._compatibility', 'jedi.parser_utils', 'jedi.debug', 'jedi.settings', 'jedi.cache', 'jedi.file_io', 'jedi.inference.cache', 'jedi.inference.helpers', 'jedi.inference.utils', 'jedi.inference.base_value', 'jedi.inference.sys_path', 'jedi.inference.recursion', 'jedi.inference.flow_analysis', 'jedi.common', 'jedi.inference.lazy_value', 'jedi.inference.docstrings', 'jedi.plugins', 'jedi.inference.names', 'jedi.inference.filters', 'jedi.inference.compiled.getattr_static', 'jedi.inference.compiled.access', 'jedi.inference.signature', 'jedi.inference.context', 'jedi.inference.compiled.value', 'jedi.inference.compiled', 'jedi.inference.analysis', 'jedi.inference.gradual', 'jedi.inference.value.module', 'jedi.inference.value.dynamic_arrays', 'jedi.inference.value.iterable', 'jedi.inference.arguments', 'jedi.inference.parser_cache', 'jedi.inference.gradual.generics', 'jedi.inference.value.function', 'jedi.inference.value.klass', 'jedi.inference.value.instance', 'jedi.inference.value', 'jedi.inference.gradual.base', 'jedi.inference.gradual.type_var', 'jedi.inference.gradual.typing', 'jedi.inference.gradual.stub_value', 'jedi.inference.gradual.typeshed', 'jedi.inference.compiled.subprocess.functions', 'jedi.api.exceptions', 'jedi.inference.compiled.subprocess', 'jedi.inference.imports', 'jedi.inference.param', 'jedi.inference.gradual.annotation', 'jedi.inference.value.decorator', 'jedi.inference.syntax_tree', 'jedi.inference', 'jedi.inference.gradual.conversion', 'jedi.inference.compiled.mixed', 'pydoc_data', 'pydoc_data.topics', 'jedi.api.keywords', 'jedi.api.completion_cache', 'jedi.api.helpers', 'jedi.api.classes', 'jedi.api.interpreter', 'jedi.api.strings', 'jedi.api.file_name', 'jedi.api.completion', 'filecmp', 'jedi.api.environment', 'jedi.inference.references', 'jedi.api.project', 'jedi.api.errors', 'jedi.api.refactoring', 'jedi.api.refactoring.extract', 'jedi.inference.gradual.utils', 'jedi.api', 'jedi.plugins.stdlib', 'jedi.plugins.flask', 'jedi.plugins.pytest', 'jedi.plugins.django', 'jedi.plugins.registry', 'jedi', 'IPython.core.completer', 'IPython.terminal.ptutils', 'IPython.lib.clipboard', 'IPython.terminal.shortcuts', 'IPython.terminal.debugger', 'IPython.terminal.magics', 'IPython.terminal.pt_inputhooks', 'IPython.terminal.prompts', 'IPython.terminal.interactiveshell', 'IPython.core.magics.auto', 'IPython.core.magics.basic', 'email', 'http', 'email.errors', 'email.quoprimime', 'email.base64mime', 'quopri', 'email.encoders', 'email.charset', 'email.header', 'calendar', 'email._parseaddr', 'email.utils', 'email._policybase', 'email.feedparser', 'email.parser', 'uu', 'email._encoded_words', 'email.iterators', 'email.message', 'http.client', 'urllib.response', 'urllib.error', 'nturl2path', 'urllib.request', 'IPython.core.magics.code', 'IPython.core.magics.config', 'IPython.core.magics.display', 'timeit', '_lsprof', 'profile', 'cProfile', 'dataclasses', 'pstats', 'IPython.utils.module_paths', 'IPython.utils.timing', 'IPython.core.magics.execution', 'IPython.core.magics.extension', 'IPython.core.magics.history', 'IPython.core.magics.logging', 'IPython.core.magics.namespace', 'IPython.core.magics.osm', 'IPython.core.magics.packaging', 'IPython.core.pylabtools', 'IPython.core.magics.pylab', 'IPython.lib.backgroundjobs', 'IPython.core.magics.script', 'IPython.core.magics', 'IPython.core.shellapp', 'IPython.extensions', 'IPython.extensions.storemagic', 'IPython.terminal.ipapp', 'IPython.terminal.embed', 'IPython.utils.frame', 'IPython', 'ipython_genutils._version', 'ipython_genutils', 'ipython_genutils.encoding', 'ipython_genutils.py3compat', 'ipython_genutils.path', 'imp', 'hmac', 'dateutil._version', 'dateutil', 'six', '_decimal', 'decimal', 'dateutil._common', 'dateutil.relativedelta', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.tz.win', 'dateutil.tz.tz', 'dateutil.tz', 'dateutil.parser._parser', 'dateutil.parser.isoparser', 'dateutil.parser', '_strptime', 'jupyter_client.jsonutil', 'jupyter_client.adapter', 'jupyter_client.session', 'ipykernel.iostream', 'ipykernel.control', 'ipykernel.heartbeat', 'IPython.utils.tokenutil', 'tornado.locks', 'tornado.queues', 'ipykernel.jsonutil', 'ipykernel.kernelbase', 'ipykernel.comm.comm', 'ipykernel.comm.manager', 'ipykernel.comm', 'IPython.core.payloadpage', 'ipykernel.displayhook', 'ipykernel.zmqshell', 'setuptools._distutils', 'distutils.debug', 'distutils.errors', 'distutils.fancy_getopt', 'distutils.dep_util', 'distutils._log', 'distutils.spawn', 'distutils.util', 'distutils.dist', 'distutils.dir_util', 'distutils.file_util', 'zipfile', 'distutils.archive_util', 'distutils.cmd', 'configparser', 'distutils.config', 'distutils.extension', 'distutils.core', '_distutils_hack.override', 'setuptools._deprecation_warning', 'xml.parsers', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'xml.parsers.expat', 'plistlib', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources._vendor.jaraco', 'pkg_resources.extern.jaraco', 'importlib._common', 'importlib.resources', 'pkg_resources._vendor.more_itertools.recipes', 'pkg_resources._vendor.more_itertools.more', 'pkg_resources._vendor.more_itertools', 'pkg_resources.extern.more_itertools', 'pkg_resources.extern.jaraco.functools', 'pkg_resources.extern.jaraco.context', 'pkg_resources.extern.jaraco.text', 'pkg_resources._vendor.platformdirs.api', 'pkg_resources._vendor.platformdirs.version', 'pkg_resources._vendor.platformdirs.windows', 'pkg_resources._vendor.platformdirs', 'pkg_resources.extern.platformdirs', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources._vendor.packaging', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging.version', 'pkg_resources._vendor.packaging._manylinux', 'pkg_resources._vendor.packaging._musllinux', 'pkg_resources.extern.packaging.tags', 'pkg_resources.extern.packaging.utils', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources._vendor.pyparsing.util', 'pkg_resources._vendor.pyparsing.unicode', 'pkg_resources._vendor.pyparsing.exceptions', 'pkg_resources._vendor.pyparsing.actions', 'pkg_resources._vendor.pyparsing.results', 'pkg_resources._vendor.pyparsing.core', 'pkg_resources._vendor.pyparsing.helpers', 'pkg_resources._vendor.pyparsing.testing', 'pkg_resources._vendor.pyparsing.common', 'pkg_resources._vendor.pyparsing', 'pkg_resources.extern.pyparsing', 'pkg_resources.extern.packaging.markers', 'pkg_resources.extern.packaging.requirements', 'encodings.cp437', 'pkg_resources', 'setuptools.version', 'distutils.filelist', 'setuptools.monkey', 'setuptools.extension', 'distutils.log', 'distutils.command', 'setuptools.extern', 'setuptools._vendor', 'setuptools._vendor.packaging.__about__', 'setuptools._vendor.packaging', 'setuptools.extern.packaging', 'setuptools._vendor.ordered_set', 'setuptools.extern.ordered_set', 'setuptools._vendor.more_itertools.recipes', 'setuptools._vendor.more_itertools.more', 'setuptools._vendor.more_itertools', 'setuptools.extern.more_itertools', '_csv', 'csv', 'setuptools._vendor.zipp', 'setuptools._vendor.importlib_metadata._functools', 'setuptools._vendor.importlib_metadata._text', 'setuptools._vendor.importlib_metadata._adapters', 'setuptools._vendor.importlib_metadata._compat', 'setuptools._vendor.importlib_metadata._meta', 'setuptools._vendor.importlib_metadata._collections', 'setuptools._vendor.importlib_metadata._itertools', 'setuptools._vendor.importlib_metadata', 'setuptools.extern.importlib_metadata', 'zipp', 'importlib_metadata._functools', 'importlib_metadata._text', 'importlib_metadata._adapters', 'importlib_metadata._compat', 'importlib_metadata._meta', 'importlib_metadata._collections', 'importlib_metadata._itertools', 'importlib_metadata', 'setuptools._importlib', 'distutils.command.bdist', 'setuptools.command', 'setuptools.windows_support', 'setuptools._vendor.pyparsing.util', 'setuptools._vendor.pyparsing.unicode', 'setuptools._vendor.pyparsing.exceptions', 'setuptools._vendor.pyparsing.actions', 'setuptools._vendor.pyparsing.results', 'setuptools._vendor.pyparsing.core', 'setuptools._vendor.pyparsing.helpers', 'setuptools._vendor.pyparsing.testing', 'setuptools._vendor.pyparsing.common', 'setuptools._vendor.pyparsing', 'setuptools.extern.pyparsing', 'setuptools._vendor.packaging._manylinux', 'setuptools._vendor.packaging._musllinux', 'setuptools.extern.packaging.tags', 'setuptools.extern.packaging._structures', 'setuptools.extern.packaging.version', 'setuptools.extern.packaging.utils', 'setuptools.extern.packaging.specifiers', 'setuptools.extern.packaging.markers', 'setuptools.extern.packaging.requirements', 'setuptools._path', 'setuptools.config.expand', 'setuptools.config.setupcfg', 'setuptools.config', 'setuptools.errors', 'email._header_value_parser', 'email.headerregistry', 'setuptools.config._apply_pyprojecttoml', 'setuptools.config.pyprojecttoml', 'setuptools.discovery', 'setuptools._vendor.jaraco', 'setuptools.extern.jaraco', 'setuptools.extern.jaraco.functools', 'setuptools.extern.jaraco.context', 'setuptools.extern.jaraco.text', 'setuptools._reqs', 'setuptools._itertools', 'setuptools._entry_points', 'setuptools.dist', 'setuptools.py34compat', 'setuptools._imp', 'setuptools.depends', 'setuptools.logging', 'setuptools.msvc', 'unittest.util', 'unittest.result', 'unittest.case', 'unittest.suite', 'unittest.loader', 'unittest.signals', 'unittest.runner', 'unittest.main', 'unittest', 'unittest.mock', 'distutils.ccompiler', 'distutils._msvccompiler', 'setuptools', 'distutils', 'distutils.version', 'ipykernel.eventloops', 'ipykernel.compiler', 'debugpy._version', 'debugpy.common', 'debugpy.common.json', 'debugpy.common.fmt', 'debugpy.common.compat', 'debugpy', 'debugpy._vendored._util', 'debugpy._vendored', '_pydevd_bundle', 'encodings.ascii', 'stringprep', 'encodings.idna', '_pydevd_bundle.pydevd_vm_type', '_pydev_imps', 'xmlrpc', 'gzip', 'xmlrpc.client', 'socketserver', 'http.server', 'xmlrpc.server', '_pydev_imps._pydev_saved_modules', '_pydevd_bundle.pydevd_constants', '_pydev_bundle', '_pydev_runfiles', '_pydevd_frame_eval', 'pydev_ipython', 'pydevd_concurrency_analyser', 'pydevd_plugins', '_pydev_bundle.pydev_log', '_pydev_bundle._pydev_filesystem_encoding', '_pydevd_bundle.pydevd_comm_constants', 'pydevd_file_utils', '_pydev_imps._pydev_execfile', '_pydevd_bundle.pydevd_exec2', '_pydev_bundle.pydev_imports', '_pydev_bundle.pydev_is_thread_alive', '_pydev_bundle.pydev_override', 'pydevd_plugins.extensions', '_pydevd_bundle.pydevd_extension_utils', '_pydevd_bundle.pydevd_frame_utils', '_pydevd_bundle.pydevd_filtering', '_pydevd_bundle.pydevd_io', '_pydevd_bundle.pydevd_utils', '_pydev_bundle._pydev_tipper_common', '_pydev_bundle._pydev_imports_tipper', '_pydev_bundle._pydev_calltip_util', '_pydevd_bundle.pydevd_safe_repr', '_pydevd_bundle.pydevd_resolver', '_pydevd_bundle.pydevd_extension_api', '_pydevd_bundle.pydevd_xml', '_pydevd_bundle.pydevd_dont_trace', '_pydevd_frame_eval.vendored', '_pydevd_frame_eval.vendored.bytecode.flags', '_pydevd_frame_eval.vendored.bytecode.instr', '_pydevd_frame_eval.vendored.bytecode.bytecode', '_pydevd_frame_eval.vendored.bytecode.concrete', '_pydevd_frame_eval.vendored.bytecode.cfg', '_pydevd_frame_eval.vendored.bytecode', '_pydevd_bundle.pydevd_bytecode_utils', '_pydevd_bundle.pydevd_cython', '_pydevd_bundle.pydevd_cython_wrapper', '_pydevd_bundle.pydevd_additional_thread_info', '_pydevd_bundle.pydevd_thread_lifecycle', '_pydevd_bundle.pydevd_save_locals', '_pydevd_bundle.pydevd_defaults', '_pydev_bundle.pydev_monkey', 'pydevd_tracing', '_pydevd_bundle.pydevd_daemon_thread', '_pydevd_bundle.pydevd_timeout', '_pydevd_bundle.pydevd_vars', '_pydev_bundle.pydev_console_utils', '_pydevd_bundle.pydevd_import_class', '_pydevd_bundle.pydevd_breakpoints', '_pydevd_bundle.pydevd_custom_frames', '_pydevd_bundle.pydevd_dont_trace_files', '_pydevd_bundle.pydevd_net_command', '_pydev_bundle.pydev_umd', 'pydevconsole', '_pydev_bundle._pydev_completer', '_pydevd_bundle.pydevd_net_command_factory_xml', '_pydevd_bundle.pydevd_frame', '_pydevd_bundle.pydevd_additional_thread_info_regular', '_pydevd_bundle.pydevd_trace_dispatch', '_pydevd_frame_eval.pydevd_frame_eval_main', '_pydevd_bundle.pydevd_source_mapping', 'pydevd_concurrency_analyser.pydevd_thread_wrappers', 'pydevd_concurrency_analyser.pydevd_concurrency_logger', '_pydevd_bundle._debug_adapter', '_pydevd_bundle._debug_adapter.pydevd_schema_log', '_pydevd_bundle._debug_adapter.pydevd_base_schema', '_pydevd_bundle._debug_adapter.pydevd_schema', '_pydevd_bundle.pydevd_reload', '_pydev_bundle.fsnotify', '_pydevd_bundle.pydevd_console', '_pydevd_bundle.pydevd_comm', '_pydevd_bundle.pydevd_net_command_factory_json', '_pydevd_bundle.pydevd_collect_bytecode_info', '_pydevd_bundle.pydevd_api', '_pydevd_bundle.pydevd_json_debug_options', '_pydevd_bundle.pydevd_process_net_command_json', '_pydevd_bundle.pydevd_traceproperty', '_pydevd_bundle.pydevd_process_net_command', '_pydevd_bundle.pydevd_suspended_frames', '_pydevd_bundle.pydevd_trace_api', 'pydevd_plugins.django_debug', 'pydevd_plugins.jinja2_debug', '_pydevd_bundle.pydevd_plugin_utils', 'pydevd_plugins.extensions.types', 'pydevd_plugins.extensions.types.pydevd_helpers', 'pydevd_plugins.extensions.types.pydevd_plugin_numpy_types', 'pydevd_plugins.extensions.types.pydevd_plugins_django_form_str', 'pydevd', 'debugpy._vendored.force_pydevd', 'debugpy.server', 'debugpy.adapter', 'debugpy.common.timestamp', 'debugpy.common.util', 'debugpy.common.log', 'debugpy.common.sockets', 'debugpy.server.api', 'ipykernel.debugger', 'ipykernel.ipkernel', 'ipykernel.parentpoller', 'ipykernel.kernelapp', 'win32api', 'win32security', 'ntsecuritycon', 'faulthandler', 'IPython.core.completerlib', 'storemagic', 'pyforest._importable', 'pyforest.user_specific_imports', 'pyforest._imports', 'pyforest.utils', 'pyforest', 'logging.config', 'pythonjsonlogger', 'pythonjsonlogger.jsonlogger', 'daiquiri.types', 'daiquiri.formatter', 'daiquiri.handlers', 'daiquiri.output', 'daiquiri', 'jupyter_require.__about__', 'csscompressor', 'jupyter_require.core', 'jupyter_require.notebook', 'jupyter_require', 'jupyter_nbutils.__about__', 'jupyter_nbutils.config', 'jupyter_nbutils.utils', 'jupyter_nbutils', 'jupyter_require.magic', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'mkl._mklinit', 'mkl._py_mkl_service', 'mkl', 'numpy._distributor_init', 'numpy.core._multiarray_umath', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.compat', 'numpy.core.overrides', 'numpy.core.multiarray', 'numpy.core.umath', 'numpy.core._string_helpers', 'numpy.core._dtype', 'numpy.core._type_aliases', 'numpy.core.numerictypes', 'numpy.core._asarray', 'numpy.core._exceptions', 'numpy.core._methods', 'numpy.core.fromnumeric', 'numpy.core.shape_base', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core.numeric', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._multiarray_tests', 'numpy.core._add_newdocs', 'numpy.core._add_newdocs_scalars', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'numpy._pytesttester', 'numpy.core', 'numpy.lib.mixins', 'numpy.lib.ufunclike', 'numpy.lib.type_check', 'numpy.lib.scimath', 'numpy.lib.twodim_base', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.linalg.linalg', 'numpy.linalg', 'numpy.matrixlib.defmatrix', 'numpy.matrixlib', 'numpy.lib.histograms', 'numpy.lib.function_base', 'numpy.lib.stride_tricks', 'numpy.lib.index_tricks', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.npyio', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.lib', 'numpy.fft._pocketfft_internal', 'numpy.fft._pocketfft', 'numpy.fft.helper', 'numpy.fft', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.polynomial', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.polynomial', 'numpy.random._common', 'secrets', 'numpy.random.bit_generator', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random.mtrand', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.random._pickle', 'numpy.random', 'numpy.ctypeslib', 'numpy.ma.core', 'numpy.ma.extras', 'numpy.ma', 'numpy', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'pytz', 'mmap', 'pandas._typing', 'pandas._libs.tslibs.dtypes', 'pandas._libs.tslibs.base', 'pandas._libs.tslibs.np_datetime', 'pandas._libs.tslibs.nattype', 'pandas._libs.tslibs.timezones', 'pandas._libs.tslibs.ccalendar', 'pandas._libs.tslibs.tzconversion', 'pandas._config.config', 'pandas._config.dates', 'pandas._config.display', 'pandas._config', 'pandas._config.localization', 'pandas._libs.tslibs.strptime', 'pandas._libs.tslibs.fields', 'pandas._libs.tslibs.timedeltas', 'pandas._libs.tslibs.timestamps', 'dateutil.easter', 'pandas._libs.properties', 'pandas._libs.tslibs.offsets', 'pandas._libs.tslibs.parsing', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs.vectorized', 'pandas._libs.tslibs', 'pandas._libs.ops_dispatch', 'pandas._libs.missing', 'pandas._libs.hashtable', 'pandas._libs.algos', 'pandas._libs.interval', 'pandas._libs', 'pandas.util._decorators', 'pandas.core', 'pandas.core.util', 'pandas._libs.tslib', 'pandas._libs.lib', 'pandas._libs.hashing', 'pandas.core.dtypes', 'pandas.errors', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.base', 'pandas.core.dtypes.inference', 'pandas.core.dtypes.dtypes', 'pandas.core.dtypes.common', 'pandas.core.util.hashing', 'pandas.util', 'pandas.util.version', 'pandas.compat.numpy', 'pyarrow._generated_version', '_cython_0_29_28', 'cloudpickle.compat', 'typing_extensions', 'cloudpickle.cloudpickle', 'cloudpickle.cloudpickle_fast', 'cloudpickle', 'pyarrow.util', 'pyarrow.lib', 'pyarrow._hdfsio', 'pyarrow.filesystem', 'pyarrow.hdfs', 'pyarrow.ipc', 'pyarrow.serialization', 'pyarrow.types', 'pyarrow', 'pandas.compat.pyarrow', 'pandas.compat', 'pandas.core.config_init', 'pandas.core.dtypes.missing', 'pandas.util._exceptions', 'pandas.util._validators', 'pandas.core.dtypes.cast', 'pandas.core.array_algos', 'pandas.core.common', 'pandas.core.construction', 'pandas.core.array_algos.take', 'pandas.core.indexers', 'pandas.core.algorithms', 'pandas.compat.numpy.function', 'pandas.compat._optional', 'pandas.core.missing', 'pandas.core.roperator', 'pandas._libs.ops', 'pandas.core.computation', 'numexpr.__config__', 'numexpr.interpreter', 'numexpr.expressions', 'numexpr.utils', 'numexpr.necompiler', 'numexpr.version', 'numexpr', 'pandas.core.computation.check', 'pandas.core.computation.expressions', 'pandas.core.ops.missing', 'pandas.core.ops.dispatch', 'pandas.core.ops.invalid', 'pandas.core.ops.array_ops', 'pandas.core.ops.common', 'pandas.core.ops.docstrings', 'pandas.core.ops.mask_ops', 'pandas.core.ops.methods', 'pandas.core.ops', 'pandas.core.sorting', 'pandas.core.arrays.base', 'bottleneck.reduce', 'bottleneck.nonreduce', 'bottleneck.nonreduce_axis', 'bottleneck.move', 'bottleneck.slow.reduce', 'bottleneck.slow.nonreduce', 'bottleneck.slow.nonreduce_axis', 'bottleneck.slow.move', 'bottleneck.slow', 'bottleneck.benchmark', 'bottleneck.benchmark.autotimeit', 'bottleneck.benchmark.bench', 'bottleneck.benchmark.bench_detailed', 'bottleneck.tests', 'bottleneck.tests.util', 'bottleneck._pytesttester', 'bottleneck._version', 'bottleneck', 'pandas.core.nanops', 'pandas.core.array_algos.masked_reductions', 'pandas.core.arraylike', 'pandas.core.arrays.masked', 'pandas.core.arrays.boolean', 'pandas._libs.arrays', 'pandas.core.accessor', 'pandas.core.array_algos.transforms', 'pandas.core.arrays._mixins', 'pandas.core.base', 'pandas.core.strings.accessor', 'pandas.core.strings.base', 'pandas.core.strings', 'pandas.core.strings.object_array', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.console', 'pandas.core.arrays.categorical', 'pandas.tseries', 'pandas.tseries.frequencies', 'pandas.core.arrays.datetimelike', 'pandas.core.arrays._ranges', 'pandas.core.arrays.numeric', 'pandas.core.tools', 'pandas.core.tools.numeric', 'pandas.core.arrays.integer', 'pandas.tseries.offsets', 'pandas.core.arrays.datetimes', 'pandas.core.arrays.floating', 'pandas.core.indexes', 'pandas._libs.index', 'pandas._libs.join', 'pandas._libs.sparse', 'pandas.core.arrays.sparse.dtype', 'pandas.io.formats.printing', 'pandas.core.arrays.sparse.array', 'pandas.core.arrays.sparse.accessor', 'pandas.core.arrays.sparse', 'pandas.core.dtypes.concat', 'pandas.core.array_algos.putmask', 'pandas.core.indexes.frozen', 'pandas.core.indexes.base', 'pandas.core.arrays.interval', 'pandas.core.arrays.numpy_', 'pandas.core.arrays.period', 'pandas.core.arrays.string_', 'pyarrow._compute', 'pyarrow._compute_docstrings', 'pyarrow.vendored', 'pyarrow.vendored.docscrape', 'pyarrow.compute', 'pandas.core.arrays.string_arrow', 'pandas.core.arrays.timedeltas', 'pandas.core.arrays', 'pandas.core.flags', 'pandas._libs.reduction', 'pandas.core.indexes.extension', 'pandas.core.indexes.category', 'pandas.core.indexes.numeric', 'pandas.core.tools.timedeltas', 'pandas.core.indexes.datetimelike', 'pandas.core.tools.times', 'pandas.core.indexes.datetimes', 'pandas.core.indexes.multi', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.interval', 'pandas.core.indexes.period', 'pandas.core.indexes.range', 'pandas.core.indexes.api', 'pandas.core.aggregation', 'pandas.core.apply', 'pandas._libs.indexing', 'pandas.core.indexing', 'pandas.core.reshape', 'pandas._libs.internals', 'pandas._libs.writers', 'pandas.core.array_algos.quantile', 'pandas.core.array_algos.replace', 'pandas.core.internals.blocks', 'pandas.core.internals.api', 'pandas.core.internals.base', 'pandas.core.internals.array_manager', 'pandas.core.internals.ops', 'pandas.core.internals.managers', 'pandas.core.internals.concat', 'pandas.core.internals', 'pandas.core.reshape.concat', 'pandas.io.common', 'pandas.io.formats.format', 'pandas.core.describe', 'pandas.core.internals.construction', 'pandas.core.shared_docs', 'pandas._libs.window', 'pandas._libs.window.aggregations', 'pandas.core.util.numba_', 'pandas.core.window.common', 'pandas.core.window.doc', 'pandas._libs.window.indexers', 'pandas.core.window.indexers', 'pandas.core.window.numba_', 'pandas.core.window.online', 'pandas.core.window.rolling', 'pandas.core.window.ewm', 'pandas.core.window.expanding', 'pandas.core.window', 'pandas.core.generic', 'pandas.core.reshape.util', 'pandas.core.reshape.melt', 'pandas._libs.reshape', 'pandas.core.indexes.accessors', 'pandas.arrays', 'pandas.core.tools.datetimes', 'pandas.plotting._core', 'pandas.plotting._misc', 'pandas.plotting', 'pandas.core.series', 'pandas.io.formats.info', 'pandas.core.frame', 'pandas.core.groupby.base', 'pandas._libs.groupby', 'pandas.core.groupby.numba_', 'pandas.core.groupby.categorical', 'pandas.core.groupby.grouper', 'pandas.core.groupby.ops', 'pandas.core.groupby.groupby', 'pandas.core.groupby.generic', 'pandas.core.groupby', 'pandas.core.api', 'pandas.tseries.api', 'pandas.core.computation.common', 'pandas.core.computation.align', 'pandas.compat.chainmap', 'pandas.core.computation.scope', 'pandas.core.computation.ops', 'pandas.core.computation.parsing', 'pandas.core.computation.expr', 'pandas.core.computation.engines', 'pandas.core.computation.eval', 'pandas.core.computation.api', 'pandas.core.reshape.merge', 'pandas.core.reshape.pivot', 'pandas.core.reshape.reshape', 'pandas.core.reshape.tile', 'pandas.core.reshape.api', 'pandas.api.extensions', 'pandas.api.indexers', 'pandas.core.dtypes.api', 'pandas.api.types', 'pandas.api', 'pandas.util._print_versions', 'pandas.io.clipboards', 'pandas._libs.parsers', 'pandas.io.excel._util', 'pandas.io.date_converters', 'pandas.io.parsers.base_parser', 'pandas.io.parsers.c_parser_wrapper', 'pandas.io.parsers.python_parser', 'pandas.io.parsers.readers', 'pandas.io.parsers', 'pandas.io.excel._odfreader', 'pandas.io.excel._openpyxl', 'pandas.io.excel._pyxlsb', 'pandas.io.excel._xlrd', 'pandas.io.excel._base', 'pandas._libs.json', 'pandas.io.formats._color_data', 'pandas.io.formats.css', 'pandas.io.formats.excel', 'pandas.io.excel._odswriter', 'pandas.io.excel._xlsxwriter', 'pandas.io.excel._xlwt', 'pandas.io.excel', 'pandas.io.feather_format', 'pandas.io.gbq', 'pandas.io.html', 'pandas.io.json._normalize', 'pandas.io.json._table_schema', 'pandas.io.json._json', 'pandas.io.json', 'pandas.io.orc', 'pandas.io.parquet', 'pandas.compat.pickle_compat', 'pandas.io.pickle', 'pandas.core.computation.pytables', 'pandas.io.pytables', 'pandas.io.sas.sasreader', 'pandas.io.sas', 'pandas.io.spss', 'pandas.io.sql', 'pandas.io.stata', 'pandas.io.xml', 'pandas.io.api', 'pandas.util._tester', 'pandas._testing._random', 'pandas._testing.contexts', 'pandas._testing._io', 'pandas._testing._warnings', 'cmath', 'pandas._libs.testing', 'pandas._testing.asserters', 'pandas._testing.compat', 'pandas._testing', 'pandas.testing', 'pandas._version', 'pandas', 'seaborn', 'seaborn.rcmod', 'matplotlib', 'matplotlib._api.deprecation', 'matplotlib._api', 'matplotlib._c_internal_utils', 'matplotlib.cbook', 'matplotlib.docstring', 'PIL._version', 'PIL', 'defusedxml.common', 'defusedxml', 'xml.etree', 'xml.etree.ElementPath', '_elementtree', 'xml.etree.ElementTree', 'defusedxml.ElementTree', 'PIL.ImageMode', 'PIL.TiffTags', 'PIL._binary', 'PIL._util', 'PIL._imaging', 'cffi.lock', 'cffi.error', 'cffi.model', 'cffi.api', 'cffi', 'PIL.Image', 'matplotlib._animation_data', 'matplotlib.animation', 'PIL.ImageChops', 'PIL.ImageFile', 'PIL.GimpGradientFile', 'PIL.GimpPaletteFile', 'PIL.ImageColor', 'PIL.PaletteFile', 'PIL.ImagePalette', 'PIL.ImageSequence', 'PIL.PngImagePlugin', 'matplotlib._path', 'matplotlib.bezier', 'matplotlib.path', 'matplotlib.transforms', 'matplotlib.ticker', 'matplotlib.scale', 'matplotlib._color_data', 'matplotlib.colors', 'pyparsing.util', 'pyparsing.unicode', 'pyparsing.exceptions', 'pyparsing.actions', 'pyparsing.results', 'pyparsing.core', 'pyparsing.helpers', 'pyparsing.testing', 'pyparsing.common', 'pyparsing', 'matplotlib.fontconfig_pattern', 'matplotlib._enums', 'cycler', 'matplotlib.rcsetup', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver', 'dateutil.rrule', 'matplotlib.units', 'matplotlib.dates']
2023-02-21 19:40:14,058 [25368] DEBUG    matplotlib:224: [JupyterRequire] CACHEDIR=C:\Users\sunny\.matplotlib
2023-02-21 19:40:14,064 [25368] DEBUG    matplotlib.font_manager:1439: [JupyterRequire] Using fontManager instance from C:\Users\sunny\.matplotlib\fontlist-v330.json
2023-02-21 19:40:14,274 [25368] DEBUG    matplotlib.pyplot:290: [JupyterRequire] Loaded backend module://matplotlib_inline.backend_inline version unknown.
2023-02-21 19:40:14,274 [25368] DEBUG    matplotlib.pyplot:290: [JupyterRequire] Loaded backend module://matplotlib_inline.backend_inline version unknown.
2023-02-21 19:40:14,482 [25368] DEBUG    matplotlib.pyplot:290: [JupyterRequire] Loaded backend module://matplotlib_inline.backend_inline version unknown.
2023-02-21 19:40:14,534 [25368] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-02-21 19:40:14,534 [25368] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-02-21 19:40:14,534 [25368] INFO     root:247: [JupyterRequire] Initializing comms.
2023-02-21 19:40:14,536 [25368] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-02-21 19:40:14,537 [25368] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-02-21 19:40:14,537 [25368] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-02-21 19:41:35,520 [23376] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-02-21 19:41:35,522 [23376] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-02-21 19:41:35,522 [23376] INFO     root:247: [JupyterRequire] Initializing comms.
2023-02-21 19:41:35,525 [23376] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-02-21 19:41:35,526 [23376] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-02-21 19:41:35,526 [23376] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-02-21 19:41:36,326 [23376] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-02-21 19:41:36,326 [23376] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-02-21 19:41:36,326 [23376] INFO     root:247: [JupyterRequire] Initializing comms.
2023-02-21 19:41:36,328 [23376] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-02-21 19:41:36,329 [23376] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-02-21 19:41:36,329 [23376] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-02-21 19:42:28,986 [23376] INFO     numexpr.utils:145: [JupyterRequire] Note: NumExpr detected 12 cores but "NUMEXPR_MAX_THREADS" not set, so enforcing safe limit of 8.
2023-02-21 19:42:28,987 [23376] INFO     numexpr.utils:157: [JupyterRequire] NumExpr defaulting to 8 threads.
2023-02-21 19:42:29,403 [23376] DEBUG    matplotlib:224: [JupyterRequire] matplotlib data path: C:\Users\sunny\anaconda3\lib\site-packages\matplotlib\mpl-data
2023-02-21 19:42:29,410 [23376] DEBUG    matplotlib:224: [JupyterRequire] CONFIGDIR=C:\Users\sunny\.matplotlib
2023-02-21 19:42:29,413 [23376] DEBUG    matplotlib:1394: [JupyterRequire] matplotlib version 3.4.3
2023-02-21 19:42:29,413 [23376] DEBUG    matplotlib:1395: [JupyterRequire] interactive is False
2023-02-21 19:42:29,413 [23376] DEBUG    matplotlib:1396: [JupyterRequire] platform is win32
2023-02-21 19:42:29,414 [23376] DEBUG    matplotlib:1397: [JupyterRequire] loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_thread', '_warnings', '_weakref', '_io', 'marshal', 'nt', 'winreg', '_frozen_importlib_external', 'time', 'zipimport', '_codecs', 'codecs', 'encodings.aliases', 'encodings', 'encodings.utf_8', 'encodings.cp1252', '_signal', 'encodings.latin_1', '_abc', 'abc', 'io', '__main__', '_stat', 'stat', '_collections_abc', 'genericpath', 'ntpath', 'os.path', 'os', '_sitebuiltins', '_locale', '_bootlocale', '_distutils_hack', 'types', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib', 'importlib.machinery', '_heapq', 'heapq', 'itertools', 'keyword', '_operator', 'operator', 'reprlib', '_collections', 'collections', 'collections.abc', '_functools', 'functools', 'contextlib', 'enum', '_sre', 'sre_constants', 'sre_parse', 'sre_compile', 'copyreg', 're', 'typing.io', 'typing.re', 'typing', 'importlib.abc', 'importlib.util', 'google', 'google.cloud', 'google.logging', 'mpl_toolkits', 'sphinxcontrib', 'zope', 'site', '_weakrefset', 'weakref', 'pkgutil', 'runpy', 'ipykernel._version', '_json', 'json.scanner', 'json.decoder', 'json.encoder', 'json', 'errno', 'signal', 'threading', 'msvcrt', '_winapi', 'subprocess', 'jupyter_client._version', 'posixpath', 'fnmatch', 'glob', '_socket', 'math', 'select', 'selectors', 'socket', 'zlib', '_compression', '_bz2', 'bz2', '_lzma', 'lzma', 'shutil', '_bisect', 'bisect', '_random', '_sha512', 'random', 'tempfile', 'getpass', 'platform', 'zmq.libzmq', 'zmq.backend.select', 'cython_runtime', 'zmq.backend.cython.constants', '_cython_0_29_24', 'zmq.backend.cython.error', 'zmq.error', 'zmq.backend.cython.message', 'zmq.backend.cython.context', 'copy', '_struct', 'struct', '_compat_pickle', '_pickle', 'pickle', 'zmq.backend.cython.socket', 'zmq.backend.cython.utils', 'zmq.backend.cython._poll', 'zmq.backend.cython._version', 'zmq.backend.cython._device', 'zmq.backend.cython._proxy_steerable', 'zmq.backend.cython', 'zmq.backend', 'zmq.utils', 'zmq.utils.constant_names', 'zmq.sugar.constants', 'atexit', 'zmq.sugar.attrsettr', 'zmq.sugar.poll', 'zmq.utils.jsonapi', 'zmq.utils.strtypes', 'zmq.sugar.socket', 'zmq.sugar.context', 'zmq.sugar.frame', 'zmq.sugar.tracker', 'zmq.sugar.version', 'zmq.sugar.stopwatch', 'zmq.sugar', 'zmq', '_ast', 'ast', '_opcode', 'opcode', 'dis', 'token', 'tokenize', 'linecache', 'inspect', 'traitlets.utils', 'traitlets.utils.getargspec', 'traitlets.utils.importstring', 'traitlets.utils.sentinel', 'traitlets.utils.bunch', 'traitlets.utils.descriptions', 'traitlets.traitlets', 'traitlets.utils.decorators', 'traitlets._version', 'traitlets', 'traceback', '_string', 'string', 'logging', 'pprint', 'gettext', 'argparse', 'traitlets.config.loader', 'textwrap', 'traitlets.utils.text', 'traitlets.config.configurable', 'traitlets.config.application', 'traitlets.config', 'jupyter_client.localinterfaces', 'jupyter_core.version', 'jupyter_core', 'urllib', 'urllib.parse', 'pathlib', 'jupyter_core.paths', 'jupyter_client.utils', 'jupyter_client.connect', 'traitlets.log', 'jupyter_client.launcher', 'concurrent', 'concurrent.futures._base', 'concurrent.futures', '_ssl', 'binascii', 'base64', 'ssl', 'asyncio.constants', 'asyncio.format_helpers', 'asyncio.base_futures', 'asyncio.log', 'asyncio.coroutines', '_contextvars', 'contextvars', 'asyncio.exceptions', 'asyncio.base_tasks', '_asyncio', 'asyncio.events', 'asyncio.futures', 'asyncio.protocols', 'asyncio.transports', 'asyncio.sslproto', 'asyncio.locks', 'asyncio.tasks', 'asyncio.staggered', 'asyncio.trsock', 'asyncio.base_events', 'asyncio.runners', 'asyncio.queues', 'asyncio.streams', 'asyncio.subprocess', 'asyncio.threads', '_overlapped', 'asyncio.base_subprocess', 'asyncio.proactor_events', 'asyncio.selector_events', 'asyncio.windows_utils', 'asyncio.windows_events', 'asyncio', 'jupyter_client.channelsabc', 'jupyter_client.channels', 'jupyter_client.clientabc', 'jupyter_client.client', 'jupyter_client.kernelspec', 'jupyter_client.managerabc', 'jupyter_client.manager', '_queue', 'queue', 'jupyter_client.blocking.channels', 'jupyter_client.blocking.client', 'jupyter_client.blocking', 'zmq._future', 'zmq.asyncio', 'jupyter_client.asynchronous.channels', 'jupyter_client.asynchronous.client', 'jupyter_client.asynchronous', '_uuid', 'uuid', 'jupyter_client.multikernelmanager', 'jupyter_client', 'ipykernel.connect', 'ipykernel', 'tornado', '_datetime', 'datetime', 'numbers', 'logging.handlers', 'html.entities', 'html', 'array', 'tornado.speedups', 'tornado.util', 'tornado.escape', 'colorama.ansi', '_ctypes', 'ctypes._endian', 'ctypes', 'ctypes.wintypes', 'colorama.win32', 'colorama.winterm', 'colorama.ansitowin32', 'colorama.initialise', 'colorama', 'tornado.log', 'tornado.concurrent', 'tornado.ioloop', '__future__', 'tornado.platform', 'tornado.gen', 'tornado.platform.asyncio', 'zmq.eventloop.ioloop', 'zmq.eventloop', 'zmq.eventloop.zmqstream', 'IPython.core', 'IPython.core.getipython', 'IPython.core.release', 'sysconfig', 'pydoc', 'bdb', 'IPython.utils', 'IPython.utils.ipstruct', 'IPython.utils.coloransi', 'pygments', 'IPython.utils.colorable', 'IPython.utils.PyColorize', 'locale', 'IPython.utils.encoding', 'IPython.utils.py3compat', 'IPython.core.excolors', 'IPython.testing', 'IPython.testing.skipdoctest', 'cmd', 'codeop', 'code', 'pdb', 'IPython.core.debugger', 'IPython.core.display_trap', 'shlex', 'IPython.utils._process_common', 'IPython.utils._process_win32', 'IPython.utils.process', 'IPython.utils.decorators', 'IPython.utils.path', 'IPython.utils.data', 'IPython.utils.terminal', 'IPython.core.ultratb', 'IPython.utils._sysinfo', 'IPython.utils.sysinfo', 'IPython.core.crashhandler', 'IPython.utils.importstring', 'IPython.paths', 'IPython.core.profiledir', 'IPython.core.application', 'IPython.terminal', '_hashlib', '_blake2', 'hashlib', 'IPython.core.compilerop', 'IPython.core.error', 'IPython.utils.text', 'IPython.core.magic_arguments', 'getopt', 'mimetypes', 'IPython.core.display', 'IPython.core.page', 'IPython.lib.security', 'IPython.lib', 'IPython.lib.pretty', 'IPython.utils.openpy', 'IPython.utils.dir2', 'IPython.utils.wildcard', 'pygments.lexers._mapping', 'pygments.modeline', 'pygments.plugin', 'pygments.util', 'pygments.lexers', 'pygments.filter', 'pygments.token', 'pygments.filters', 'pygments.regexopt', 'pygments.lexer', 'pygments.unistring', 'pygments.lexers.python', 'pygments.formatters._mapping', 'pygments.formatters', 'pygments.styles', 'pygments.formatter', 'pygments.formatters.html', 'IPython.core.oinspect', 'IPython.core.inputtransformer2', 'decorator', 'IPython.core.magic', 'pickleshare', 'IPython.core.autocall', 'IPython.core.macro', 'IPython.core.splitinput', 'IPython.core.prefilter', 'IPython.core.alias', 'IPython.core.builtin_trap', 'backcall.backcall', 'backcall', 'IPython.core.events', 'IPython.core.displayhook', 'IPython.core.displaypub', 'IPython.core.extensions', 'IPython.utils.sentinel', 'IPython.core.formatters', '_sqlite3', 'sqlite3.dbapi2', 'sqlite3', 'IPython.core.history', 'IPython.core.logger', 'IPython.core.payload', 'IPython.core.usage', 'IPython.lib.display', 'IPython.display', 'IPython.utils.capture', 'IPython.utils.io', 'IPython.core.hooks', 'IPython.utils.strdispatch', 'IPython.utils.syspathcontext', 'IPython.utils.tempdir', 'IPython.utils.contexts', 'IPython.core.async_helpers', 'IPython.core.interactiveshell', 'prompt_toolkit.application.current', 'prompt_toolkit.eventloop.utils', 'prompt_toolkit.eventloop.async_generator', 'wcwidth.table_wide', 'wcwidth.table_zero', 'wcwidth.unicode_versions', 'wcwidth.wcwidth', 'wcwidth', 'prompt_toolkit.utils', 'prompt_toolkit.eventloop.inputhook', 'prompt_toolkit.eventloop', 'prompt_toolkit.application.run_in_terminal', 'prompt_toolkit.selection', 'prompt_toolkit.clipboard.base', 'prompt_toolkit.clipboard.in_memory', 'prompt_toolkit.clipboard', 'prompt_toolkit.cache', 'prompt_toolkit.enums', 'prompt_toolkit.filters.base', 'prompt_toolkit.filters.app', 'prompt_toolkit.filters.cli', 'prompt_toolkit.filters.utils', 'prompt_toolkit.filters', 'prompt_toolkit.document', 'prompt_toolkit.auto_suggest', 'prompt_toolkit.data_structures', 'prompt_toolkit.styles.base', 'prompt_toolkit.styles.named_colors', 'prompt_toolkit.styles.style', 'prompt_toolkit.styles.defaults', 'prompt_toolkit.styles.pygments', 'colorsys', 'prompt_toolkit.styles.style_transformation', 'prompt_toolkit.styles', 'prompt_toolkit.output.color_depth', 'prompt_toolkit.output.base', 'prompt_toolkit.output.defaults', 'prompt_toolkit.output', 'prompt_toolkit.output.vt100', 'prompt_toolkit.mouse_events', 'prompt_toolkit.formatted_text.base', 'prompt_toolkit.formatted_text.ansi', 'xml', 'xml.dom.domreg', 'xml.dom', 'xml.dom.minicompat', 'xml.dom.NodeFilter', 'xml.dom.xmlbuilder', 'xml.dom.minidom', 'prompt_toolkit.formatted_text.html', 'prompt_toolkit.formatted_text.pygments', 'prompt_toolkit.formatted_text.utils', 'prompt_toolkit.formatted_text', 'prompt_toolkit.completion.base', 'prompt_toolkit.completion.deduplicate', 'prompt_toolkit.completion.filesystem', 'prompt_toolkit.completion.word_completer', 'prompt_toolkit.completion.fuzzy_completer', 'prompt_toolkit.completion.nested', 'prompt_toolkit.completion', 'prompt_toolkit.history', 'prompt_toolkit.keys', 'prompt_toolkit.key_binding.key_bindings', 'prompt_toolkit.key_binding.key_processor', 'prompt_toolkit.key_binding', 'prompt_toolkit.key_binding.vi_state', 'prompt_toolkit.search', 'prompt_toolkit.validation', 'prompt_toolkit.buffer', 'prompt_toolkit.input.base', 'prompt_toolkit.input.defaults', 'prompt_toolkit.input', 'prompt_toolkit.input.typeahead', 'prompt_toolkit.key_binding.bindings', 'prompt_toolkit.key_binding.bindings.scroll', 'prompt_toolkit.key_binding.bindings.page_navigation', 'prompt_toolkit.lexers.base', 'prompt_toolkit.lexers.pygments', 'prompt_toolkit.lexers', 'prompt_toolkit.layout.utils', 'prompt_toolkit.layout.processors', 'prompt_toolkit.layout.controls', 'prompt_toolkit.layout.dimension', 'prompt_toolkit.layout.margins', 'prompt_toolkit.layout.mouse_handlers', 'prompt_toolkit.layout.screen', 'prompt_toolkit.layout.containers', 'prompt_toolkit.layout.layout', 'prompt_toolkit.layout.menus', 'prompt_toolkit.layout.scrollable_pane', 'prompt_toolkit.layout', 'prompt_toolkit.key_binding.bindings.completion', 'prompt_toolkit.key_binding.bindings.named_commands', 'prompt_toolkit.key_binding.bindings.basic', 'prompt_toolkit.key_binding.bindings.cpr', 'prompt_toolkit.key_binding.bindings.emacs', 'prompt_toolkit.key_binding.bindings.mouse', 'prompt_toolkit.input.ansi_escape_sequences', 'prompt_toolkit.input.vt100_parser', 'prompt_toolkit.key_binding.digraphs', 'prompt_toolkit.key_binding.bindings.vi', 'prompt_toolkit.key_binding.defaults', 'prompt_toolkit.key_binding.emacs_state', 'prompt_toolkit.layout.dummy', 'prompt_toolkit.renderer', 'prompt_toolkit.application.application', 'prompt_toolkit.application.dummy', 'prompt_toolkit.application', 'prompt_toolkit.key_binding.bindings.focus', 'prompt_toolkit.widgets.toolbars', 'prompt_toolkit.widgets.base', 'prompt_toolkit.widgets.dialogs', 'prompt_toolkit.widgets.menus', 'prompt_toolkit.widgets', 'prompt_toolkit.shortcuts.dialogs', 'prompt_toolkit.shortcuts.progress_bar.formatters', 'prompt_toolkit.shortcuts.progress_bar.base', 'prompt_toolkit.shortcuts.progress_bar', 'prompt_toolkit.key_binding.bindings.auto_suggest', 'prompt_toolkit.key_binding.bindings.open_in_editor', 'prompt_toolkit.shortcuts.prompt', 'prompt_toolkit.shortcuts.utils', 'prompt_toolkit.shortcuts', 'prompt_toolkit', 'prompt_toolkit.patch_stdout', 'pygments.style', 'unicodedata', 'IPython.core.latex_symbols', 'IPython.utils.generics', 'parso.utils', 'parso.tree', 'parso.python', 'parso.python.token', 'parso.python.tokenize', 'parso.pgen2.grammar_parser', 'parso.pgen2.generator', 'parso.pgen2', 'parso.parser', 'parso._compatibility', 'difflib', 'parso.python.prefix', 'parso.python.tree', 'parso.python.parser', 'parso.python.diff', 'gc', 'parso.cache', 'parso.normalizer', 'parso.python.errors', 'parso.python.pep8', 'parso.file_io', 'parso.grammar', 'parso', 'jedi._compatibility', 'jedi.parser_utils', 'jedi.debug', 'jedi.settings', 'jedi.cache', 'jedi.file_io', 'jedi.inference.cache', 'jedi.inference.helpers', 'jedi.inference.utils', 'jedi.inference.base_value', 'jedi.inference.sys_path', 'jedi.inference.recursion', 'jedi.inference.flow_analysis', 'jedi.common', 'jedi.inference.lazy_value', 'jedi.inference.docstrings', 'jedi.plugins', 'jedi.inference.names', 'jedi.inference.filters', 'jedi.inference.compiled.getattr_static', 'jedi.inference.compiled.access', 'jedi.inference.signature', 'jedi.inference.context', 'jedi.inference.compiled.value', 'jedi.inference.compiled', 'jedi.inference.analysis', 'jedi.inference.gradual', 'jedi.inference.value.module', 'jedi.inference.value.dynamic_arrays', 'jedi.inference.value.iterable', 'jedi.inference.arguments', 'jedi.inference.parser_cache', 'jedi.inference.gradual.generics', 'jedi.inference.value.function', 'jedi.inference.value.klass', 'jedi.inference.value.instance', 'jedi.inference.value', 'jedi.inference.gradual.base', 'jedi.inference.gradual.type_var', 'jedi.inference.gradual.typing', 'jedi.inference.gradual.stub_value', 'jedi.inference.gradual.typeshed', 'jedi.inference.compiled.subprocess.functions', 'jedi.api.exceptions', 'jedi.inference.compiled.subprocess', 'jedi.inference.imports', 'jedi.inference.param', 'jedi.inference.gradual.annotation', 'jedi.inference.value.decorator', 'jedi.inference.syntax_tree', 'jedi.inference', 'jedi.inference.gradual.conversion', 'jedi.inference.compiled.mixed', 'pydoc_data', 'pydoc_data.topics', 'jedi.api.keywords', 'jedi.api.completion_cache', 'jedi.api.helpers', 'jedi.api.classes', 'jedi.api.interpreter', 'jedi.api.strings', 'jedi.api.file_name', 'jedi.api.completion', 'filecmp', 'jedi.api.environment', 'jedi.inference.references', 'jedi.api.project', 'jedi.api.errors', 'jedi.api.refactoring', 'jedi.api.refactoring.extract', 'jedi.inference.gradual.utils', 'jedi.api', 'jedi.plugins.stdlib', 'jedi.plugins.flask', 'jedi.plugins.pytest', 'jedi.plugins.django', 'jedi.plugins.registry', 'jedi', 'IPython.core.completer', 'IPython.terminal.ptutils', 'IPython.lib.clipboard', 'IPython.terminal.shortcuts', 'IPython.terminal.debugger', 'IPython.terminal.magics', 'IPython.terminal.pt_inputhooks', 'IPython.terminal.prompts', 'IPython.terminal.interactiveshell', 'IPython.core.magics.auto', 'IPython.core.magics.basic', 'email', 'http', 'email.errors', 'email.quoprimime', 'email.base64mime', 'quopri', 'email.encoders', 'email.charset', 'email.header', 'calendar', 'email._parseaddr', 'email.utils', 'email._policybase', 'email.feedparser', 'email.parser', 'uu', 'email._encoded_words', 'email.iterators', 'email.message', 'http.client', 'urllib.response', 'urllib.error', 'nturl2path', 'urllib.request', 'IPython.core.magics.code', 'IPython.core.magics.config', 'IPython.core.magics.display', 'timeit', '_lsprof', 'profile', 'cProfile', 'dataclasses', 'pstats', 'IPython.utils.module_paths', 'IPython.utils.timing', 'IPython.core.magics.execution', 'IPython.core.magics.extension', 'IPython.core.magics.history', 'IPython.core.magics.logging', 'IPython.core.magics.namespace', 'IPython.core.magics.osm', 'IPython.core.magics.packaging', 'IPython.core.pylabtools', 'IPython.core.magics.pylab', 'IPython.lib.backgroundjobs', 'IPython.core.magics.script', 'IPython.core.magics', 'IPython.core.shellapp', 'IPython.extensions', 'IPython.extensions.storemagic', 'IPython.terminal.ipapp', 'IPython.terminal.embed', 'IPython.utils.frame', 'IPython', 'ipython_genutils._version', 'ipython_genutils', 'ipython_genutils.encoding', 'ipython_genutils.py3compat', 'ipython_genutils.path', 'imp', 'hmac', 'dateutil._version', 'dateutil', 'six', '_decimal', 'decimal', 'dateutil._common', 'dateutil.relativedelta', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.tz.win', 'dateutil.tz.tz', 'dateutil.tz', 'dateutil.parser._parser', 'dateutil.parser.isoparser', 'dateutil.parser', '_strptime', 'jupyter_client.jsonutil', 'jupyter_client.adapter', 'jupyter_client.session', 'ipykernel.iostream', 'ipykernel.control', 'ipykernel.heartbeat', 'IPython.utils.tokenutil', 'tornado.locks', 'tornado.queues', 'ipykernel.jsonutil', 'ipykernel.kernelbase', 'ipykernel.comm.comm', 'ipykernel.comm.manager', 'ipykernel.comm', 'IPython.core.payloadpage', 'ipykernel.displayhook', 'ipykernel.zmqshell', 'setuptools._distutils', 'distutils.debug', 'distutils.errors', 'distutils.fancy_getopt', 'distutils.dep_util', 'distutils._log', 'distutils.spawn', 'distutils.util', 'distutils.dist', 'distutils.dir_util', 'distutils.file_util', 'zipfile', 'distutils.archive_util', 'distutils.cmd', 'configparser', 'distutils.config', 'distutils.extension', 'distutils.core', '_distutils_hack.override', 'setuptools._deprecation_warning', 'xml.parsers', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'xml.parsers.expat', 'plistlib', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources._vendor.jaraco', 'pkg_resources.extern.jaraco', 'importlib._common', 'importlib.resources', 'pkg_resources._vendor.more_itertools.recipes', 'pkg_resources._vendor.more_itertools.more', 'pkg_resources._vendor.more_itertools', 'pkg_resources.extern.more_itertools', 'pkg_resources.extern.jaraco.functools', 'pkg_resources.extern.jaraco.context', 'pkg_resources.extern.jaraco.text', 'pkg_resources._vendor.platformdirs.api', 'pkg_resources._vendor.platformdirs.version', 'pkg_resources._vendor.platformdirs.windows', 'pkg_resources._vendor.platformdirs', 'pkg_resources.extern.platformdirs', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources._vendor.packaging', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging.version', 'pkg_resources._vendor.packaging._manylinux', 'pkg_resources._vendor.packaging._musllinux', 'pkg_resources.extern.packaging.tags', 'pkg_resources.extern.packaging.utils', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources._vendor.pyparsing.util', 'pkg_resources._vendor.pyparsing.unicode', 'pkg_resources._vendor.pyparsing.exceptions', 'pkg_resources._vendor.pyparsing.actions', 'pkg_resources._vendor.pyparsing.results', 'pkg_resources._vendor.pyparsing.core', 'pkg_resources._vendor.pyparsing.helpers', 'pkg_resources._vendor.pyparsing.testing', 'pkg_resources._vendor.pyparsing.common', 'pkg_resources._vendor.pyparsing', 'pkg_resources.extern.pyparsing', 'pkg_resources.extern.packaging.markers', 'pkg_resources.extern.packaging.requirements', 'encodings.cp437', 'pkg_resources', 'setuptools.version', 'distutils.filelist', 'setuptools.monkey', 'setuptools.extension', 'distutils.log', 'distutils.command', 'setuptools.extern', 'setuptools._vendor', 'setuptools._vendor.packaging.__about__', 'setuptools._vendor.packaging', 'setuptools.extern.packaging', 'setuptools._vendor.ordered_set', 'setuptools.extern.ordered_set', 'setuptools._vendor.more_itertools.recipes', 'setuptools._vendor.more_itertools.more', 'setuptools._vendor.more_itertools', 'setuptools.extern.more_itertools', '_csv', 'csv', 'setuptools._vendor.zipp', 'setuptools._vendor.importlib_metadata._functools', 'setuptools._vendor.importlib_metadata._text', 'setuptools._vendor.importlib_metadata._adapters', 'setuptools._vendor.importlib_metadata._compat', 'setuptools._vendor.importlib_metadata._meta', 'setuptools._vendor.importlib_metadata._collections', 'setuptools._vendor.importlib_metadata._itertools', 'setuptools._vendor.importlib_metadata', 'setuptools.extern.importlib_metadata', 'zipp', 'importlib_metadata._functools', 'importlib_metadata._text', 'importlib_metadata._adapters', 'importlib_metadata._compat', 'importlib_metadata._meta', 'importlib_metadata._collections', 'importlib_metadata._itertools', 'importlib_metadata', 'setuptools._importlib', 'distutils.command.bdist', 'setuptools.command', 'setuptools.windows_support', 'setuptools._vendor.pyparsing.util', 'setuptools._vendor.pyparsing.unicode', 'setuptools._vendor.pyparsing.exceptions', 'setuptools._vendor.pyparsing.actions', 'setuptools._vendor.pyparsing.results', 'setuptools._vendor.pyparsing.core', 'setuptools._vendor.pyparsing.helpers', 'setuptools._vendor.pyparsing.testing', 'setuptools._vendor.pyparsing.common', 'setuptools._vendor.pyparsing', 'setuptools.extern.pyparsing', 'setuptools._vendor.packaging._manylinux', 'setuptools._vendor.packaging._musllinux', 'setuptools.extern.packaging.tags', 'setuptools.extern.packaging._structures', 'setuptools.extern.packaging.version', 'setuptools.extern.packaging.utils', 'setuptools.extern.packaging.specifiers', 'setuptools.extern.packaging.markers', 'setuptools.extern.packaging.requirements', 'setuptools._path', 'setuptools.config.expand', 'setuptools.config.setupcfg', 'setuptools.config', 'setuptools.errors', 'email._header_value_parser', 'email.headerregistry', 'setuptools.config._apply_pyprojecttoml', 'setuptools.config.pyprojecttoml', 'setuptools.discovery', 'setuptools._vendor.jaraco', 'setuptools.extern.jaraco', 'setuptools.extern.jaraco.functools', 'setuptools.extern.jaraco.context', 'setuptools.extern.jaraco.text', 'setuptools._reqs', 'setuptools._itertools', 'setuptools._entry_points', 'setuptools.dist', 'setuptools.py34compat', 'setuptools._imp', 'setuptools.depends', 'setuptools.logging', 'setuptools.msvc', 'unittest.util', 'unittest.result', 'unittest.case', 'unittest.suite', 'unittest.loader', 'unittest.signals', 'unittest.runner', 'unittest.main', 'unittest', 'unittest.mock', 'distutils.ccompiler', 'distutils._msvccompiler', 'setuptools', 'distutils', 'distutils.version', 'ipykernel.eventloops', 'ipykernel.compiler', 'debugpy._version', 'debugpy.common', 'debugpy.common.json', 'debugpy.common.fmt', 'debugpy.common.compat', 'debugpy', 'debugpy._vendored._util', 'debugpy._vendored', '_pydevd_bundle', 'encodings.ascii', 'stringprep', 'encodings.idna', '_pydevd_bundle.pydevd_vm_type', '_pydev_imps', 'xmlrpc', 'gzip', 'xmlrpc.client', 'socketserver', 'http.server', 'xmlrpc.server', '_pydev_imps._pydev_saved_modules', '_pydevd_bundle.pydevd_constants', '_pydev_bundle', '_pydev_runfiles', '_pydevd_frame_eval', 'pydev_ipython', 'pydevd_concurrency_analyser', 'pydevd_plugins', '_pydev_bundle.pydev_log', '_pydev_bundle._pydev_filesystem_encoding', '_pydevd_bundle.pydevd_comm_constants', 'pydevd_file_utils', '_pydev_imps._pydev_execfile', '_pydevd_bundle.pydevd_exec2', '_pydev_bundle.pydev_imports', '_pydev_bundle.pydev_is_thread_alive', '_pydev_bundle.pydev_override', 'pydevd_plugins.extensions', '_pydevd_bundle.pydevd_extension_utils', '_pydevd_bundle.pydevd_frame_utils', '_pydevd_bundle.pydevd_filtering', '_pydevd_bundle.pydevd_io', '_pydevd_bundle.pydevd_utils', '_pydev_bundle._pydev_tipper_common', '_pydev_bundle._pydev_imports_tipper', '_pydev_bundle._pydev_calltip_util', '_pydevd_bundle.pydevd_safe_repr', '_pydevd_bundle.pydevd_resolver', '_pydevd_bundle.pydevd_extension_api', '_pydevd_bundle.pydevd_xml', '_pydevd_bundle.pydevd_dont_trace', '_pydevd_frame_eval.vendored', '_pydevd_frame_eval.vendored.bytecode.flags', '_pydevd_frame_eval.vendored.bytecode.instr', '_pydevd_frame_eval.vendored.bytecode.bytecode', '_pydevd_frame_eval.vendored.bytecode.concrete', '_pydevd_frame_eval.vendored.bytecode.cfg', '_pydevd_frame_eval.vendored.bytecode', '_pydevd_bundle.pydevd_bytecode_utils', '_pydevd_bundle.pydevd_cython', '_pydevd_bundle.pydevd_cython_wrapper', '_pydevd_bundle.pydevd_additional_thread_info', '_pydevd_bundle.pydevd_thread_lifecycle', '_pydevd_bundle.pydevd_save_locals', '_pydevd_bundle.pydevd_defaults', '_pydev_bundle.pydev_monkey', 'pydevd_tracing', '_pydevd_bundle.pydevd_daemon_thread', '_pydevd_bundle.pydevd_timeout', '_pydevd_bundle.pydevd_vars', '_pydev_bundle.pydev_console_utils', '_pydevd_bundle.pydevd_import_class', '_pydevd_bundle.pydevd_breakpoints', '_pydevd_bundle.pydevd_custom_frames', '_pydevd_bundle.pydevd_dont_trace_files', '_pydevd_bundle.pydevd_net_command', '_pydev_bundle.pydev_umd', 'pydevconsole', '_pydev_bundle._pydev_completer', '_pydevd_bundle.pydevd_net_command_factory_xml', '_pydevd_bundle.pydevd_frame', '_pydevd_bundle.pydevd_additional_thread_info_regular', '_pydevd_bundle.pydevd_trace_dispatch', '_pydevd_frame_eval.pydevd_frame_eval_main', '_pydevd_bundle.pydevd_source_mapping', 'pydevd_concurrency_analyser.pydevd_thread_wrappers', 'pydevd_concurrency_analyser.pydevd_concurrency_logger', '_pydevd_bundle._debug_adapter', '_pydevd_bundle._debug_adapter.pydevd_schema_log', '_pydevd_bundle._debug_adapter.pydevd_base_schema', '_pydevd_bundle._debug_adapter.pydevd_schema', '_pydevd_bundle.pydevd_reload', '_pydev_bundle.fsnotify', '_pydevd_bundle.pydevd_console', '_pydevd_bundle.pydevd_comm', '_pydevd_bundle.pydevd_net_command_factory_json', '_pydevd_bundle.pydevd_collect_bytecode_info', '_pydevd_bundle.pydevd_api', '_pydevd_bundle.pydevd_json_debug_options', '_pydevd_bundle.pydevd_process_net_command_json', '_pydevd_bundle.pydevd_traceproperty', '_pydevd_bundle.pydevd_process_net_command', '_pydevd_bundle.pydevd_suspended_frames', '_pydevd_bundle.pydevd_trace_api', 'pydevd_plugins.django_debug', 'pydevd_plugins.jinja2_debug', '_pydevd_bundle.pydevd_plugin_utils', 'pydevd_plugins.extensions.types', 'pydevd_plugins.extensions.types.pydevd_helpers', 'pydevd_plugins.extensions.types.pydevd_plugin_numpy_types', 'pydevd_plugins.extensions.types.pydevd_plugins_django_form_str', 'pydevd', 'debugpy._vendored.force_pydevd', 'debugpy.server', 'debugpy.adapter', 'debugpy.common.timestamp', 'debugpy.common.util', 'debugpy.common.log', 'debugpy.common.sockets', 'debugpy.server.api', 'ipykernel.debugger', 'ipykernel.ipkernel', 'ipykernel.parentpoller', 'ipykernel.kernelapp', 'win32api', 'win32security', 'ntsecuritycon', 'faulthandler', 'IPython.core.completerlib', 'storemagic', 'pyforest._importable', 'pyforest.user_specific_imports', 'pyforest._imports', 'pyforest.utils', 'pyforest', 'logging.config', 'pythonjsonlogger', 'pythonjsonlogger.jsonlogger', 'daiquiri.types', 'daiquiri.formatter', 'daiquiri.handlers', 'daiquiri.output', 'daiquiri', 'jupyter_require.__about__', 'csscompressor', 'jupyter_require.core', 'jupyter_require.notebook', 'jupyter_nbutils.__about__', 'jupyter_nbutils.config', 'jupyter_nbutils.utils', 'jupyter_nbutils', 'jupyter_require.magic', 'jupyter_require', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'mkl._mklinit', 'mkl._py_mkl_service', 'mkl', 'numpy._distributor_init', 'numpy.core._multiarray_umath', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.compat', 'numpy.core.overrides', 'numpy.core.multiarray', 'numpy.core.umath', 'numpy.core._string_helpers', 'numpy.core._dtype', 'numpy.core._type_aliases', 'numpy.core.numerictypes', 'numpy.core._asarray', 'numpy.core._exceptions', 'numpy.core._methods', 'numpy.core.fromnumeric', 'numpy.core.shape_base', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core.numeric', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._multiarray_tests', 'numpy.core._add_newdocs', 'numpy.core._add_newdocs_scalars', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'numpy._pytesttester', 'numpy.core', 'numpy.lib.mixins', 'numpy.lib.ufunclike', 'numpy.lib.type_check', 'numpy.lib.scimath', 'numpy.lib.twodim_base', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.linalg.linalg', 'numpy.linalg', 'numpy.matrixlib.defmatrix', 'numpy.matrixlib', 'numpy.lib.histograms', 'numpy.lib.function_base', 'numpy.lib.stride_tricks', 'numpy.lib.index_tricks', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.npyio', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.lib', 'numpy.fft._pocketfft_internal', 'numpy.fft._pocketfft', 'numpy.fft.helper', 'numpy.fft', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.polynomial', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.polynomial', 'numpy.random._common', 'secrets', 'numpy.random.bit_generator', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random.mtrand', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.random._pickle', 'numpy.random', 'numpy.ctypeslib', 'numpy.ma.core', 'numpy.ma.extras', 'numpy.ma', 'numpy', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'pytz', 'mmap', 'pandas._typing', 'pandas._libs.tslibs.dtypes', 'pandas._libs.tslibs.base', 'pandas._libs.tslibs.np_datetime', 'pandas._libs.tslibs.nattype', 'pandas._libs.tslibs.timezones', 'pandas._libs.tslibs.ccalendar', 'pandas._libs.tslibs.tzconversion', 'pandas._config.config', 'pandas._config.dates', 'pandas._config.display', 'pandas._config', 'pandas._config.localization', 'pandas._libs.tslibs.strptime', 'pandas._libs.tslibs.fields', 'pandas._libs.tslibs.timedeltas', 'pandas._libs.tslibs.timestamps', 'dateutil.easter', 'pandas._libs.properties', 'pandas._libs.tslibs.offsets', 'pandas._libs.tslibs.parsing', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs.vectorized', 'pandas._libs.tslibs', 'pandas._libs.ops_dispatch', 'pandas._libs.missing', 'pandas._libs.hashtable', 'pandas._libs.algos', 'pandas._libs.interval', 'pandas._libs', 'pandas.util._decorators', 'pandas.core', 'pandas.core.util', 'pandas._libs.tslib', 'pandas._libs.lib', 'pandas._libs.hashing', 'pandas.core.dtypes', 'pandas.errors', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.base', 'pandas.core.dtypes.inference', 'pandas.core.dtypes.dtypes', 'pandas.core.dtypes.common', 'pandas.core.util.hashing', 'pandas.util', 'pandas.util.version', 'pandas.compat.numpy', 'pyarrow._generated_version', '_cython_0_29_28', 'cloudpickle.compat', 'typing_extensions', 'cloudpickle.cloudpickle', 'cloudpickle.cloudpickle_fast', 'cloudpickle', 'pyarrow.util', 'pyarrow.lib', 'pyarrow._hdfsio', 'pyarrow.filesystem', 'pyarrow.hdfs', 'pyarrow.ipc', 'pyarrow.serialization', 'pyarrow.types', 'pyarrow', 'pandas.compat.pyarrow', 'pandas.compat', 'pandas.core.config_init', 'pandas.core.dtypes.missing', 'pandas.util._exceptions', 'pandas.util._validators', 'pandas.core.dtypes.cast', 'pandas.core.array_algos', 'pandas.core.common', 'pandas.core.construction', 'pandas.core.array_algos.take', 'pandas.core.indexers', 'pandas.core.algorithms', 'pandas.compat.numpy.function', 'pandas.compat._optional', 'pandas.core.missing', 'pandas.core.roperator', 'pandas._libs.ops', 'pandas.core.computation', 'numexpr.__config__', 'numexpr.interpreter', 'numexpr.expressions', 'numexpr.utils', 'numexpr.necompiler', 'numexpr.version', 'numexpr', 'pandas.core.computation.check', 'pandas.core.computation.expressions', 'pandas.core.ops.missing', 'pandas.core.ops.dispatch', 'pandas.core.ops.invalid', 'pandas.core.ops.array_ops', 'pandas.core.ops.common', 'pandas.core.ops.docstrings', 'pandas.core.ops.mask_ops', 'pandas.core.ops.methods', 'pandas.core.ops', 'pandas.core.sorting', 'pandas.core.arrays.base', 'bottleneck.reduce', 'bottleneck.nonreduce', 'bottleneck.nonreduce_axis', 'bottleneck.move', 'bottleneck.slow.reduce', 'bottleneck.slow.nonreduce', 'bottleneck.slow.nonreduce_axis', 'bottleneck.slow.move', 'bottleneck.slow', 'bottleneck.benchmark', 'bottleneck.benchmark.autotimeit', 'bottleneck.benchmark.bench', 'bottleneck.benchmark.bench_detailed', 'bottleneck.tests', 'bottleneck.tests.util', 'bottleneck._pytesttester', 'bottleneck._version', 'bottleneck', 'pandas.core.nanops', 'pandas.core.array_algos.masked_reductions', 'pandas.core.arraylike', 'pandas.core.arrays.masked', 'pandas.core.arrays.boolean', 'pandas._libs.arrays', 'pandas.core.accessor', 'pandas.core.array_algos.transforms', 'pandas.core.arrays._mixins', 'pandas.core.base', 'pandas.core.strings.accessor', 'pandas.core.strings.base', 'pandas.core.strings', 'pandas.core.strings.object_array', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.console', 'pandas.core.arrays.categorical', 'pandas.tseries', 'pandas.tseries.frequencies', 'pandas.core.arrays.datetimelike', 'pandas.core.arrays._ranges', 'pandas.core.arrays.numeric', 'pandas.core.tools', 'pandas.core.tools.numeric', 'pandas.core.arrays.integer', 'pandas.tseries.offsets', 'pandas.core.arrays.datetimes', 'pandas.core.arrays.floating', 'pandas.core.indexes', 'pandas._libs.index', 'pandas._libs.join', 'pandas._libs.sparse', 'pandas.core.arrays.sparse.dtype', 'pandas.io.formats.printing', 'pandas.core.arrays.sparse.array', 'pandas.core.arrays.sparse.accessor', 'pandas.core.arrays.sparse', 'pandas.core.dtypes.concat', 'pandas.core.array_algos.putmask', 'pandas.core.indexes.frozen', 'pandas.core.indexes.base', 'pandas.core.arrays.interval', 'pandas.core.arrays.numpy_', 'pandas.core.arrays.period', 'pandas.core.arrays.string_', 'pyarrow._compute', 'pyarrow._compute_docstrings', 'pyarrow.vendored', 'pyarrow.vendored.docscrape', 'pyarrow.compute', 'pandas.core.arrays.string_arrow', 'pandas.core.arrays.timedeltas', 'pandas.core.arrays', 'pandas.core.flags', 'pandas._libs.reduction', 'pandas.core.indexes.extension', 'pandas.core.indexes.category', 'pandas.core.indexes.numeric', 'pandas.core.tools.timedeltas', 'pandas.core.indexes.datetimelike', 'pandas.core.tools.times', 'pandas.core.indexes.datetimes', 'pandas.core.indexes.multi', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.interval', 'pandas.core.indexes.period', 'pandas.core.indexes.range', 'pandas.core.indexes.api', 'pandas.core.aggregation', 'pandas.core.apply', 'pandas._libs.indexing', 'pandas.core.indexing', 'pandas.core.reshape', 'pandas._libs.internals', 'pandas._libs.writers', 'pandas.core.array_algos.quantile', 'pandas.core.array_algos.replace', 'pandas.core.internals.blocks', 'pandas.core.internals.api', 'pandas.core.internals.base', 'pandas.core.internals.array_manager', 'pandas.core.internals.ops', 'pandas.core.internals.managers', 'pandas.core.internals.concat', 'pandas.core.internals', 'pandas.core.reshape.concat', 'pandas.io.common', 'pandas.io.formats.format', 'pandas.core.describe', 'pandas.core.internals.construction', 'pandas.core.shared_docs', 'pandas._libs.window', 'pandas._libs.window.aggregations', 'pandas.core.util.numba_', 'pandas.core.window.common', 'pandas.core.window.doc', 'pandas._libs.window.indexers', 'pandas.core.window.indexers', 'pandas.core.window.numba_', 'pandas.core.window.online', 'pandas.core.window.rolling', 'pandas.core.window.ewm', 'pandas.core.window.expanding', 'pandas.core.window', 'pandas.core.generic', 'pandas.core.reshape.util', 'pandas.core.reshape.melt', 'pandas._libs.reshape', 'pandas.core.indexes.accessors', 'pandas.arrays', 'pandas.core.tools.datetimes', 'pandas.plotting._core', 'pandas.plotting._misc', 'pandas.plotting', 'pandas.core.series', 'pandas.io.formats.info', 'pandas.core.frame', 'pandas.core.groupby.base', 'pandas._libs.groupby', 'pandas.core.groupby.numba_', 'pandas.core.groupby.categorical', 'pandas.core.groupby.grouper', 'pandas.core.groupby.ops', 'pandas.core.groupby.groupby', 'pandas.core.groupby.generic', 'pandas.core.groupby', 'pandas.core.api', 'pandas.tseries.api', 'pandas.core.computation.common', 'pandas.core.computation.align', 'pandas.compat.chainmap', 'pandas.core.computation.scope', 'pandas.core.computation.ops', 'pandas.core.computation.parsing', 'pandas.core.computation.expr', 'pandas.core.computation.engines', 'pandas.core.computation.eval', 'pandas.core.computation.api', 'pandas.core.reshape.merge', 'pandas.core.reshape.pivot', 'pandas.core.reshape.reshape', 'pandas.core.reshape.tile', 'pandas.core.reshape.api', 'pandas.api.extensions', 'pandas.api.indexers', 'pandas.core.dtypes.api', 'pandas.api.types', 'pandas.api', 'pandas.util._print_versions', 'pandas.io.clipboards', 'pandas._libs.parsers', 'pandas.io.excel._util', 'pandas.io.date_converters', 'pandas.io.parsers.base_parser', 'pandas.io.parsers.c_parser_wrapper', 'pandas.io.parsers.python_parser', 'pandas.io.parsers.readers', 'pandas.io.parsers', 'pandas.io.excel._odfreader', 'pandas.io.excel._openpyxl', 'pandas.io.excel._pyxlsb', 'pandas.io.excel._xlrd', 'pandas.io.excel._base', 'pandas._libs.json', 'pandas.io.formats._color_data', 'pandas.io.formats.css', 'pandas.io.formats.excel', 'pandas.io.excel._odswriter', 'pandas.io.excel._xlsxwriter', 'pandas.io.excel._xlwt', 'pandas.io.excel', 'pandas.io.feather_format', 'pandas.io.gbq', 'pandas.io.html', 'pandas.io.json._normalize', 'pandas.io.json._table_schema', 'pandas.io.json._json', 'pandas.io.json', 'pandas.io.orc', 'pandas.io.parquet', 'pandas.compat.pickle_compat', 'pandas.io.pickle', 'pandas.core.computation.pytables', 'pandas.io.pytables', 'pandas.io.sas.sasreader', 'pandas.io.sas', 'pandas.io.spss', 'pandas.io.sql', 'pandas.io.stata', 'pandas.io.xml', 'pandas.io.api', 'pandas.util._tester', 'pandas._testing._random', 'pandas._testing.contexts', 'pandas._testing._io', 'pandas._testing._warnings', 'cmath', 'pandas._libs.testing', 'pandas._testing.asserters', 'pandas._testing.compat', 'pandas._testing', 'pandas.testing', 'pandas._version', 'pandas', 'matplotlib', 'matplotlib._api.deprecation', 'matplotlib._api', 'matplotlib._c_internal_utils', 'matplotlib.cbook', 'matplotlib.docstring', 'PIL._version', 'PIL', 'defusedxml.common', 'defusedxml', 'xml.etree', 'xml.etree.ElementPath', '_elementtree', 'xml.etree.ElementTree', 'defusedxml.ElementTree', 'PIL.ImageMode', 'PIL.TiffTags', 'PIL._binary', 'PIL._util', 'PIL._imaging', 'cffi.lock', 'cffi.error', 'cffi.model', 'cffi.api', 'cffi', 'PIL.Image', 'matplotlib._animation_data', 'matplotlib.animation', 'PIL.ImageChops', 'PIL.ImageFile', 'PIL.GimpGradientFile', 'PIL.GimpPaletteFile', 'PIL.ImageColor', 'PIL.PaletteFile', 'PIL.ImagePalette', 'PIL.ImageSequence', 'PIL.PngImagePlugin', 'matplotlib._path', 'matplotlib.bezier', 'matplotlib.path', 'matplotlib.transforms', 'matplotlib.ticker', 'matplotlib.scale', 'matplotlib._color_data', 'matplotlib.colors', 'pyparsing.util', 'pyparsing.unicode', 'pyparsing.exceptions', 'pyparsing.actions', 'pyparsing.results', 'pyparsing.core', 'pyparsing.helpers', 'pyparsing.testing', 'pyparsing.common', 'pyparsing', 'matplotlib.fontconfig_pattern', 'matplotlib._enums', 'cycler', 'matplotlib.rcsetup', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver', 'dateutil.rrule', 'matplotlib.units', 'matplotlib.dates']
2023-02-21 19:42:29,448 [23376] DEBUG    matplotlib:224: [JupyterRequire] CACHEDIR=C:\Users\sunny\.matplotlib
2023-02-21 19:42:29,451 [23376] DEBUG    matplotlib.font_manager:1439: [JupyterRequire] Using fontManager instance from C:\Users\sunny\.matplotlib\fontlist-v330.json
2023-02-21 19:42:29,568 [23376] DEBUG    matplotlib.pyplot:290: [JupyterRequire] Loaded backend module://matplotlib_inline.backend_inline version unknown.
2023-02-21 19:42:29,572 [23376] DEBUG    matplotlib.pyplot:290: [JupyterRequire] Loaded backend module://matplotlib_inline.backend_inline version unknown.
2023-02-21 19:42:40,824 [23376] DEBUG    tensorflow:32: [JupyterRequire] Falling back to TensorFlow client; we recommended you install the Cloud TPU client directly with pip install cloud-tpu-client.
2023-02-21 19:42:41,842 [23376] DEBUG    h5py._conv:47: [JupyterRequire] Creating converter from 7 to 5
2023-02-21 19:42:41,842 [23376] DEBUG    h5py._conv:47: [JupyterRequire] Creating converter from 5 to 7
2023-02-21 19:42:41,842 [23376] DEBUG    h5py._conv:47: [JupyterRequire] Creating converter from 7 to 5
2023-02-21 19:42:41,842 [23376] DEBUG    h5py._conv:47: [JupyterRequire] Creating converter from 5 to 7
2023-02-21 19:54:18,426 [25368] DEBUG    matplotlib.font_manager:1329: [JupyterRequire] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.
2023-02-21 19:54:18,427 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2023-02-21 19:54:18,427 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,427 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2023-02-21 19:54:18,427 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2023-02-21 19:54:18,427 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-02-21 19:54:18,427 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,428 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2023-02-21 19:54:18,428 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,428 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,428 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,428 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,428 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,428 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2023-02-21 19:54:18,428 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2023-02-21 19:54:18,429 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2023-02-21 19:54:18,429 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-02-21 19:54:18,429 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,429 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,429 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2023-02-21 19:54:18,429 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,429 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2023-02-21 19:54:18,429 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2023-02-21 19:54:18,430 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,430 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,430 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,430 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2023-02-21 19:54:18,430 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,430 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-02-21 19:54:18,430 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,430 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,430 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-02-21 19:54:18,431 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2023-02-21 19:54:18,431 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,431 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-02-21 19:54:18,431 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2023-02-21 19:54:18,431 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,431 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2023-02-21 19:54:18,431 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-02-21 19:54:18,431 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,431 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,432 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,432 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25
2023-02-21 19:54:18,432 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
2023-02-21 19:54:18,432 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,432 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,432 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24
2023-02-21 19:54:18,432 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335
2023-02-21 19:54:18,432 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,432 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05
2023-02-21 19:54:18,433 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975
2023-02-21 19:54:18,433 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,433 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,433 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,433 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,433 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,433 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
2023-02-21 19:54:18,433 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,433 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
2023-02-21 19:54:18,434 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,434 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25
2023-02-21 19:54:18,434 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24
2023-02-21 19:54:18,434 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
2023-02-21 19:54:18,434 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24
2023-02-21 19:54:18,434 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,434 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05
2023-02-21 19:54:18,434 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,434 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545
2023-02-21 19:54:18,435 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335
2023-02-21 19:54:18,435 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,435 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,435 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145
2023-02-21 19:54:18,435 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,435 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
2023-02-21 19:54:18,435 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sitka' (SitkaVF.ttf) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,435 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
2023-02-21 19:54:18,436 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525
2023-02-21 19:54:18,436 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335
2023-02-21 19:54:18,436 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335
2023-02-21 19:54:18,436 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,436 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,436 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
2023-02-21 19:54:18,436 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,436 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05
2023-02-21 19:54:18,437 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,437 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,437 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,437 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
2023-02-21 19:54:18,437 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,437 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
2023-02-21 19:54:18,437 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,437 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
2023-02-21 19:54:18,438 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24
2023-02-21 19:54:18,438 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
2023-02-21 19:54:18,438 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,438 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05
2023-02-21 19:54:18,438 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,438 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05
2023-02-21 19:54:18,438 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
2023-02-21 19:54:18,438 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05
2023-02-21 19:54:18,439 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,439 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,439 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05
2023-02-21 19:54:18,439 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,439 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,439 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
2023-02-21 19:54:18,439 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,440 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,440 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24
2023-02-21 19:54:18,440 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,440 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,440 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,440 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
2023-02-21 19:54:18,440 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,440 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335
2023-02-21 19:54:18,440 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335
2023-02-21 19:54:18,441 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145
2023-02-21 19:54:18,441 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535
2023-02-21 19:54:18,441 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,441 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05
2023-02-21 19:54:18,441 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25
2023-02-21 19:54:18,441 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,441 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335
2023-02-21 19:54:18,441 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635
2023-02-21 19:54:18,441 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,442 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363
2023-02-21 19:54:18,442 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,442 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
2023-02-21 19:54:18,443 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
2023-02-21 19:54:18,443 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145
2023-02-21 19:54:18,443 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
2023-02-21 19:54:18,443 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
2023-02-21 19:54:18,443 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335
2023-02-21 19:54:18,443 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
2023-02-21 19:54:18,443 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,443 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,443 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335
2023-02-21 19:54:18,443 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335
2023-02-21 19:54:18,443 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,443 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,443 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,443 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,443 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
2023-02-21 19:54:18,443 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,443 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145
2023-02-21 19:54:18,443 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,445 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,445 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335
2023-02-21 19:54:18,445 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05
2023-02-21 19:54:18,445 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
2023-02-21 19:54:18,445 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364
2023-02-21 19:54:18,445 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,445 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,445 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 500 normal>) = 10.145
2023-02-21 19:54:18,445 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43
2023-02-21 19:54:18,445 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI Variable' (SegUIVar.ttf) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,445 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
2023-02-21 19:54:18,445 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,445 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,445 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,445 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,445 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,445 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,445 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05
2023-02-21 19:54:18,445 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05
2023-02-21 19:54:18,445 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335
2023-02-21 19:54:18,445 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,445 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,445 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335
2023-02-21 19:54:18,445 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
2023-02-21 19:54:18,445 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145
2023-02-21 19:54:18,445 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,445 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24
2023-02-21 19:54:18,445 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,445 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,445 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335
2023-02-21 19:54:18,445 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,445 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
2023-02-21 19:54:18,445 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24
2023-02-21 19:54:18,445 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25
2023-02-21 19:54:18,445 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
2023-02-21 19:54:18,445 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,445 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
2023-02-21 19:54:18,445 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
2023-02-21 19:54:18,445 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
2023-02-21 19:54:18,445 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,445 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,445 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25
2023-02-21 19:54:18,445 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
2023-02-21 19:54:18,445 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335
2023-02-21 19:54:18,445 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24
2023-02-21 19:54:18,445 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,445 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,445 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05
2023-02-21 19:54:18,445 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25
2023-02-21 19:54:18,445 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,445 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,445 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,445 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25
2023-02-21 19:54:18,445 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,445 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25
2023-02-21 19:54:18,445 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,445 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975
2023-02-21 19:54:18,445 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,445 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,445 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05
2023-02-21 19:54:18,445 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,445 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,445 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335
2023-02-21 19:54:18,445 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145
2023-02-21 19:54:18,445 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145
2023-02-21 19:54:18,445 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24
2023-02-21 19:54:18,445 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145
2023-02-21 19:54:18,445 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24
2023-02-21 19:54:18,445 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,445 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,445 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,445 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
2023-02-21 19:54:18,445 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,445 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,445 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
2023-02-21 19:54:18,445 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335
2023-02-21 19:54:18,445 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05
2023-02-21 19:54:18,445 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,445 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,445 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,445 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,445 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05
2023-02-21 19:54:18,445 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,445 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
2023-02-21 19:54:18,445 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525
2023-02-21 19:54:18,445 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25
2023-02-21 19:54:18,445 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,445 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,445 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535
2023-02-21 19:54:18,445 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,445 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,456 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,456 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
2023-02-21 19:54:18,456 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
2023-02-21 19:54:18,456 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335
2023-02-21 19:54:18,456 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,456 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
2023-02-21 19:54:18,456 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335
2023-02-21 19:54:18,456 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05
2023-02-21 19:54:18,457 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,457 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05
2023-02-21 19:54:18,457 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,457 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,457 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
2023-02-21 19:54:18,457 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05
2023-02-21 19:54:18,457 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
2023-02-21 19:54:18,458 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,458 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,458 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
2023-02-21 19:54:18,458 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sitka' (SitkaVF-Italic.ttf) italic normal 400 normal>) = 11.05
2023-02-21 19:54:18,458 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05
2023-02-21 19:54:18,458 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335
2023-02-21 19:54:18,458 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,458 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,459 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,459 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
2023-02-21 19:54:18,459 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,459 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335
2023-02-21 19:54:18,459 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,459 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05
2023-02-21 19:54:18,459 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,459 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24
2023-02-21 19:54:18,459 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
2023-02-21 19:54:18,460 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,460 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335
2023-02-21 19:54:18,460 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
2023-02-21 19:54:18,460 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
2023-02-21 19:54:18,460 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,460 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
2023-02-21 19:54:18,460 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145
2023-02-21 19:54:18,461 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,461 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525
2023-02-21 19:54:18,461 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,461 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,461 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25
2023-02-21 19:54:18,461 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,461 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,461 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,462 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
2023-02-21 19:54:18,462 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,462 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545
2023-02-21 19:54:18,462 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
2023-02-21 19:54:18,462 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
2023-02-21 19:54:18,462 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,462 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145
2023-02-21 19:54:18,462 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24
2023-02-21 19:54:18,463 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,463 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,463 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145
2023-02-21 19:54:18,463 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,463 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
2023-02-21 19:54:18,463 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05
2023-02-21 19:54:18,463 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,463 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
2023-02-21 19:54:18,463 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25
2023-02-21 19:54:18,464 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25
2023-02-21 19:54:18,464 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,464 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,464 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,464 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,464 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,464 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
2023-02-21 19:54:18,464 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335
2023-02-21 19:54:18,465 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,465 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,465 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535
2023-02-21 19:54:18,465 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,465 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335
2023-02-21 19:54:18,465 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
2023-02-21 19:54:18,465 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335
2023-02-21 19:54:18,465 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
2023-02-21 19:54:18,465 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
2023-02-21 19:54:18,466 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635
2023-02-21 19:54:18,466 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335
2023-02-21 19:54:18,466 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,466 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05
2023-02-21 19:54:18,466 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05
2023-02-21 19:54:18,466 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05
2023-02-21 19:54:18,466 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05
2023-02-21 19:54:18,466 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05
2023-02-21 19:54:18,466 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
2023-02-21 19:54:18,467 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,467 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
2023-02-21 19:54:18,467 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
2023-02-21 19:54:18,467 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,467 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145
2023-02-21 19:54:18,467 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,467 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25
2023-02-21 19:54:18,467 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363
2023-02-21 19:54:18,468 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05
2023-02-21 19:54:18,468 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975
2023-02-21 19:54:18,468 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25
2023-02-21 19:54:18,468 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,468 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335
2023-02-21 19:54:18,468 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
2023-02-21 19:54:18,468 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,468 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335
2023-02-21 19:54:18,469 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05
2023-02-21 19:54:18,469 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05
2023-02-21 19:54:18,469 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,469 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,469 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,469 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,469 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,469 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,470 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
2023-02-21 19:54:18,470 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,470 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,470 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
2023-02-21 19:54:18,470 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
2023-02-21 19:54:18,470 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145
2023-02-21 19:54:18,470 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145
2023-02-21 19:54:18,470 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975
2023-02-21 19:54:18,470 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145
2023-02-21 19:54:18,471 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,471 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,471 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,471 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,471 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,471 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535
2023-02-21 19:54:18,471 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335
2023-02-21 19:54:18,471 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05
2023-02-21 19:54:18,472 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
2023-02-21 19:54:18,472 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525
2023-02-21 19:54:18,472 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335
2023-02-21 19:54:18,472 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05
2023-02-21 19:54:18,472 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145
2023-02-21 19:54:18,472 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,472 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335
2023-02-21 19:54:18,472 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145
2023-02-21 19:54:18,472 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
2023-02-21 19:54:18,473 [25368] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe Fluent Icons' (SegoeIcons.ttf) normal normal 400 normal>) = 10.05
2023-02-21 19:54:18,473 [25368] DEBUG    matplotlib.font_manager:1367: [JupyterRequire] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('C:\\Users\\sunny\\anaconda3\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.
2023-02-21 19:58:56,809 [25368] DEBUG    matplotlib.colorbar:620: [JupyterRequire] locator: <matplotlib.colorbar._ColorbarAutoLocator object at 0x000001C6EC06F970>
2023-02-21 19:58:56,809 [25368] DEBUG    matplotlib.colorbar:665: [JupyterRequire] Using auto colorbar locator <matplotlib.colorbar._ColorbarAutoLocator object at 0x000001C6EC06F970> on colorbar
2023-02-21 19:58:56,811 [25368] DEBUG    matplotlib.colorbar:794: [JupyterRequire] Setting pcolormesh
2023-02-21 19:59:51,921 [25368] DEBUG    matplotlib.colorbar:620: [JupyterRequire] locator: <matplotlib.colorbar._ColorbarAutoLocator object at 0x000001C6ED4E3DC0>
2023-02-21 19:59:51,937 [25368] DEBUG    matplotlib.colorbar:665: [JupyterRequire] Using auto colorbar locator <matplotlib.colorbar._ColorbarAutoLocator object at 0x000001C6ED4E3DC0> on colorbar
2023-02-21 19:59:51,937 [25368] DEBUG    matplotlib.colorbar:794: [JupyterRequire] Setting pcolormesh
2023-02-21 20:01:05,714 [25368] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\pandas\core\series.py
2023-02-21 20:01:05,902 [25368] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\jedi\third_party\typeshed\stdlib\2and3\builtins.pyi
2023-02-21 20:01:05,973 [25368] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\pandas\__init__.py
2023-02-21 20:01:05,991 [25368] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\pandas\core\__init__.py
2023-02-21 20:01:06,059 [25368] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\pandas\core\base.py
2023-02-21 20:01:06,126 [25368] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\pandas\core\arraylike.py
2023-02-21 20:01:06,307 [25368] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\pandas\core\generic.py
2023-02-21 20:01:06,613 [25368] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\pandas\core\accessor.py
2023-02-21 20:01:06,698 [25368] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\pandas\core\indexing.py
2023-02-21 20:01:06,746 [25368] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\jedi\third_party\typeshed\stdlib\3\sys.pyi
2023-02-21 20:01:36,457 [25368] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-21 20:01:36,457 [25368] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-21 20:01:36,457 [25368] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-21 20:01:36,457 [25368] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-21 20:01:36,457 [25368] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-21 20:01:36,565 [25368] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\pandas\_typing.py
2023-02-21 20:01:36,589 [25368] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\typing.py
2023-02-21 20:01:36,623 [25368] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\jedi\third_party\typeshed\stdlib\3\typing.pyi
2023-02-21 20:01:36,689 [25368] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\types.py
2023-02-21 20:01:36,700 [25368] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\jedi\third_party\typeshed\stdlib\3\types.pyi
2023-02-21 20:01:36,765 [25368] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\pandas\_libs\__init__.py
2023-02-21 20:01:47,374 [25368] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-21 20:01:47,374 [25368] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-21 20:01:47,374 [25368] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-21 20:01:47,374 [25368] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-21 20:01:47,374 [25368] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-21 20:01:52,802 [25368] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-21 20:01:52,802 [25368] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-21 20:01:52,802 [25368] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-21 20:01:52,802 [25368] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-21 20:01:52,802 [25368] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-21 20:03:07,139 [25368] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-21 20:03:07,143 [25368] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-21 20:03:07,143 [25368] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-21 20:03:07,143 [25368] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-21 20:03:07,144 [25368] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-21 20:03:07,296 [25368] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\pandas\core\frame.py
2023-02-21 20:03:11,298 [25368] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-21 20:03:11,298 [25368] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-21 20:03:11,298 [25368] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-21 20:03:11,305 [25368] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-21 20:03:11,305 [25368] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-21 20:03:12,986 [25368] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-21 20:03:12,987 [25368] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-21 20:03:12,987 [25368] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-21 20:03:12,989 [25368] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-21 20:03:12,989 [25368] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-21 20:04:47,143 [25368] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-21 20:04:47,143 [25368] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-21 20:04:47,143 [25368] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-21 20:04:47,143 [25368] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-21 20:04:47,143 [25368] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-21 21:14:23,030 [25368] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-21 21:14:23,051 [25368] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-21 21:14:23,052 [25368] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-21 21:14:23,061 [25368] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-21 21:14:23,061 [25368] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-21 21:14:28,944 [25368] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-21 21:14:28,946 [25368] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-21 21:14:28,947 [25368] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-21 21:14:28,948 [25368] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-21 21:14:28,948 [25368] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-21 21:14:30,907 [25368] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-21 21:14:30,907 [25368] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-21 21:14:30,910 [25368] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-21 21:14:30,910 [25368] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-21 21:14:30,911 [25368] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-21 21:14:30,927 [25368] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\sklearn\__init__.py
2023-02-21 21:14:33,845 [25368] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\sklearn\linear_model\__init__.py
2023-02-21 21:14:37,225 [25368] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-21 21:14:37,225 [25368] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-21 21:14:37,225 [25368] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-21 21:14:37,225 [25368] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-21 21:14:37,225 [25368] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-21 21:14:40,632 [25368] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-21 21:14:40,632 [25368] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 2
2023-02-21 21:14:40,633 [25368] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:2]
2023-02-21 21:14:40,633 [25368] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 2 (to 1 in part parser)
2023-02-21 21:14:40,633 [25368] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-21 21:14:51,008 [25368] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-21 21:14:51,009 [25368] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 2; new: 1
2023-02-21 21:14:51,009 [25368] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:2] new[1:1]
2023-02-21 21:14:51,010 [25368] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-21 21:14:51,010 [25368] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-21 21:14:51,093 [25368] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\sklearn\base.py
2023-02-21 21:14:59,773 [25368] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-21 21:14:59,773 [25368] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-21 21:14:59,774 [25368] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-21 21:14:59,774 [25368] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-21 21:14:59,775 [25368] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-21 21:15:28,201 [25368] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-21 21:15:28,204 [25368] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-21 21:15:28,204 [25368] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-21 21:15:28,204 [25368] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-21 21:15:28,204 [25368] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-21 21:15:28,294 [25368] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\abc.py
2023-02-21 21:15:28,297 [25368] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\jedi\third_party\typeshed\stdlib\3\abc.pyi
2023-02-21 21:17:01,586 [25368] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-21 21:17:01,586 [25368] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-21 21:17:01,586 [25368] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-21 21:17:01,586 [25368] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-21 21:17:01,586 [25368] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-21 21:20:17,703 [25368] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-21 21:20:17,704 [25368] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-21 21:20:17,704 [25368] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-21 21:20:17,705 [25368] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-21 21:20:17,705 [25368] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-21 21:20:18,429 [25368] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-21 21:20:18,429 [25368] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-21 21:20:18,429 [25368] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-21 21:20:18,429 [25368] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-21 21:20:18,429 [25368] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-21 21:20:33,309 [25368] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-21 21:20:33,315 [25368] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-21 21:20:33,315 [25368] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-21 21:20:33,315 [25368] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-21 21:20:33,315 [25368] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-21 21:26:15,251 [25368] DEBUG    matplotlib.pyplot:290: [JupyterRequire] Loaded backend module://matplotlib_inline.backend_inline version unknown.
2023-02-21 21:26:24,334 [25368] DEBUG    matplotlib.colorbar:620: [JupyterRequire] locator: <matplotlib.colorbar._ColorbarAutoLocator object at 0x000001C698CF2040>
2023-02-21 21:26:24,334 [25368] DEBUG    matplotlib.colorbar:665: [JupyterRequire] Using auto colorbar locator <matplotlib.colorbar._ColorbarAutoLocator object at 0x000001C698CF2040> on colorbar
2023-02-21 21:26:24,336 [25368] DEBUG    matplotlib.colorbar:794: [JupyterRequire] Setting pcolormesh
2023-02-21 21:26:33,688 [25368] DEBUG    matplotlib.colorbar:620: [JupyterRequire] locator: <matplotlib.colorbar._ColorbarAutoLocator object at 0x000001C68F5D0F10>
2023-02-21 21:26:33,689 [25368] DEBUG    matplotlib.colorbar:665: [JupyterRequire] Using auto colorbar locator <matplotlib.colorbar._ColorbarAutoLocator object at 0x000001C68F5D0F10> on colorbar
2023-02-21 21:26:33,689 [25368] DEBUG    matplotlib.colorbar:794: [JupyterRequire] Setting pcolormesh
2023-02-21 21:26:42,942 [25368] DEBUG    matplotlib.colorbar:620: [JupyterRequire] locator: <matplotlib.colorbar._ColorbarAutoLocator object at 0x000001C6990D0DF0>
2023-02-21 21:26:42,942 [25368] DEBUG    matplotlib.colorbar:665: [JupyterRequire] Using auto colorbar locator <matplotlib.colorbar._ColorbarAutoLocator object at 0x000001C6990D0DF0> on colorbar
2023-02-21 21:26:42,942 [25368] DEBUG    matplotlib.colorbar:794: [JupyterRequire] Setting pcolormesh
2023-02-21 21:43:34,277 [25368] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-21 21:43:34,282 [25368] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-21 21:43:34,283 [25368] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-21 21:43:34,284 [25368] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-21 21:43:34,286 [25368] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-21 21:43:41,165 [25368] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-21 21:43:41,173 [25368] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-21 21:43:41,173 [25368] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-21 21:43:41,175 [25368] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-21 21:43:41,175 [25368] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-21 21:43:44,335 [25368] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\seaborn\__init__.py
2023-02-21 21:45:15,437 [25368] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-21 21:45:15,437 [25368] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-21 21:45:15,437 [25368] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-21 21:45:15,447 [25368] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-21 21:45:15,448 [25368] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-21 21:45:15,645 [25368] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\sklearn\neighbors\__init__.py
2023-02-21 21:45:16,244 [25368] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\functools.py
2023-02-21 21:45:16,897 [25368] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\jedi\third_party\typeshed\stdlib\3\functools.pyi
2023-02-21 22:19:07,470 [25368] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-21 22:19:07,476 [25368] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-21 22:19:07,477 [25368] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-21 22:19:07,483 [25368] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-21 22:19:07,483 [25368] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-21 22:23:59,687 [25368] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-21 22:23:59,687 [25368] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-21 22:23:59,687 [25368] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-21 22:23:59,695 [25368] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-21 22:23:59,696 [25368] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-21 22:23:59,765 [25368] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\sklearn\ensemble\_forest.py
2023-02-21 22:24:02,417 [25368] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\sklearn\ensemble\__init__.py
2023-02-21 22:24:02,487 [25368] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\sklearn\ensemble\_base.py
2023-02-21 22:24:07,731 [25368] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-21 22:24:07,732 [25368] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-21 22:24:07,732 [25368] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-21 22:24:07,732 [25368] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-21 22:24:07,734 [25368] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-21 22:24:16,219 [25368] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-21 22:24:16,222 [25368] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-21 22:24:16,222 [25368] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-21 22:24:16,225 [25368] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-21 22:24:16,225 [25368] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-21 22:24:21,029 [25368] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-21 22:24:21,029 [25368] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-21 22:24:21,029 [25368] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-21 22:24:21,033 [25368] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-21 22:24:21,034 [25368] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-21 22:26:08,713 [25368] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-21 22:26:08,713 [25368] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-21 22:26:08,715 [25368] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-21 22:26:08,715 [25368] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-21 22:26:08,715 [25368] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-21 22:26:11,970 [25368] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-21 22:26:11,970 [25368] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-21 22:26:11,970 [25368] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-21 22:26:11,973 [25368] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-21 22:26:11,973 [25368] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-21 22:26:16,464 [25368] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-21 22:26:16,464 [25368] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-21 22:26:16,464 [25368] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-21 22:26:16,464 [25368] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-21 22:26:16,464 [25368] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-21 22:26:23,822 [25368] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-21 22:26:23,822 [25368] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-21 22:26:23,822 [25368] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-21 22:26:23,823 [25368] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-21 22:26:23,823 [25368] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-21 22:26:24,218 [25368] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-21 22:26:24,218 [25368] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-21 22:26:24,219 [25368] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-21 22:26:24,220 [25368] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-21 22:26:24,220 [25368] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-21 22:26:24,743 [25368] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-21 22:26:24,743 [25368] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-21 22:26:24,743 [25368] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-21 22:26:24,744 [25368] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-21 22:26:24,744 [25368] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-21 22:42:10,182 [10296] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-02-21 22:42:10,183 [10296] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-02-21 22:42:10,183 [10296] INFO     root:247: [JupyterRequire] Initializing comms.
2023-02-21 22:42:10,190 [10296] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-02-21 22:42:10,192 [10296] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-02-21 22:42:10,193 [10296] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-02-21 23:33:21,477 [10296] DEBUG    tensorflow:32: [JupyterRequire] Falling back to TensorFlow client; we recommended you install the Cloud TPU client directly with pip install cloud-tpu-client.
2023-02-21 23:33:22,086 [10296] DEBUG    h5py._conv:47: [JupyterRequire] Creating converter from 7 to 5
2023-02-21 23:33:22,086 [10296] DEBUG    h5py._conv:47: [JupyterRequire] Creating converter from 5 to 7
2023-02-21 23:33:22,086 [10296] DEBUG    h5py._conv:47: [JupyterRequire] Creating converter from 7 to 5
2023-02-21 23:33:22,086 [10296] DEBUG    h5py._conv:47: [JupyterRequire] Creating converter from 5 to 7
2023-02-21 23:33:35,414 [10296] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\AppData\Roaming\Python\Python39\site-packages\tensorflow\__init__.py
2023-02-21 23:33:37,397 [10296] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-21 23:33:37,399 [10296] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 3; new: 3
2023-02-21 23:33:37,399 [10296] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:2] new[1:2]
2023-02-21 23:33:37,400 [10296] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 3 (to 2 in part parser)
2023-02-21 23:33:37,400 [10296] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[3:3] new[3:3]
2023-02-21 23:33:37,400 [10296] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-21 23:33:37,845 [10296] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-21 23:33:37,845 [10296] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 3; new: 3
2023-02-21 23:33:37,845 [10296] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:2] new[1:2]
2023-02-21 23:33:37,858 [10296] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 3 (to 2 in part parser)
2023-02-21 23:33:37,858 [10296] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[3:3] new[3:3]
2023-02-21 23:33:37,860 [10296] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-21 23:33:40,786 [10296] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-21 23:33:40,786 [10296] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 3; new: 3
2023-02-21 23:33:40,786 [10296] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:2] new[1:2]
2023-02-21 23:33:40,789 [10296] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 3 (to 2 in part parser)
2023-02-21 23:33:40,789 [10296] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[3:3] new[3:3]
2023-02-21 23:33:40,789 [10296] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-21 23:33:44,400 [10296] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-21 23:33:44,401 [10296] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 3; new: 3
2023-02-21 23:33:44,401 [10296] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:2] new[1:2]
2023-02-21 23:33:44,402 [10296] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 3 (to 2 in part parser)
2023-02-21 23:33:44,403 [10296] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[3:3] new[3:3]
2023-02-21 23:33:44,403 [10296] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-21 23:33:45,501 [10296] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-21 23:33:45,502 [10296] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 3; new: 3
2023-02-21 23:33:45,502 [10296] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:2] new[1:2]
2023-02-21 23:33:45,503 [10296] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 3 (to 2 in part parser)
2023-02-21 23:33:45,504 [10296] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[3:3] new[3:3]
2023-02-21 23:33:45,504 [10296] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-21 23:33:53,915 [10296] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-21 23:33:53,915 [10296] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 3; new: 3
2023-02-21 23:33:53,915 [10296] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:2] new[1:2]
2023-02-21 23:33:53,915 [10296] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 3 (to 2 in part parser)
2023-02-21 23:33:53,924 [10296] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[3:3] new[3:3]
2023-02-21 23:33:53,924 [10296] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-21 23:33:56,772 [10296] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-21 23:33:56,772 [10296] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 3; new: 3
2023-02-21 23:33:56,772 [10296] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:2] new[1:2]
2023-02-21 23:33:56,772 [10296] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 3 (to 2 in part parser)
2023-02-21 23:33:56,781 [10296] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[3:3] new[3:3]
2023-02-21 23:33:56,781 [10296] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-21 23:33:57,655 [10296] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-21 23:33:57,656 [10296] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 3; new: 3
2023-02-21 23:33:57,656 [10296] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:2] new[1:2]
2023-02-21 23:33:57,657 [10296] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 3 (to 2 in part parser)
2023-02-21 23:33:57,657 [10296] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[3:3] new[3:3]
2023-02-21 23:33:57,657 [10296] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-21 23:33:58,026 [10296] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-21 23:33:58,027 [10296] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 3; new: 3
2023-02-21 23:33:58,027 [10296] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:2] new[1:2]
2023-02-21 23:33:58,028 [10296] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 3 (to 2 in part parser)
2023-02-21 23:33:58,028 [10296] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[3:3] new[3:3]
2023-02-21 23:33:58,028 [10296] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-22 00:12:36,412 [23376] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-02-22 00:12:36,455 [23376] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-02-22 00:12:36,455 [23376] INFO     root:247: [JupyterRequire] Initializing comms.
2023-02-22 00:12:36,513 [23376] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-02-22 00:12:36,518 [23376] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-02-22 00:12:36,519 [23376] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-02-22 00:12:36,963 [10296] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-02-22 00:12:36,963 [10296] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-02-22 00:12:36,978 [10296] INFO     root:247: [JupyterRequire] Initializing comms.
2023-02-22 00:12:36,978 [10296] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-02-22 00:12:36,985 [10296] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-02-22 00:12:36,986 [10296] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-02-22 09:29:39,353 [23376] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-02-22 09:29:39,354 [23376] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-02-22 09:29:39,355 [23376] INFO     root:247: [JupyterRequire] Initializing comms.
2023-02-22 09:29:39,369 [23376] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-02-22 09:29:39,374 [23376] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-02-22 09:29:39,375 [23376] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-02-22 09:29:39,615 [10296] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-02-22 09:29:39,616 [10296] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-02-22 09:29:39,619 [10296] INFO     root:247: [JupyterRequire] Initializing comms.
2023-02-22 09:29:39,626 [10296] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-02-22 09:29:39,627 [10296] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-02-22 09:29:39,628 [10296] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-02-22 09:58:24,796 [23376] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-02-22 09:58:24,798 [23376] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-02-22 09:58:24,799 [23376] INFO     root:247: [JupyterRequire] Initializing comms.
2023-02-22 09:58:24,816 [23376] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-02-22 09:58:24,819 [23376] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-02-22 09:58:24,820 [23376] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-02-22 09:58:25,366 [10296] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-02-22 09:58:25,366 [10296] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-02-22 09:58:25,366 [10296] INFO     root:247: [JupyterRequire] Initializing comms.
2023-02-22 09:58:25,366 [10296] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-02-22 09:58:25,366 [10296] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-02-22 09:58:25,377 [10296] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-02-22 11:47:40,491 [22652] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-02-22 11:47:40,491 [22652] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-02-22 11:47:40,492 [22652] INFO     root:247: [JupyterRequire] Initializing comms.
2023-02-22 11:47:40,496 [22652] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-02-22 11:47:40,496 [22652] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-02-22 11:47:40,497 [22652] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-02-22 11:47:44,285 [22652] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-02-22 11:47:44,285 [22652] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-02-22 11:47:44,285 [22652] INFO     root:247: [JupyterRequire] Initializing comms.
2023-02-22 11:47:44,288 [22652] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-02-22 11:47:44,289 [22652] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-02-22 11:47:44,289 [22652] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-02-22 11:53:13,977 [19608] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-02-22 11:53:13,977 [19608] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-02-22 11:53:13,978 [19608] INFO     root:247: [JupyterRequire] Initializing comms.
2023-02-22 11:53:13,980 [19608] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-02-22 11:53:13,981 [19608] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-02-22 11:53:13,981 [19608] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-02-22 11:53:17,290 [19608] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-02-22 11:53:17,291 [19608] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-02-22 11:53:17,291 [19608] INFO     root:247: [JupyterRequire] Initializing comms.
2023-02-22 11:53:17,293 [19608] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-02-22 11:53:17,293 [19608] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-02-22 11:53:17,294 [19608] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-02-22 13:54:12,604 [19608] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-02-22 13:54:12,605 [19608] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-02-22 13:54:12,605 [19608] INFO     root:247: [JupyterRequire] Initializing comms.
2023-02-22 13:54:12,613 [19608] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-02-22 13:54:12,613 [19608] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-02-22 13:54:12,613 [19608] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-02-22 13:54:12,707 [22652] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-02-22 13:54:12,707 [22652] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-02-22 13:54:12,707 [22652] INFO     root:247: [JupyterRequire] Initializing comms.
2023-02-22 13:54:12,712 [22652] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-02-22 13:54:12,712 [22652] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-02-22 13:54:12,715 [22652] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-02-22 13:55:03,083 [19608] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-02-22 13:55:03,090 [19608] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-02-22 13:55:03,090 [19608] INFO     root:247: [JupyterRequire] Initializing comms.
2023-02-22 13:55:03,090 [19608] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-02-22 13:55:03,096 [19608] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-02-22 13:55:03,096 [19608] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-02-22 13:55:03,109 [22652] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-02-22 13:55:03,109 [22652] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-02-22 13:55:03,109 [22652] INFO     root:247: [JupyterRequire] Initializing comms.
2023-02-22 13:55:03,109 [22652] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-02-22 13:55:03,109 [22652] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-02-22 13:55:03,109 [22652] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-02-22 14:13:46,430 [19608] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-02-22 14:13:46,430 [19608] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-02-22 14:13:46,430 [19608] INFO     root:247: [JupyterRequire] Initializing comms.
2023-02-22 14:13:46,443 [19608] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-02-22 14:13:46,443 [19608] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-02-22 14:13:46,443 [19608] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-02-22 14:13:46,490 [22652] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-02-22 14:13:46,490 [22652] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-02-22 14:13:46,490 [22652] INFO     root:247: [JupyterRequire] Initializing comms.
2023-02-22 14:13:46,490 [22652] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-02-22 14:13:46,490 [22652] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-02-22 14:13:46,490 [22652] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-02-22 16:52:15,415 [22652] INFO     numexpr.utils:145: [JupyterRequire] Note: NumExpr detected 12 cores but "NUMEXPR_MAX_THREADS" not set, so enforcing safe limit of 8.
2023-02-22 16:52:15,416 [22652] INFO     numexpr.utils:157: [JupyterRequire] NumExpr defaulting to 8 threads.
2023-02-22 16:52:16,439 [22652] DEBUG    matplotlib:224: [JupyterRequire] matplotlib data path: C:\Users\sunny\anaconda3\lib\site-packages\matplotlib\mpl-data
2023-02-22 16:52:16,457 [22652] DEBUG    matplotlib:224: [JupyterRequire] CONFIGDIR=C:\Users\sunny\.matplotlib
2023-02-22 16:52:16,460 [22652] DEBUG    matplotlib:1394: [JupyterRequire] matplotlib version 3.4.3
2023-02-22 16:52:16,460 [22652] DEBUG    matplotlib:1395: [JupyterRequire] interactive is False
2023-02-22 16:52:16,461 [22652] DEBUG    matplotlib:1396: [JupyterRequire] platform is win32
2023-02-22 16:52:16,461 [22652] DEBUG    matplotlib:1397: [JupyterRequire] loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_thread', '_warnings', '_weakref', '_io', 'marshal', 'nt', 'winreg', '_frozen_importlib_external', 'time', 'zipimport', '_codecs', 'codecs', 'encodings.aliases', 'encodings', 'encodings.utf_8', 'encodings.cp1252', '_signal', 'encodings.latin_1', '_abc', 'abc', 'io', '__main__', '_stat', 'stat', '_collections_abc', 'genericpath', 'ntpath', 'os.path', 'os', '_sitebuiltins', '_locale', '_bootlocale', '_distutils_hack', 'types', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib', 'importlib.machinery', '_heapq', 'heapq', 'itertools', 'keyword', '_operator', 'operator', 'reprlib', '_collections', 'collections', 'collections.abc', '_functools', 'functools', 'contextlib', 'enum', '_sre', 'sre_constants', 'sre_parse', 'sre_compile', 'copyreg', 're', 'typing.io', 'typing.re', 'typing', 'importlib.abc', 'importlib.util', 'google', 'google.cloud', 'google.logging', 'mpl_toolkits', 'sphinxcontrib', 'zope', 'site', '_weakrefset', 'weakref', 'pkgutil', 'runpy', 'ipykernel._version', '_json', 'json.scanner', 'json.decoder', 'json.encoder', 'json', 'errno', 'signal', 'threading', 'msvcrt', '_winapi', 'subprocess', 'jupyter_client._version', 'posixpath', 'fnmatch', 'glob', '_socket', 'math', 'select', 'selectors', 'socket', 'zlib', '_compression', '_bz2', 'bz2', '_lzma', 'lzma', 'shutil', '_bisect', 'bisect', '_random', '_sha512', 'random', 'tempfile', 'getpass', 'platform', 'zmq.libzmq', 'zmq.backend.select', 'cython_runtime', 'zmq.backend.cython.constants', '_cython_0_29_24', 'zmq.backend.cython.error', 'zmq.error', 'zmq.backend.cython.message', 'zmq.backend.cython.context', 'copy', '_struct', 'struct', '_compat_pickle', '_pickle', 'pickle', 'zmq.backend.cython.socket', 'zmq.backend.cython.utils', 'zmq.backend.cython._poll', 'zmq.backend.cython._version', 'zmq.backend.cython._device', 'zmq.backend.cython._proxy_steerable', 'zmq.backend.cython', 'zmq.backend', 'zmq.utils', 'zmq.utils.constant_names', 'zmq.sugar.constants', 'atexit', 'zmq.sugar.attrsettr', 'zmq.sugar.poll', 'zmq.utils.jsonapi', 'zmq.utils.strtypes', 'zmq.sugar.socket', 'zmq.sugar.context', 'zmq.sugar.frame', 'zmq.sugar.tracker', 'zmq.sugar.version', 'zmq.sugar.stopwatch', 'zmq.sugar', 'zmq', '_ast', 'ast', '_opcode', 'opcode', 'dis', 'token', 'tokenize', 'linecache', 'inspect', 'traitlets.utils', 'traitlets.utils.getargspec', 'traitlets.utils.importstring', 'traitlets.utils.sentinel', 'traitlets.utils.bunch', 'traitlets.utils.descriptions', 'traitlets.traitlets', 'traitlets.utils.decorators', 'traitlets._version', 'traitlets', 'traceback', '_string', 'string', 'logging', 'pprint', 'gettext', 'argparse', 'traitlets.config.loader', 'textwrap', 'traitlets.utils.text', 'traitlets.config.configurable', 'traitlets.config.application', 'traitlets.config', 'jupyter_client.localinterfaces', 'jupyter_core.version', 'jupyter_core', 'urllib', 'urllib.parse', 'pathlib', 'jupyter_core.paths', 'jupyter_client.utils', 'jupyter_client.connect', 'traitlets.log', 'jupyter_client.launcher', 'concurrent', 'concurrent.futures._base', 'concurrent.futures', '_ssl', 'binascii', 'base64', 'ssl', 'asyncio.constants', 'asyncio.format_helpers', 'asyncio.base_futures', 'asyncio.log', 'asyncio.coroutines', '_contextvars', 'contextvars', 'asyncio.exceptions', 'asyncio.base_tasks', '_asyncio', 'asyncio.events', 'asyncio.futures', 'asyncio.protocols', 'asyncio.transports', 'asyncio.sslproto', 'asyncio.locks', 'asyncio.tasks', 'asyncio.staggered', 'asyncio.trsock', 'asyncio.base_events', 'asyncio.runners', 'asyncio.queues', 'asyncio.streams', 'asyncio.subprocess', 'asyncio.threads', '_overlapped', 'asyncio.base_subprocess', 'asyncio.proactor_events', 'asyncio.selector_events', 'asyncio.windows_utils', 'asyncio.windows_events', 'asyncio', 'jupyter_client.channelsabc', 'jupyter_client.channels', 'jupyter_client.clientabc', 'jupyter_client.client', 'jupyter_client.kernelspec', 'jupyter_client.managerabc', 'jupyter_client.manager', '_queue', 'queue', 'jupyter_client.blocking.channels', 'jupyter_client.blocking.client', 'jupyter_client.blocking', 'zmq._future', 'zmq.asyncio', 'jupyter_client.asynchronous.channels', 'jupyter_client.asynchronous.client', 'jupyter_client.asynchronous', '_uuid', 'uuid', 'jupyter_client.multikernelmanager', 'jupyter_client', 'ipykernel.connect', 'ipykernel', 'tornado', '_datetime', 'datetime', 'numbers', 'logging.handlers', 'html.entities', 'html', 'array', 'tornado.speedups', 'tornado.util', 'tornado.escape', 'colorama.ansi', '_ctypes', 'ctypes._endian', 'ctypes', 'ctypes.wintypes', 'colorama.win32', 'colorama.winterm', 'colorama.ansitowin32', 'colorama.initialise', 'colorama', 'tornado.log', 'tornado.concurrent', 'tornado.ioloop', '__future__', 'tornado.platform', 'tornado.gen', 'tornado.platform.asyncio', 'zmq.eventloop.ioloop', 'zmq.eventloop', 'zmq.eventloop.zmqstream', 'IPython.core', 'IPython.core.getipython', 'IPython.core.release', 'sysconfig', 'pydoc', 'bdb', 'IPython.utils', 'IPython.utils.ipstruct', 'IPython.utils.coloransi', 'pygments', 'IPython.utils.colorable', 'IPython.utils.PyColorize', 'locale', 'IPython.utils.encoding', 'IPython.utils.py3compat', 'IPython.core.excolors', 'IPython.testing', 'IPython.testing.skipdoctest', 'cmd', 'codeop', 'code', 'pdb', 'IPython.core.debugger', 'IPython.core.display_trap', 'shlex', 'IPython.utils._process_common', 'IPython.utils._process_win32', 'IPython.utils.process', 'IPython.utils.decorators', 'IPython.utils.path', 'IPython.utils.data', 'IPython.utils.terminal', 'IPython.core.ultratb', 'IPython.utils._sysinfo', 'IPython.utils.sysinfo', 'IPython.core.crashhandler', 'IPython.utils.importstring', 'IPython.paths', 'IPython.core.profiledir', 'IPython.core.application', 'IPython.terminal', '_hashlib', '_blake2', 'hashlib', 'IPython.core.compilerop', 'IPython.core.error', 'IPython.utils.text', 'IPython.core.magic_arguments', 'getopt', 'mimetypes', 'IPython.core.display', 'IPython.core.page', 'IPython.lib.security', 'IPython.lib', 'IPython.lib.pretty', 'IPython.utils.openpy', 'IPython.utils.dir2', 'IPython.utils.wildcard', 'pygments.lexers._mapping', 'pygments.modeline', 'pygments.plugin', 'pygments.util', 'pygments.lexers', 'pygments.filter', 'pygments.token', 'pygments.filters', 'pygments.regexopt', 'pygments.lexer', 'pygments.unistring', 'pygments.lexers.python', 'pygments.formatters._mapping', 'pygments.formatters', 'pygments.styles', 'pygments.formatter', 'pygments.formatters.html', 'IPython.core.oinspect', 'IPython.core.inputtransformer2', 'decorator', 'IPython.core.magic', 'pickleshare', 'IPython.core.autocall', 'IPython.core.macro', 'IPython.core.splitinput', 'IPython.core.prefilter', 'IPython.core.alias', 'IPython.core.builtin_trap', 'backcall.backcall', 'backcall', 'IPython.core.events', 'IPython.core.displayhook', 'IPython.core.displaypub', 'IPython.core.extensions', 'IPython.utils.sentinel', 'IPython.core.formatters', '_sqlite3', 'sqlite3.dbapi2', 'sqlite3', 'IPython.core.history', 'IPython.core.logger', 'IPython.core.payload', 'IPython.core.usage', 'IPython.lib.display', 'IPython.display', 'IPython.utils.capture', 'IPython.utils.io', 'IPython.core.hooks', 'IPython.utils.strdispatch', 'IPython.utils.syspathcontext', 'IPython.utils.tempdir', 'IPython.utils.contexts', 'IPython.core.async_helpers', 'IPython.core.interactiveshell', 'prompt_toolkit.application.current', 'prompt_toolkit.eventloop.utils', 'prompt_toolkit.eventloop.async_generator', 'wcwidth.table_wide', 'wcwidth.table_zero', 'wcwidth.unicode_versions', 'wcwidth.wcwidth', 'wcwidth', 'prompt_toolkit.utils', 'prompt_toolkit.eventloop.inputhook', 'prompt_toolkit.eventloop', 'prompt_toolkit.application.run_in_terminal', 'prompt_toolkit.selection', 'prompt_toolkit.clipboard.base', 'prompt_toolkit.clipboard.in_memory', 'prompt_toolkit.clipboard', 'prompt_toolkit.cache', 'prompt_toolkit.enums', 'prompt_toolkit.filters.base', 'prompt_toolkit.filters.app', 'prompt_toolkit.filters.cli', 'prompt_toolkit.filters.utils', 'prompt_toolkit.filters', 'prompt_toolkit.document', 'prompt_toolkit.auto_suggest', 'prompt_toolkit.data_structures', 'prompt_toolkit.styles.base', 'prompt_toolkit.styles.named_colors', 'prompt_toolkit.styles.style', 'prompt_toolkit.styles.defaults', 'prompt_toolkit.styles.pygments', 'colorsys', 'prompt_toolkit.styles.style_transformation', 'prompt_toolkit.styles', 'prompt_toolkit.output.color_depth', 'prompt_toolkit.output.base', 'prompt_toolkit.output.defaults', 'prompt_toolkit.output', 'prompt_toolkit.output.vt100', 'prompt_toolkit.mouse_events', 'prompt_toolkit.formatted_text.base', 'prompt_toolkit.formatted_text.ansi', 'xml', 'xml.dom.domreg', 'xml.dom', 'xml.dom.minicompat', 'xml.dom.NodeFilter', 'xml.dom.xmlbuilder', 'xml.dom.minidom', 'prompt_toolkit.formatted_text.html', 'prompt_toolkit.formatted_text.pygments', 'prompt_toolkit.formatted_text.utils', 'prompt_toolkit.formatted_text', 'prompt_toolkit.completion.base', 'prompt_toolkit.completion.deduplicate', 'prompt_toolkit.completion.filesystem', 'prompt_toolkit.completion.word_completer', 'prompt_toolkit.completion.fuzzy_completer', 'prompt_toolkit.completion.nested', 'prompt_toolkit.completion', 'prompt_toolkit.history', 'prompt_toolkit.keys', 'prompt_toolkit.key_binding.key_bindings', 'prompt_toolkit.key_binding.key_processor', 'prompt_toolkit.key_binding', 'prompt_toolkit.key_binding.vi_state', 'prompt_toolkit.search', 'prompt_toolkit.validation', 'prompt_toolkit.buffer', 'prompt_toolkit.input.base', 'prompt_toolkit.input.defaults', 'prompt_toolkit.input', 'prompt_toolkit.input.typeahead', 'prompt_toolkit.key_binding.bindings', 'prompt_toolkit.key_binding.bindings.scroll', 'prompt_toolkit.key_binding.bindings.page_navigation', 'prompt_toolkit.lexers.base', 'prompt_toolkit.lexers.pygments', 'prompt_toolkit.lexers', 'prompt_toolkit.layout.utils', 'prompt_toolkit.layout.processors', 'prompt_toolkit.layout.controls', 'prompt_toolkit.layout.dimension', 'prompt_toolkit.layout.margins', 'prompt_toolkit.layout.mouse_handlers', 'prompt_toolkit.layout.screen', 'prompt_toolkit.layout.containers', 'prompt_toolkit.layout.layout', 'prompt_toolkit.layout.menus', 'prompt_toolkit.layout.scrollable_pane', 'prompt_toolkit.layout', 'prompt_toolkit.key_binding.bindings.completion', 'prompt_toolkit.key_binding.bindings.named_commands', 'prompt_toolkit.key_binding.bindings.basic', 'prompt_toolkit.key_binding.bindings.cpr', 'prompt_toolkit.key_binding.bindings.emacs', 'prompt_toolkit.key_binding.bindings.mouse', 'prompt_toolkit.input.ansi_escape_sequences', 'prompt_toolkit.input.vt100_parser', 'prompt_toolkit.key_binding.digraphs', 'prompt_toolkit.key_binding.bindings.vi', 'prompt_toolkit.key_binding.defaults', 'prompt_toolkit.key_binding.emacs_state', 'prompt_toolkit.layout.dummy', 'prompt_toolkit.renderer', 'prompt_toolkit.application.application', 'prompt_toolkit.application.dummy', 'prompt_toolkit.application', 'prompt_toolkit.key_binding.bindings.focus', 'prompt_toolkit.widgets.toolbars', 'prompt_toolkit.widgets.base', 'prompt_toolkit.widgets.dialogs', 'prompt_toolkit.widgets.menus', 'prompt_toolkit.widgets', 'prompt_toolkit.shortcuts.dialogs', 'prompt_toolkit.shortcuts.progress_bar.formatters', 'prompt_toolkit.shortcuts.progress_bar.base', 'prompt_toolkit.shortcuts.progress_bar', 'prompt_toolkit.key_binding.bindings.auto_suggest', 'prompt_toolkit.key_binding.bindings.open_in_editor', 'prompt_toolkit.shortcuts.prompt', 'prompt_toolkit.shortcuts.utils', 'prompt_toolkit.shortcuts', 'prompt_toolkit', 'prompt_toolkit.patch_stdout', 'pygments.style', 'unicodedata', 'IPython.core.latex_symbols', 'IPython.utils.generics', 'parso.utils', 'parso.tree', 'parso.python', 'parso.python.token', 'parso.python.tokenize', 'parso.pgen2.grammar_parser', 'parso.pgen2.generator', 'parso.pgen2', 'parso.parser', 'parso._compatibility', 'difflib', 'parso.python.prefix', 'parso.python.tree', 'parso.python.parser', 'parso.python.diff', 'gc', 'parso.cache', 'parso.normalizer', 'parso.python.errors', 'parso.python.pep8', 'parso.file_io', 'parso.grammar', 'parso', 'jedi._compatibility', 'jedi.parser_utils', 'jedi.debug', 'jedi.settings', 'jedi.cache', 'jedi.file_io', 'jedi.inference.cache', 'jedi.inference.helpers', 'jedi.inference.utils', 'jedi.inference.base_value', 'jedi.inference.sys_path', 'jedi.inference.recursion', 'jedi.inference.flow_analysis', 'jedi.common', 'jedi.inference.lazy_value', 'jedi.inference.docstrings', 'jedi.plugins', 'jedi.inference.names', 'jedi.inference.filters', 'jedi.inference.compiled.getattr_static', 'jedi.inference.compiled.access', 'jedi.inference.signature', 'jedi.inference.context', 'jedi.inference.compiled.value', 'jedi.inference.compiled', 'jedi.inference.analysis', 'jedi.inference.gradual', 'jedi.inference.value.module', 'jedi.inference.value.dynamic_arrays', 'jedi.inference.value.iterable', 'jedi.inference.arguments', 'jedi.inference.parser_cache', 'jedi.inference.gradual.generics', 'jedi.inference.value.function', 'jedi.inference.value.klass', 'jedi.inference.value.instance', 'jedi.inference.value', 'jedi.inference.gradual.base', 'jedi.inference.gradual.type_var', 'jedi.inference.gradual.typing', 'jedi.inference.gradual.stub_value', 'jedi.inference.gradual.typeshed', 'jedi.inference.compiled.subprocess.functions', 'jedi.api.exceptions', 'jedi.inference.compiled.subprocess', 'jedi.inference.imports', 'jedi.inference.param', 'jedi.inference.gradual.annotation', 'jedi.inference.value.decorator', 'jedi.inference.syntax_tree', 'jedi.inference', 'jedi.inference.gradual.conversion', 'jedi.inference.compiled.mixed', 'pydoc_data', 'pydoc_data.topics', 'jedi.api.keywords', 'jedi.api.completion_cache', 'jedi.api.helpers', 'jedi.api.classes', 'jedi.api.interpreter', 'jedi.api.strings', 'jedi.api.file_name', 'jedi.api.completion', 'filecmp', 'jedi.api.environment', 'jedi.inference.references', 'jedi.api.project', 'jedi.api.errors', 'jedi.api.refactoring', 'jedi.api.refactoring.extract', 'jedi.inference.gradual.utils', 'jedi.api', 'jedi.plugins.stdlib', 'jedi.plugins.flask', 'jedi.plugins.pytest', 'jedi.plugins.django', 'jedi.plugins.registry', 'jedi', 'IPython.core.completer', 'IPython.terminal.ptutils', 'IPython.lib.clipboard', 'IPython.terminal.shortcuts', 'IPython.terminal.debugger', 'IPython.terminal.magics', 'IPython.terminal.pt_inputhooks', 'IPython.terminal.prompts', 'IPython.terminal.interactiveshell', 'IPython.core.magics.auto', 'IPython.core.magics.basic', 'email', 'http', 'email.errors', 'email.quoprimime', 'email.base64mime', 'quopri', 'email.encoders', 'email.charset', 'email.header', 'calendar', 'email._parseaddr', 'email.utils', 'email._policybase', 'email.feedparser', 'email.parser', 'uu', 'email._encoded_words', 'email.iterators', 'email.message', 'http.client', 'urllib.response', 'urllib.error', 'nturl2path', 'urllib.request', 'IPython.core.magics.code', 'IPython.core.magics.config', 'IPython.core.magics.display', 'timeit', '_lsprof', 'profile', 'cProfile', 'dataclasses', 'pstats', 'IPython.utils.module_paths', 'IPython.utils.timing', 'IPython.core.magics.execution', 'IPython.core.magics.extension', 'IPython.core.magics.history', 'IPython.core.magics.logging', 'IPython.core.magics.namespace', 'IPython.core.magics.osm', 'IPython.core.magics.packaging', 'IPython.core.pylabtools', 'IPython.core.magics.pylab', 'IPython.lib.backgroundjobs', 'IPython.core.magics.script', 'IPython.core.magics', 'IPython.core.shellapp', 'IPython.extensions', 'IPython.extensions.storemagic', 'IPython.terminal.ipapp', 'IPython.terminal.embed', 'IPython.utils.frame', 'IPython', 'ipython_genutils._version', 'ipython_genutils', 'ipython_genutils.encoding', 'ipython_genutils.py3compat', 'ipython_genutils.path', 'imp', 'hmac', 'dateutil._version', 'dateutil', 'six', '_decimal', 'decimal', 'dateutil._common', 'dateutil.relativedelta', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.tz.win', 'dateutil.tz.tz', 'dateutil.tz', 'dateutil.parser._parser', 'dateutil.parser.isoparser', 'dateutil.parser', '_strptime', 'jupyter_client.jsonutil', 'jupyter_client.adapter', 'jupyter_client.session', 'ipykernel.iostream', 'ipykernel.control', 'ipykernel.heartbeat', 'IPython.utils.tokenutil', 'tornado.locks', 'tornado.queues', 'ipykernel.jsonutil', 'ipykernel.kernelbase', 'ipykernel.comm.comm', 'ipykernel.comm.manager', 'ipykernel.comm', 'IPython.core.payloadpage', 'ipykernel.displayhook', 'ipykernel.zmqshell', 'setuptools._distutils', 'distutils.debug', 'distutils.errors', 'distutils.fancy_getopt', 'distutils.dep_util', 'distutils._log', 'distutils.spawn', 'distutils.util', 'distutils.dist', 'distutils.dir_util', 'distutils.file_util', 'zipfile', 'distutils.archive_util', 'distutils.cmd', 'configparser', 'distutils.config', 'distutils.extension', 'distutils.core', '_distutils_hack.override', 'setuptools._deprecation_warning', 'xml.parsers', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'xml.parsers.expat', 'plistlib', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources._vendor.jaraco', 'pkg_resources.extern.jaraco', 'importlib._common', 'importlib.resources', 'pkg_resources._vendor.more_itertools.recipes', 'pkg_resources._vendor.more_itertools.more', 'pkg_resources._vendor.more_itertools', 'pkg_resources.extern.more_itertools', 'pkg_resources.extern.jaraco.functools', 'pkg_resources.extern.jaraco.context', 'pkg_resources.extern.jaraco.text', 'pkg_resources._vendor.platformdirs.api', 'pkg_resources._vendor.platformdirs.version', 'pkg_resources._vendor.platformdirs.windows', 'pkg_resources._vendor.platformdirs', 'pkg_resources.extern.platformdirs', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources._vendor.packaging', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging.version', 'pkg_resources._vendor.packaging._manylinux', 'pkg_resources._vendor.packaging._musllinux', 'pkg_resources.extern.packaging.tags', 'pkg_resources.extern.packaging.utils', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources._vendor.pyparsing.util', 'pkg_resources._vendor.pyparsing.unicode', 'pkg_resources._vendor.pyparsing.exceptions', 'pkg_resources._vendor.pyparsing.actions', 'pkg_resources._vendor.pyparsing.results', 'pkg_resources._vendor.pyparsing.core', 'pkg_resources._vendor.pyparsing.helpers', 'pkg_resources._vendor.pyparsing.testing', 'pkg_resources._vendor.pyparsing.common', 'pkg_resources._vendor.pyparsing', 'pkg_resources.extern.pyparsing', 'pkg_resources.extern.packaging.markers', 'pkg_resources.extern.packaging.requirements', 'encodings.cp437', 'pkg_resources', 'setuptools.version', 'distutils.filelist', 'setuptools.monkey', 'setuptools.extension', 'distutils.log', 'distutils.command', 'setuptools.extern', 'setuptools._vendor', 'setuptools._vendor.packaging.__about__', 'setuptools._vendor.packaging', 'setuptools.extern.packaging', 'setuptools._vendor.ordered_set', 'setuptools.extern.ordered_set', 'setuptools._vendor.more_itertools.recipes', 'setuptools._vendor.more_itertools.more', 'setuptools._vendor.more_itertools', 'setuptools.extern.more_itertools', '_csv', 'csv', 'setuptools._vendor.zipp', 'setuptools._vendor.importlib_metadata._functools', 'setuptools._vendor.importlib_metadata._text', 'setuptools._vendor.importlib_metadata._adapters', 'setuptools._vendor.importlib_metadata._compat', 'setuptools._vendor.importlib_metadata._meta', 'setuptools._vendor.importlib_metadata._collections', 'setuptools._vendor.importlib_metadata._itertools', 'setuptools._vendor.importlib_metadata', 'setuptools.extern.importlib_metadata', 'zipp', 'importlib_metadata._functools', 'importlib_metadata._text', 'importlib_metadata._adapters', 'importlib_metadata._compat', 'importlib_metadata._meta', 'importlib_metadata._collections', 'importlib_metadata._itertools', 'importlib_metadata', 'setuptools._importlib', 'distutils.command.bdist', 'setuptools.command', 'setuptools.windows_support', 'setuptools._vendor.pyparsing.util', 'setuptools._vendor.pyparsing.unicode', 'setuptools._vendor.pyparsing.exceptions', 'setuptools._vendor.pyparsing.actions', 'setuptools._vendor.pyparsing.results', 'setuptools._vendor.pyparsing.core', 'setuptools._vendor.pyparsing.helpers', 'setuptools._vendor.pyparsing.testing', 'setuptools._vendor.pyparsing.common', 'setuptools._vendor.pyparsing', 'setuptools.extern.pyparsing', 'setuptools._vendor.packaging._manylinux', 'setuptools._vendor.packaging._musllinux', 'setuptools.extern.packaging.tags', 'setuptools.extern.packaging._structures', 'setuptools.extern.packaging.version', 'setuptools.extern.packaging.utils', 'setuptools.extern.packaging.specifiers', 'setuptools.extern.packaging.markers', 'setuptools.extern.packaging.requirements', 'setuptools._path', 'setuptools.config.expand', 'setuptools.config.setupcfg', 'setuptools.config', 'setuptools.errors', 'email._header_value_parser', 'email.headerregistry', 'setuptools.config._apply_pyprojecttoml', 'setuptools.config.pyprojecttoml', 'setuptools.discovery', 'setuptools._vendor.jaraco', 'setuptools.extern.jaraco', 'setuptools.extern.jaraco.functools', 'setuptools.extern.jaraco.context', 'setuptools.extern.jaraco.text', 'setuptools._reqs', 'setuptools._itertools', 'setuptools._entry_points', 'setuptools.dist', 'setuptools.py34compat', 'setuptools._imp', 'setuptools.depends', 'setuptools.logging', 'setuptools.msvc', 'unittest.util', 'unittest.result', 'unittest.case', 'unittest.suite', 'unittest.loader', 'unittest.signals', 'unittest.runner', 'unittest.main', 'unittest', 'unittest.mock', 'distutils.ccompiler', 'distutils._msvccompiler', 'setuptools', 'distutils', 'distutils.version', 'ipykernel.eventloops', 'ipykernel.compiler', 'debugpy._version', 'debugpy.common', 'debugpy.common.json', 'debugpy.common.fmt', 'debugpy.common.compat', 'debugpy', 'debugpy._vendored._util', 'debugpy._vendored', '_pydevd_bundle', 'encodings.ascii', 'stringprep', 'encodings.idna', '_pydevd_bundle.pydevd_vm_type', '_pydev_imps', 'xmlrpc', 'gzip', 'xmlrpc.client', 'socketserver', 'http.server', 'xmlrpc.server', '_pydev_imps._pydev_saved_modules', '_pydevd_bundle.pydevd_constants', '_pydev_bundle', '_pydev_runfiles', '_pydevd_frame_eval', 'pydev_ipython', 'pydevd_concurrency_analyser', 'pydevd_plugins', '_pydev_bundle.pydev_log', '_pydev_bundle._pydev_filesystem_encoding', '_pydevd_bundle.pydevd_comm_constants', 'pydevd_file_utils', '_pydev_imps._pydev_execfile', '_pydevd_bundle.pydevd_exec2', '_pydev_bundle.pydev_imports', '_pydev_bundle.pydev_is_thread_alive', '_pydev_bundle.pydev_override', 'pydevd_plugins.extensions', '_pydevd_bundle.pydevd_extension_utils', '_pydevd_bundle.pydevd_frame_utils', '_pydevd_bundle.pydevd_filtering', '_pydevd_bundle.pydevd_io', '_pydevd_bundle.pydevd_utils', '_pydev_bundle._pydev_tipper_common', '_pydev_bundle._pydev_imports_tipper', '_pydev_bundle._pydev_calltip_util', '_pydevd_bundle.pydevd_safe_repr', '_pydevd_bundle.pydevd_resolver', '_pydevd_bundle.pydevd_extension_api', '_pydevd_bundle.pydevd_xml', '_pydevd_bundle.pydevd_dont_trace', '_pydevd_frame_eval.vendored', '_pydevd_frame_eval.vendored.bytecode.flags', '_pydevd_frame_eval.vendored.bytecode.instr', '_pydevd_frame_eval.vendored.bytecode.bytecode', '_pydevd_frame_eval.vendored.bytecode.concrete', '_pydevd_frame_eval.vendored.bytecode.cfg', '_pydevd_frame_eval.vendored.bytecode', '_pydevd_bundle.pydevd_bytecode_utils', '_pydevd_bundle.pydevd_cython', '_pydevd_bundle.pydevd_cython_wrapper', '_pydevd_bundle.pydevd_additional_thread_info', '_pydevd_bundle.pydevd_thread_lifecycle', '_pydevd_bundle.pydevd_save_locals', '_pydevd_bundle.pydevd_defaults', '_pydev_bundle.pydev_monkey', 'pydevd_tracing', '_pydevd_bundle.pydevd_daemon_thread', '_pydevd_bundle.pydevd_timeout', '_pydevd_bundle.pydevd_vars', '_pydev_bundle.pydev_console_utils', '_pydevd_bundle.pydevd_import_class', '_pydevd_bundle.pydevd_breakpoints', '_pydevd_bundle.pydevd_custom_frames', '_pydevd_bundle.pydevd_dont_trace_files', '_pydevd_bundle.pydevd_net_command', '_pydev_bundle.pydev_umd', 'pydevconsole', '_pydev_bundle._pydev_completer', '_pydevd_bundle.pydevd_net_command_factory_xml', '_pydevd_bundle.pydevd_frame', '_pydevd_bundle.pydevd_additional_thread_info_regular', '_pydevd_bundle.pydevd_trace_dispatch', '_pydevd_frame_eval.pydevd_frame_eval_main', '_pydevd_bundle.pydevd_source_mapping', 'pydevd_concurrency_analyser.pydevd_thread_wrappers', 'pydevd_concurrency_analyser.pydevd_concurrency_logger', '_pydevd_bundle._debug_adapter', '_pydevd_bundle._debug_adapter.pydevd_schema_log', '_pydevd_bundle._debug_adapter.pydevd_base_schema', '_pydevd_bundle._debug_adapter.pydevd_schema', '_pydevd_bundle.pydevd_reload', '_pydev_bundle.fsnotify', '_pydevd_bundle.pydevd_console', '_pydevd_bundle.pydevd_comm', '_pydevd_bundle.pydevd_net_command_factory_json', '_pydevd_bundle.pydevd_collect_bytecode_info', '_pydevd_bundle.pydevd_api', '_pydevd_bundle.pydevd_json_debug_options', '_pydevd_bundle.pydevd_process_net_command_json', '_pydevd_bundle.pydevd_traceproperty', '_pydevd_bundle.pydevd_process_net_command', '_pydevd_bundle.pydevd_suspended_frames', '_pydevd_bundle.pydevd_trace_api', 'pydevd_plugins.django_debug', 'pydevd_plugins.jinja2_debug', '_pydevd_bundle.pydevd_plugin_utils', 'pydevd_plugins.extensions.types', 'pydevd_plugins.extensions.types.pydevd_helpers', 'pydevd_plugins.extensions.types.pydevd_plugin_numpy_types', 'pydevd_plugins.extensions.types.pydevd_plugins_django_form_str', 'pydevd', 'debugpy._vendored.force_pydevd', 'debugpy.server', 'debugpy.adapter', 'debugpy.common.timestamp', 'debugpy.common.util', 'debugpy.common.log', 'debugpy.common.sockets', 'debugpy.server.api', 'ipykernel.debugger', 'ipykernel.ipkernel', 'ipykernel.parentpoller', 'ipykernel.kernelapp', 'win32api', 'win32security', 'ntsecuritycon', 'faulthandler', 'IPython.core.completerlib', 'storemagic', 'pyforest._importable', 'pyforest.user_specific_imports', 'pyforest._imports', 'pyforest.utils', 'pyforest', 'logging.config', 'pythonjsonlogger', 'pythonjsonlogger.jsonlogger', 'daiquiri.types', 'daiquiri.formatter', 'daiquiri.handlers', 'daiquiri.output', 'daiquiri', 'jupyter_require.__about__', 'csscompressor', 'jupyter_require.core', 'jupyter_require.notebook', 'jupyter_nbutils.__about__', 'jupyter_nbutils.config', 'jupyter_nbutils.utils', 'jupyter_nbutils', 'jupyter_require.magic', 'jupyter_require', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'mkl._mklinit', 'mkl._py_mkl_service', 'mkl', 'numpy._distributor_init', 'numpy.core._multiarray_umath', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.compat', 'numpy.core.overrides', 'numpy.core.multiarray', 'numpy.core.umath', 'numpy.core._string_helpers', 'numpy.core._dtype', 'numpy.core._type_aliases', 'numpy.core.numerictypes', 'numpy.core._asarray', 'numpy.core._exceptions', 'numpy.core._methods', 'numpy.core.fromnumeric', 'numpy.core.shape_base', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core.numeric', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._multiarray_tests', 'numpy.core._add_newdocs', 'numpy.core._add_newdocs_scalars', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'numpy._pytesttester', 'numpy.core', 'numpy.lib.mixins', 'numpy.lib.ufunclike', 'numpy.lib.type_check', 'numpy.lib.scimath', 'numpy.lib.twodim_base', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.linalg.linalg', 'numpy.linalg', 'numpy.matrixlib.defmatrix', 'numpy.matrixlib', 'numpy.lib.histograms', 'numpy.lib.function_base', 'numpy.lib.stride_tricks', 'numpy.lib.index_tricks', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.npyio', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.lib', 'numpy.fft._pocketfft_internal', 'numpy.fft._pocketfft', 'numpy.fft.helper', 'numpy.fft', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.polynomial', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.polynomial', 'numpy.random._common', 'secrets', 'numpy.random.bit_generator', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random.mtrand', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.random._pickle', 'numpy.random', 'numpy.ctypeslib', 'numpy.ma.core', 'numpy.ma.extras', 'numpy.ma', 'numpy', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'pytz', 'mmap', 'pandas._typing', 'pandas._libs.tslibs.dtypes', 'pandas._libs.tslibs.base', 'pandas._libs.tslibs.np_datetime', 'pandas._libs.tslibs.nattype', 'pandas._libs.tslibs.timezones', 'pandas._libs.tslibs.ccalendar', 'pandas._libs.tslibs.tzconversion', 'pandas._config.config', 'pandas._config.dates', 'pandas._config.display', 'pandas._config', 'pandas._config.localization', 'pandas._libs.tslibs.strptime', 'pandas._libs.tslibs.fields', 'pandas._libs.tslibs.timedeltas', 'pandas._libs.tslibs.timestamps', 'dateutil.easter', 'pandas._libs.properties', 'pandas._libs.tslibs.offsets', 'pandas._libs.tslibs.parsing', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs.vectorized', 'pandas._libs.tslibs', 'pandas._libs.ops_dispatch', 'pandas._libs.missing', 'pandas._libs.hashtable', 'pandas._libs.algos', 'pandas._libs.interval', 'pandas._libs', 'pandas.util._decorators', 'pandas.core', 'pandas.core.util', 'pandas._libs.tslib', 'pandas._libs.lib', 'pandas._libs.hashing', 'pandas.core.dtypes', 'pandas.errors', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.base', 'pandas.core.dtypes.inference', 'pandas.core.dtypes.dtypes', 'pandas.core.dtypes.common', 'pandas.core.util.hashing', 'pandas.util', 'pandas.util.version', 'pandas.compat.numpy', 'pyarrow._generated_version', '_cython_0_29_28', 'cloudpickle.compat', 'typing_extensions', 'cloudpickle.cloudpickle', 'cloudpickle.cloudpickle_fast', 'cloudpickle', 'pyarrow.util', 'pyarrow.lib', 'pyarrow._hdfsio', 'pyarrow.filesystem', 'pyarrow.hdfs', 'pyarrow.ipc', 'pyarrow.serialization', 'pyarrow.types', 'pyarrow', 'pandas.compat.pyarrow', 'pandas.compat', 'pandas.core.config_init', 'pandas.core.dtypes.missing', 'pandas.util._exceptions', 'pandas.util._validators', 'pandas.core.dtypes.cast', 'pandas.core.array_algos', 'pandas.core.common', 'pandas.core.construction', 'pandas.core.array_algos.take', 'pandas.core.indexers', 'pandas.core.algorithms', 'pandas.compat.numpy.function', 'pandas.compat._optional', 'pandas.core.missing', 'pandas.core.roperator', 'pandas._libs.ops', 'pandas.core.computation', 'numexpr.__config__', 'numexpr.interpreter', 'numexpr.expressions', 'numexpr.utils', 'numexpr.necompiler', 'numexpr.version', 'numexpr', 'pandas.core.computation.check', 'pandas.core.computation.expressions', 'pandas.core.ops.missing', 'pandas.core.ops.dispatch', 'pandas.core.ops.invalid', 'pandas.core.ops.array_ops', 'pandas.core.ops.common', 'pandas.core.ops.docstrings', 'pandas.core.ops.mask_ops', 'pandas.core.ops.methods', 'pandas.core.ops', 'pandas.core.sorting', 'pandas.core.arrays.base', 'bottleneck.reduce', 'bottleneck.nonreduce', 'bottleneck.nonreduce_axis', 'bottleneck.move', 'bottleneck.slow.reduce', 'bottleneck.slow.nonreduce', 'bottleneck.slow.nonreduce_axis', 'bottleneck.slow.move', 'bottleneck.slow', 'bottleneck.benchmark', 'bottleneck.benchmark.autotimeit', 'bottleneck.benchmark.bench', 'bottleneck.benchmark.bench_detailed', 'bottleneck.tests', 'bottleneck.tests.util', 'bottleneck._pytesttester', 'bottleneck._version', 'bottleneck', 'pandas.core.nanops', 'pandas.core.array_algos.masked_reductions', 'pandas.core.arraylike', 'pandas.core.arrays.masked', 'pandas.core.arrays.boolean', 'pandas._libs.arrays', 'pandas.core.accessor', 'pandas.core.array_algos.transforms', 'pandas.core.arrays._mixins', 'pandas.core.base', 'pandas.core.strings.accessor', 'pandas.core.strings.base', 'pandas.core.strings', 'pandas.core.strings.object_array', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.console', 'pandas.core.arrays.categorical', 'pandas.tseries', 'pandas.tseries.frequencies', 'pandas.core.arrays.datetimelike', 'pandas.core.arrays._ranges', 'pandas.core.arrays.numeric', 'pandas.core.tools', 'pandas.core.tools.numeric', 'pandas.core.arrays.integer', 'pandas.tseries.offsets', 'pandas.core.arrays.datetimes', 'pandas.core.arrays.floating', 'pandas.core.indexes', 'pandas._libs.index', 'pandas._libs.join', 'pandas._libs.sparse', 'pandas.core.arrays.sparse.dtype', 'pandas.io.formats.printing', 'pandas.core.arrays.sparse.array', 'pandas.core.arrays.sparse.accessor', 'pandas.core.arrays.sparse', 'pandas.core.dtypes.concat', 'pandas.core.array_algos.putmask', 'pandas.core.indexes.frozen', 'pandas.core.indexes.base', 'pandas.core.arrays.interval', 'pandas.core.arrays.numpy_', 'pandas.core.arrays.period', 'pandas.core.arrays.string_', 'pyarrow._compute', 'pyarrow._compute_docstrings', 'pyarrow.vendored', 'pyarrow.vendored.docscrape', 'pyarrow.compute', 'pandas.core.arrays.string_arrow', 'pandas.core.arrays.timedeltas', 'pandas.core.arrays', 'pandas.core.flags', 'pandas._libs.reduction', 'pandas.core.indexes.extension', 'pandas.core.indexes.category', 'pandas.core.indexes.numeric', 'pandas.core.tools.timedeltas', 'pandas.core.indexes.datetimelike', 'pandas.core.tools.times', 'pandas.core.indexes.datetimes', 'pandas.core.indexes.multi', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.interval', 'pandas.core.indexes.period', 'pandas.core.indexes.range', 'pandas.core.indexes.api', 'pandas.core.aggregation', 'pandas.core.apply', 'pandas._libs.indexing', 'pandas.core.indexing', 'pandas.core.reshape', 'pandas._libs.internals', 'pandas._libs.writers', 'pandas.core.array_algos.quantile', 'pandas.core.array_algos.replace', 'pandas.core.internals.blocks', 'pandas.core.internals.api', 'pandas.core.internals.base', 'pandas.core.internals.array_manager', 'pandas.core.internals.ops', 'pandas.core.internals.managers', 'pandas.core.internals.concat', 'pandas.core.internals', 'pandas.core.reshape.concat', 'pandas.io.common', 'pandas.io.formats.format', 'pandas.core.describe', 'pandas.core.internals.construction', 'pandas.core.shared_docs', 'pandas._libs.window', 'pandas._libs.window.aggregations', 'pandas.core.util.numba_', 'pandas.core.window.common', 'pandas.core.window.doc', 'pandas._libs.window.indexers', 'pandas.core.window.indexers', 'pandas.core.window.numba_', 'pandas.core.window.online', 'pandas.core.window.rolling', 'pandas.core.window.ewm', 'pandas.core.window.expanding', 'pandas.core.window', 'pandas.core.generic', 'pandas.core.reshape.util', 'pandas.core.reshape.melt', 'pandas._libs.reshape', 'pandas.core.indexes.accessors', 'pandas.arrays', 'pandas.core.tools.datetimes', 'pandas.plotting._core', 'pandas.plotting._misc', 'pandas.plotting', 'pandas.core.series', 'pandas.io.formats.info', 'pandas.core.frame', 'pandas.core.groupby.base', 'pandas._libs.groupby', 'pandas.core.groupby.numba_', 'pandas.core.groupby.categorical', 'pandas.core.groupby.grouper', 'pandas.core.groupby.ops', 'pandas.core.groupby.groupby', 'pandas.core.groupby.generic', 'pandas.core.groupby', 'pandas.core.api', 'pandas.tseries.api', 'pandas.core.computation.common', 'pandas.core.computation.align', 'pandas.compat.chainmap', 'pandas.core.computation.scope', 'pandas.core.computation.ops', 'pandas.core.computation.parsing', 'pandas.core.computation.expr', 'pandas.core.computation.engines', 'pandas.core.computation.eval', 'pandas.core.computation.api', 'pandas.core.reshape.merge', 'pandas.core.reshape.pivot', 'pandas.core.reshape.reshape', 'pandas.core.reshape.tile', 'pandas.core.reshape.api', 'pandas.api.extensions', 'pandas.api.indexers', 'pandas.core.dtypes.api', 'pandas.api.types', 'pandas.api', 'pandas.util._print_versions', 'pandas.io.clipboards', 'pandas._libs.parsers', 'pandas.io.excel._util', 'pandas.io.date_converters', 'pandas.io.parsers.base_parser', 'pandas.io.parsers.c_parser_wrapper', 'pandas.io.parsers.python_parser', 'pandas.io.parsers.readers', 'pandas.io.parsers', 'pandas.io.excel._odfreader', 'pandas.io.excel._openpyxl', 'pandas.io.excel._pyxlsb', 'pandas.io.excel._xlrd', 'pandas.io.excel._base', 'pandas._libs.json', 'pandas.io.formats._color_data', 'pandas.io.formats.css', 'pandas.io.formats.excel', 'pandas.io.excel._odswriter', 'pandas.io.excel._xlsxwriter', 'pandas.io.excel._xlwt', 'pandas.io.excel', 'pandas.io.feather_format', 'pandas.io.gbq', 'pandas.io.html', 'pandas.io.json._normalize', 'pandas.io.json._table_schema', 'pandas.io.json._json', 'pandas.io.json', 'pandas.io.orc', 'pandas.io.parquet', 'pandas.compat.pickle_compat', 'pandas.io.pickle', 'pandas.core.computation.pytables', 'pandas.io.pytables', 'pandas.io.sas.sasreader', 'pandas.io.sas', 'pandas.io.spss', 'pandas.io.sql', 'pandas.io.stata', 'pandas.io.xml', 'pandas.io.api', 'pandas.util._tester', 'pandas._testing._random', 'pandas._testing.contexts', 'pandas._testing._io', 'pandas._testing._warnings', 'cmath', 'pandas._libs.testing', 'pandas._testing.asserters', 'pandas._testing.compat', 'pandas._testing', 'pandas.testing', 'pandas._version', 'pandas', 'matplotlib', 'matplotlib._api.deprecation', 'matplotlib._api', 'matplotlib._c_internal_utils', 'matplotlib.cbook', 'matplotlib.docstring', 'PIL._version', 'PIL', 'defusedxml.common', 'defusedxml', 'xml.etree', 'xml.etree.ElementPath', '_elementtree', 'xml.etree.ElementTree', 'defusedxml.ElementTree', 'PIL.ImageMode', 'PIL.TiffTags', 'PIL._binary', 'PIL._util', 'PIL._imaging', 'cffi.lock', 'cffi.error', 'cffi.model', 'cffi.api', 'cffi', 'PIL.Image', 'matplotlib._animation_data', 'matplotlib.animation', 'PIL.ImageChops', 'PIL.ImageFile', 'PIL.GimpGradientFile', 'PIL.GimpPaletteFile', 'PIL.ImageColor', 'PIL.PaletteFile', 'PIL.ImagePalette', 'PIL.ImageSequence', 'PIL.PngImagePlugin', 'matplotlib._path', 'matplotlib.bezier', 'matplotlib.path', 'matplotlib.transforms', 'matplotlib.ticker', 'matplotlib.scale', 'matplotlib._color_data', 'matplotlib.colors', 'pyparsing.util', 'pyparsing.unicode', 'pyparsing.exceptions', 'pyparsing.actions', 'pyparsing.results', 'pyparsing.core', 'pyparsing.helpers', 'pyparsing.testing', 'pyparsing.common', 'pyparsing', 'matplotlib.fontconfig_pattern', 'matplotlib._enums', 'cycler', 'matplotlib.rcsetup', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver', 'dateutil.rrule', 'matplotlib.units', 'matplotlib.dates']
2023-02-22 16:52:16,525 [22652] DEBUG    matplotlib:224: [JupyterRequire] CACHEDIR=C:\Users\sunny\.matplotlib
2023-02-22 16:52:16,536 [22652] DEBUG    matplotlib.font_manager:1439: [JupyterRequire] Using fontManager instance from C:\Users\sunny\.matplotlib\fontlist-v330.json
2023-02-22 16:52:16,802 [22652] DEBUG    matplotlib.pyplot:290: [JupyterRequire] Loaded backend module://matplotlib_inline.backend_inline version unknown.
2023-02-22 16:52:16,806 [22652] DEBUG    matplotlib.pyplot:290: [JupyterRequire] Loaded backend module://matplotlib_inline.backend_inline version unknown.
2023-02-22 16:52:23,346 [22652] DEBUG    tensorflow:32: [JupyterRequire] Falling back to TensorFlow client; we recommended you install the Cloud TPU client directly with pip install cloud-tpu-client.
2023-02-22 16:52:24,136 [22652] DEBUG    h5py._conv:47: [JupyterRequire] Creating converter from 7 to 5
2023-02-22 16:52:24,136 [22652] DEBUG    h5py._conv:47: [JupyterRequire] Creating converter from 5 to 7
2023-02-22 16:52:24,136 [22652] DEBUG    h5py._conv:47: [JupyterRequire] Creating converter from 7 to 5
2023-02-22 16:52:24,136 [22652] DEBUG    h5py._conv:47: [JupyterRequire] Creating converter from 5 to 7
2023-02-22 16:52:49,646 [22652] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\pandas\core\frame.py
2023-02-22 16:52:49,887 [22652] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\jedi\third_party\typeshed\stdlib\2and3\builtins.pyi
2023-02-22 16:52:49,904 [22652] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\pandas\__init__.py
2023-02-22 16:52:49,912 [22652] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\pandas\core\__init__.py
2023-02-22 16:52:50,001 [22652] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\pandas\core\generic.py
2023-02-22 16:52:50,044 [22652] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\pandas\core\base.py
2023-02-22 16:52:50,070 [22652] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\pandas\core\accessor.py
2023-02-22 16:52:50,122 [22652] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\pandas\core\indexing.py
2023-02-22 16:52:50,169 [22652] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\pandas\core\arraylike.py
2023-02-22 16:52:51,749 [22652] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-22 16:52:51,750 [22652] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 5; new: 5
2023-02-22 16:52:51,751 [22652] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:4] new[1:4]
2023-02-22 16:52:51,752 [22652] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 4 in part parser)
2023-02-22 16:52:51,752 [22652] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 2 to 5 (to 4 in part parser)
2023-02-22 16:52:51,752 [22652] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[5:5] new[5:5]
2023-02-22 16:52:51,753 [22652] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-22 17:23:01,766 [19608] INFO     numexpr.utils:145: [JupyterRequire] Note: NumExpr detected 12 cores but "NUMEXPR_MAX_THREADS" not set, so enforcing safe limit of 8.
2023-02-22 17:23:01,768 [19608] INFO     numexpr.utils:157: [JupyterRequire] NumExpr defaulting to 8 threads.
2023-02-22 17:23:02,602 [19608] DEBUG    matplotlib:224: [JupyterRequire] matplotlib data path: C:\Users\sunny\anaconda3\lib\site-packages\matplotlib\mpl-data
2023-02-22 17:23:02,613 [19608] DEBUG    matplotlib:224: [JupyterRequire] CONFIGDIR=C:\Users\sunny\.matplotlib
2023-02-22 17:23:02,616 [19608] DEBUG    matplotlib:1394: [JupyterRequire] matplotlib version 3.4.3
2023-02-22 17:23:02,617 [19608] DEBUG    matplotlib:1395: [JupyterRequire] interactive is False
2023-02-22 17:23:02,617 [19608] DEBUG    matplotlib:1396: [JupyterRequire] platform is win32
2023-02-22 17:23:02,617 [19608] DEBUG    matplotlib:1397: [JupyterRequire] loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_thread', '_warnings', '_weakref', '_io', 'marshal', 'nt', 'winreg', '_frozen_importlib_external', 'time', 'zipimport', '_codecs', 'codecs', 'encodings.aliases', 'encodings', 'encodings.utf_8', 'encodings.cp1252', '_signal', 'encodings.latin_1', '_abc', 'abc', 'io', '__main__', '_stat', 'stat', '_collections_abc', 'genericpath', 'ntpath', 'os.path', 'os', '_sitebuiltins', '_locale', '_bootlocale', '_distutils_hack', 'types', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib', 'importlib.machinery', '_heapq', 'heapq', 'itertools', 'keyword', '_operator', 'operator', 'reprlib', '_collections', 'collections', 'collections.abc', '_functools', 'functools', 'contextlib', 'enum', '_sre', 'sre_constants', 'sre_parse', 'sre_compile', 'copyreg', 're', 'typing.io', 'typing.re', 'typing', 'importlib.abc', 'importlib.util', 'google', 'google.cloud', 'google.logging', 'mpl_toolkits', 'sphinxcontrib', 'zope', 'site', '_weakrefset', 'weakref', 'pkgutil', 'runpy', 'ipykernel._version', '_json', 'json.scanner', 'json.decoder', 'json.encoder', 'json', 'errno', 'signal', 'threading', 'msvcrt', '_winapi', 'subprocess', 'jupyter_client._version', 'posixpath', 'fnmatch', 'glob', '_socket', 'math', 'select', 'selectors', 'socket', 'zlib', '_compression', '_bz2', 'bz2', '_lzma', 'lzma', 'shutil', '_bisect', 'bisect', '_random', '_sha512', 'random', 'tempfile', 'getpass', 'platform', 'zmq.libzmq', 'zmq.backend.select', 'cython_runtime', 'zmq.backend.cython.constants', '_cython_0_29_24', 'zmq.backend.cython.error', 'zmq.error', 'zmq.backend.cython.message', 'zmq.backend.cython.context', 'copy', '_struct', 'struct', '_compat_pickle', '_pickle', 'pickle', 'zmq.backend.cython.socket', 'zmq.backend.cython.utils', 'zmq.backend.cython._poll', 'zmq.backend.cython._version', 'zmq.backend.cython._device', 'zmq.backend.cython._proxy_steerable', 'zmq.backend.cython', 'zmq.backend', 'zmq.utils', 'zmq.utils.constant_names', 'zmq.sugar.constants', 'atexit', 'zmq.sugar.attrsettr', 'zmq.sugar.poll', 'zmq.utils.jsonapi', 'zmq.utils.strtypes', 'zmq.sugar.socket', 'zmq.sugar.context', 'zmq.sugar.frame', 'zmq.sugar.tracker', 'zmq.sugar.version', 'zmq.sugar.stopwatch', 'zmq.sugar', 'zmq', '_ast', 'ast', '_opcode', 'opcode', 'dis', 'token', 'tokenize', 'linecache', 'inspect', 'traitlets.utils', 'traitlets.utils.getargspec', 'traitlets.utils.importstring', 'traitlets.utils.sentinel', 'traitlets.utils.bunch', 'traitlets.utils.descriptions', 'traitlets.traitlets', 'traitlets.utils.decorators', 'traitlets._version', 'traitlets', 'traceback', '_string', 'string', 'logging', 'pprint', 'gettext', 'argparse', 'traitlets.config.loader', 'textwrap', 'traitlets.utils.text', 'traitlets.config.configurable', 'traitlets.config.application', 'traitlets.config', 'jupyter_client.localinterfaces', 'jupyter_core.version', 'jupyter_core', 'urllib', 'urllib.parse', 'pathlib', 'jupyter_core.paths', 'jupyter_client.utils', 'jupyter_client.connect', 'traitlets.log', 'jupyter_client.launcher', 'concurrent', 'concurrent.futures._base', 'concurrent.futures', '_ssl', 'binascii', 'base64', 'ssl', 'asyncio.constants', 'asyncio.format_helpers', 'asyncio.base_futures', 'asyncio.log', 'asyncio.coroutines', '_contextvars', 'contextvars', 'asyncio.exceptions', 'asyncio.base_tasks', '_asyncio', 'asyncio.events', 'asyncio.futures', 'asyncio.protocols', 'asyncio.transports', 'asyncio.sslproto', 'asyncio.locks', 'asyncio.tasks', 'asyncio.staggered', 'asyncio.trsock', 'asyncio.base_events', 'asyncio.runners', 'asyncio.queues', 'asyncio.streams', 'asyncio.subprocess', 'asyncio.threads', '_overlapped', 'asyncio.base_subprocess', 'asyncio.proactor_events', 'asyncio.selector_events', 'asyncio.windows_utils', 'asyncio.windows_events', 'asyncio', 'jupyter_client.channelsabc', 'jupyter_client.channels', 'jupyter_client.clientabc', 'jupyter_client.client', 'jupyter_client.kernelspec', 'jupyter_client.managerabc', 'jupyter_client.manager', '_queue', 'queue', 'jupyter_client.blocking.channels', 'jupyter_client.blocking.client', 'jupyter_client.blocking', 'zmq._future', 'zmq.asyncio', 'jupyter_client.asynchronous.channels', 'jupyter_client.asynchronous.client', 'jupyter_client.asynchronous', '_uuid', 'uuid', 'jupyter_client.multikernelmanager', 'jupyter_client', 'ipykernel.connect', 'ipykernel', 'tornado', '_datetime', 'datetime', 'numbers', 'logging.handlers', 'html.entities', 'html', 'array', 'tornado.speedups', 'tornado.util', 'tornado.escape', 'colorama.ansi', '_ctypes', 'ctypes._endian', 'ctypes', 'ctypes.wintypes', 'colorama.win32', 'colorama.winterm', 'colorama.ansitowin32', 'colorama.initialise', 'colorama', 'tornado.log', 'tornado.concurrent', 'tornado.ioloop', '__future__', 'tornado.platform', 'tornado.gen', 'tornado.platform.asyncio', 'zmq.eventloop.ioloop', 'zmq.eventloop', 'zmq.eventloop.zmqstream', 'IPython.core', 'IPython.core.getipython', 'IPython.core.release', 'sysconfig', 'pydoc', 'bdb', 'IPython.utils', 'IPython.utils.ipstruct', 'IPython.utils.coloransi', 'pygments', 'IPython.utils.colorable', 'IPython.utils.PyColorize', 'locale', 'IPython.utils.encoding', 'IPython.utils.py3compat', 'IPython.core.excolors', 'IPython.testing', 'IPython.testing.skipdoctest', 'cmd', 'codeop', 'code', 'pdb', 'IPython.core.debugger', 'IPython.core.display_trap', 'shlex', 'IPython.utils._process_common', 'IPython.utils._process_win32', 'IPython.utils.process', 'IPython.utils.decorators', 'IPython.utils.path', 'IPython.utils.data', 'IPython.utils.terminal', 'IPython.core.ultratb', 'IPython.utils._sysinfo', 'IPython.utils.sysinfo', 'IPython.core.crashhandler', 'IPython.utils.importstring', 'IPython.paths', 'IPython.core.profiledir', 'IPython.core.application', 'IPython.terminal', '_hashlib', '_blake2', 'hashlib', 'IPython.core.compilerop', 'IPython.core.error', 'IPython.utils.text', 'IPython.core.magic_arguments', 'getopt', 'mimetypes', 'IPython.core.display', 'IPython.core.page', 'IPython.lib.security', 'IPython.lib', 'IPython.lib.pretty', 'IPython.utils.openpy', 'IPython.utils.dir2', 'IPython.utils.wildcard', 'pygments.lexers._mapping', 'pygments.modeline', 'pygments.plugin', 'pygments.util', 'pygments.lexers', 'pygments.filter', 'pygments.token', 'pygments.filters', 'pygments.regexopt', 'pygments.lexer', 'pygments.unistring', 'pygments.lexers.python', 'pygments.formatters._mapping', 'pygments.formatters', 'pygments.styles', 'pygments.formatter', 'pygments.formatters.html', 'IPython.core.oinspect', 'IPython.core.inputtransformer2', 'decorator', 'IPython.core.magic', 'pickleshare', 'IPython.core.autocall', 'IPython.core.macro', 'IPython.core.splitinput', 'IPython.core.prefilter', 'IPython.core.alias', 'IPython.core.builtin_trap', 'backcall.backcall', 'backcall', 'IPython.core.events', 'IPython.core.displayhook', 'IPython.core.displaypub', 'IPython.core.extensions', 'IPython.utils.sentinel', 'IPython.core.formatters', '_sqlite3', 'sqlite3.dbapi2', 'sqlite3', 'IPython.core.history', 'IPython.core.logger', 'IPython.core.payload', 'IPython.core.usage', 'IPython.lib.display', 'IPython.display', 'IPython.utils.capture', 'IPython.utils.io', 'IPython.core.hooks', 'IPython.utils.strdispatch', 'IPython.utils.syspathcontext', 'IPython.utils.tempdir', 'IPython.utils.contexts', 'IPython.core.async_helpers', 'IPython.core.interactiveshell', 'prompt_toolkit.application.current', 'prompt_toolkit.eventloop.utils', 'prompt_toolkit.eventloop.async_generator', 'wcwidth.table_wide', 'wcwidth.table_zero', 'wcwidth.unicode_versions', 'wcwidth.wcwidth', 'wcwidth', 'prompt_toolkit.utils', 'prompt_toolkit.eventloop.inputhook', 'prompt_toolkit.eventloop', 'prompt_toolkit.application.run_in_terminal', 'prompt_toolkit.selection', 'prompt_toolkit.clipboard.base', 'prompt_toolkit.clipboard.in_memory', 'prompt_toolkit.clipboard', 'prompt_toolkit.cache', 'prompt_toolkit.enums', 'prompt_toolkit.filters.base', 'prompt_toolkit.filters.app', 'prompt_toolkit.filters.cli', 'prompt_toolkit.filters.utils', 'prompt_toolkit.filters', 'prompt_toolkit.document', 'prompt_toolkit.auto_suggest', 'prompt_toolkit.data_structures', 'prompt_toolkit.styles.base', 'prompt_toolkit.styles.named_colors', 'prompt_toolkit.styles.style', 'prompt_toolkit.styles.defaults', 'prompt_toolkit.styles.pygments', 'colorsys', 'prompt_toolkit.styles.style_transformation', 'prompt_toolkit.styles', 'prompt_toolkit.output.color_depth', 'prompt_toolkit.output.base', 'prompt_toolkit.output.defaults', 'prompt_toolkit.output', 'prompt_toolkit.output.vt100', 'prompt_toolkit.mouse_events', 'prompt_toolkit.formatted_text.base', 'prompt_toolkit.formatted_text.ansi', 'xml', 'xml.dom.domreg', 'xml.dom', 'xml.dom.minicompat', 'xml.dom.NodeFilter', 'xml.dom.xmlbuilder', 'xml.dom.minidom', 'prompt_toolkit.formatted_text.html', 'prompt_toolkit.formatted_text.pygments', 'prompt_toolkit.formatted_text.utils', 'prompt_toolkit.formatted_text', 'prompt_toolkit.completion.base', 'prompt_toolkit.completion.deduplicate', 'prompt_toolkit.completion.filesystem', 'prompt_toolkit.completion.word_completer', 'prompt_toolkit.completion.fuzzy_completer', 'prompt_toolkit.completion.nested', 'prompt_toolkit.completion', 'prompt_toolkit.history', 'prompt_toolkit.keys', 'prompt_toolkit.key_binding.key_bindings', 'prompt_toolkit.key_binding.key_processor', 'prompt_toolkit.key_binding', 'prompt_toolkit.key_binding.vi_state', 'prompt_toolkit.search', 'prompt_toolkit.validation', 'prompt_toolkit.buffer', 'prompt_toolkit.input.base', 'prompt_toolkit.input.defaults', 'prompt_toolkit.input', 'prompt_toolkit.input.typeahead', 'prompt_toolkit.key_binding.bindings', 'prompt_toolkit.key_binding.bindings.scroll', 'prompt_toolkit.key_binding.bindings.page_navigation', 'prompt_toolkit.lexers.base', 'prompt_toolkit.lexers.pygments', 'prompt_toolkit.lexers', 'prompt_toolkit.layout.utils', 'prompt_toolkit.layout.processors', 'prompt_toolkit.layout.controls', 'prompt_toolkit.layout.dimension', 'prompt_toolkit.layout.margins', 'prompt_toolkit.layout.mouse_handlers', 'prompt_toolkit.layout.screen', 'prompt_toolkit.layout.containers', 'prompt_toolkit.layout.layout', 'prompt_toolkit.layout.menus', 'prompt_toolkit.layout.scrollable_pane', 'prompt_toolkit.layout', 'prompt_toolkit.key_binding.bindings.completion', 'prompt_toolkit.key_binding.bindings.named_commands', 'prompt_toolkit.key_binding.bindings.basic', 'prompt_toolkit.key_binding.bindings.cpr', 'prompt_toolkit.key_binding.bindings.emacs', 'prompt_toolkit.key_binding.bindings.mouse', 'prompt_toolkit.input.ansi_escape_sequences', 'prompt_toolkit.input.vt100_parser', 'prompt_toolkit.key_binding.digraphs', 'prompt_toolkit.key_binding.bindings.vi', 'prompt_toolkit.key_binding.defaults', 'prompt_toolkit.key_binding.emacs_state', 'prompt_toolkit.layout.dummy', 'prompt_toolkit.renderer', 'prompt_toolkit.application.application', 'prompt_toolkit.application.dummy', 'prompt_toolkit.application', 'prompt_toolkit.key_binding.bindings.focus', 'prompt_toolkit.widgets.toolbars', 'prompt_toolkit.widgets.base', 'prompt_toolkit.widgets.dialogs', 'prompt_toolkit.widgets.menus', 'prompt_toolkit.widgets', 'prompt_toolkit.shortcuts.dialogs', 'prompt_toolkit.shortcuts.progress_bar.formatters', 'prompt_toolkit.shortcuts.progress_bar.base', 'prompt_toolkit.shortcuts.progress_bar', 'prompt_toolkit.key_binding.bindings.auto_suggest', 'prompt_toolkit.key_binding.bindings.open_in_editor', 'prompt_toolkit.shortcuts.prompt', 'prompt_toolkit.shortcuts.utils', 'prompt_toolkit.shortcuts', 'prompt_toolkit', 'prompt_toolkit.patch_stdout', 'pygments.style', 'unicodedata', 'IPython.core.latex_symbols', 'IPython.utils.generics', 'parso.utils', 'parso.tree', 'parso.python', 'parso.python.token', 'parso.python.tokenize', 'parso.pgen2.grammar_parser', 'parso.pgen2.generator', 'parso.pgen2', 'parso.parser', 'parso._compatibility', 'difflib', 'parso.python.prefix', 'parso.python.tree', 'parso.python.parser', 'parso.python.diff', 'gc', 'parso.cache', 'parso.normalizer', 'parso.python.errors', 'parso.python.pep8', 'parso.file_io', 'parso.grammar', 'parso', 'jedi._compatibility', 'jedi.parser_utils', 'jedi.debug', 'jedi.settings', 'jedi.cache', 'jedi.file_io', 'jedi.inference.cache', 'jedi.inference.helpers', 'jedi.inference.utils', 'jedi.inference.base_value', 'jedi.inference.sys_path', 'jedi.inference.recursion', 'jedi.inference.flow_analysis', 'jedi.common', 'jedi.inference.lazy_value', 'jedi.inference.docstrings', 'jedi.plugins', 'jedi.inference.names', 'jedi.inference.filters', 'jedi.inference.compiled.getattr_static', 'jedi.inference.compiled.access', 'jedi.inference.signature', 'jedi.inference.context', 'jedi.inference.compiled.value', 'jedi.inference.compiled', 'jedi.inference.analysis', 'jedi.inference.gradual', 'jedi.inference.value.module', 'jedi.inference.value.dynamic_arrays', 'jedi.inference.value.iterable', 'jedi.inference.arguments', 'jedi.inference.parser_cache', 'jedi.inference.gradual.generics', 'jedi.inference.value.function', 'jedi.inference.value.klass', 'jedi.inference.value.instance', 'jedi.inference.value', 'jedi.inference.gradual.base', 'jedi.inference.gradual.type_var', 'jedi.inference.gradual.typing', 'jedi.inference.gradual.stub_value', 'jedi.inference.gradual.typeshed', 'jedi.inference.compiled.subprocess.functions', 'jedi.api.exceptions', 'jedi.inference.compiled.subprocess', 'jedi.inference.imports', 'jedi.inference.param', 'jedi.inference.gradual.annotation', 'jedi.inference.value.decorator', 'jedi.inference.syntax_tree', 'jedi.inference', 'jedi.inference.gradual.conversion', 'jedi.inference.compiled.mixed', 'pydoc_data', 'pydoc_data.topics', 'jedi.api.keywords', 'jedi.api.completion_cache', 'jedi.api.helpers', 'jedi.api.classes', 'jedi.api.interpreter', 'jedi.api.strings', 'jedi.api.file_name', 'jedi.api.completion', 'filecmp', 'jedi.api.environment', 'jedi.inference.references', 'jedi.api.project', 'jedi.api.errors', 'jedi.api.refactoring', 'jedi.api.refactoring.extract', 'jedi.inference.gradual.utils', 'jedi.api', 'jedi.plugins.stdlib', 'jedi.plugins.flask', 'jedi.plugins.pytest', 'jedi.plugins.django', 'jedi.plugins.registry', 'jedi', 'IPython.core.completer', 'IPython.terminal.ptutils', 'IPython.lib.clipboard', 'IPython.terminal.shortcuts', 'IPython.terminal.debugger', 'IPython.terminal.magics', 'IPython.terminal.pt_inputhooks', 'IPython.terminal.prompts', 'IPython.terminal.interactiveshell', 'IPython.core.magics.auto', 'IPython.core.magics.basic', 'email', 'http', 'email.errors', 'email.quoprimime', 'email.base64mime', 'quopri', 'email.encoders', 'email.charset', 'email.header', 'calendar', 'email._parseaddr', 'email.utils', 'email._policybase', 'email.feedparser', 'email.parser', 'uu', 'email._encoded_words', 'email.iterators', 'email.message', 'http.client', 'urllib.response', 'urllib.error', 'nturl2path', 'urllib.request', 'IPython.core.magics.code', 'IPython.core.magics.config', 'IPython.core.magics.display', 'timeit', '_lsprof', 'profile', 'cProfile', 'dataclasses', 'pstats', 'IPython.utils.module_paths', 'IPython.utils.timing', 'IPython.core.magics.execution', 'IPython.core.magics.extension', 'IPython.core.magics.history', 'IPython.core.magics.logging', 'IPython.core.magics.namespace', 'IPython.core.magics.osm', 'IPython.core.magics.packaging', 'IPython.core.pylabtools', 'IPython.core.magics.pylab', 'IPython.lib.backgroundjobs', 'IPython.core.magics.script', 'IPython.core.magics', 'IPython.core.shellapp', 'IPython.extensions', 'IPython.extensions.storemagic', 'IPython.terminal.ipapp', 'IPython.terminal.embed', 'IPython.utils.frame', 'IPython', 'ipython_genutils._version', 'ipython_genutils', 'ipython_genutils.encoding', 'ipython_genutils.py3compat', 'ipython_genutils.path', 'imp', 'hmac', 'dateutil._version', 'dateutil', 'six', '_decimal', 'decimal', 'dateutil._common', 'dateutil.relativedelta', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.tz.win', 'dateutil.tz.tz', 'dateutil.tz', 'dateutil.parser._parser', 'dateutil.parser.isoparser', 'dateutil.parser', '_strptime', 'jupyter_client.jsonutil', 'jupyter_client.adapter', 'jupyter_client.session', 'ipykernel.iostream', 'ipykernel.control', 'ipykernel.heartbeat', 'IPython.utils.tokenutil', 'tornado.locks', 'tornado.queues', 'ipykernel.jsonutil', 'ipykernel.kernelbase', 'ipykernel.comm.comm', 'ipykernel.comm.manager', 'ipykernel.comm', 'IPython.core.payloadpage', 'ipykernel.displayhook', 'ipykernel.zmqshell', 'setuptools._distutils', 'distutils.debug', 'distutils.errors', 'distutils.fancy_getopt', 'distutils.dep_util', 'distutils._log', 'distutils.spawn', 'distutils.util', 'distutils.dist', 'distutils.dir_util', 'distutils.file_util', 'zipfile', 'distutils.archive_util', 'distutils.cmd', 'configparser', 'distutils.config', 'distutils.extension', 'distutils.core', '_distutils_hack.override', 'setuptools._deprecation_warning', 'xml.parsers', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'xml.parsers.expat', 'plistlib', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources._vendor.jaraco', 'pkg_resources.extern.jaraco', 'importlib._common', 'importlib.resources', 'pkg_resources._vendor.more_itertools.recipes', 'pkg_resources._vendor.more_itertools.more', 'pkg_resources._vendor.more_itertools', 'pkg_resources.extern.more_itertools', 'pkg_resources.extern.jaraco.functools', 'pkg_resources.extern.jaraco.context', 'pkg_resources.extern.jaraco.text', 'pkg_resources._vendor.platformdirs.api', 'pkg_resources._vendor.platformdirs.version', 'pkg_resources._vendor.platformdirs.windows', 'pkg_resources._vendor.platformdirs', 'pkg_resources.extern.platformdirs', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources._vendor.packaging', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging.version', 'pkg_resources._vendor.packaging._manylinux', 'pkg_resources._vendor.packaging._musllinux', 'pkg_resources.extern.packaging.tags', 'pkg_resources.extern.packaging.utils', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources._vendor.pyparsing.util', 'pkg_resources._vendor.pyparsing.unicode', 'pkg_resources._vendor.pyparsing.exceptions', 'pkg_resources._vendor.pyparsing.actions', 'pkg_resources._vendor.pyparsing.results', 'pkg_resources._vendor.pyparsing.core', 'pkg_resources._vendor.pyparsing.helpers', 'pkg_resources._vendor.pyparsing.testing', 'pkg_resources._vendor.pyparsing.common', 'pkg_resources._vendor.pyparsing', 'pkg_resources.extern.pyparsing', 'pkg_resources.extern.packaging.markers', 'pkg_resources.extern.packaging.requirements', 'encodings.cp437', 'pkg_resources', 'setuptools.version', 'distutils.filelist', 'setuptools.monkey', 'setuptools.extension', 'distutils.log', 'distutils.command', 'setuptools.extern', 'setuptools._vendor', 'setuptools._vendor.packaging.__about__', 'setuptools._vendor.packaging', 'setuptools.extern.packaging', 'setuptools._vendor.ordered_set', 'setuptools.extern.ordered_set', 'setuptools._vendor.more_itertools.recipes', 'setuptools._vendor.more_itertools.more', 'setuptools._vendor.more_itertools', 'setuptools.extern.more_itertools', '_csv', 'csv', 'setuptools._vendor.zipp', 'setuptools._vendor.importlib_metadata._functools', 'setuptools._vendor.importlib_metadata._text', 'setuptools._vendor.importlib_metadata._adapters', 'setuptools._vendor.importlib_metadata._compat', 'setuptools._vendor.importlib_metadata._meta', 'setuptools._vendor.importlib_metadata._collections', 'setuptools._vendor.importlib_metadata._itertools', 'setuptools._vendor.importlib_metadata', 'setuptools.extern.importlib_metadata', 'zipp', 'importlib_metadata._functools', 'importlib_metadata._text', 'importlib_metadata._adapters', 'importlib_metadata._compat', 'importlib_metadata._meta', 'importlib_metadata._collections', 'importlib_metadata._itertools', 'importlib_metadata', 'setuptools._importlib', 'distutils.command.bdist', 'setuptools.command', 'setuptools.windows_support', 'setuptools._vendor.pyparsing.util', 'setuptools._vendor.pyparsing.unicode', 'setuptools._vendor.pyparsing.exceptions', 'setuptools._vendor.pyparsing.actions', 'setuptools._vendor.pyparsing.results', 'setuptools._vendor.pyparsing.core', 'setuptools._vendor.pyparsing.helpers', 'setuptools._vendor.pyparsing.testing', 'setuptools._vendor.pyparsing.common', 'setuptools._vendor.pyparsing', 'setuptools.extern.pyparsing', 'setuptools._vendor.packaging._manylinux', 'setuptools._vendor.packaging._musllinux', 'setuptools.extern.packaging.tags', 'setuptools.extern.packaging._structures', 'setuptools.extern.packaging.version', 'setuptools.extern.packaging.utils', 'setuptools.extern.packaging.specifiers', 'setuptools.extern.packaging.markers', 'setuptools.extern.packaging.requirements', 'setuptools._path', 'setuptools.config.expand', 'setuptools.config.setupcfg', 'setuptools.config', 'setuptools.errors', 'email._header_value_parser', 'email.headerregistry', 'setuptools.config._apply_pyprojecttoml', 'setuptools.config.pyprojecttoml', 'setuptools.discovery', 'setuptools._vendor.jaraco', 'setuptools.extern.jaraco', 'setuptools.extern.jaraco.functools', 'setuptools.extern.jaraco.context', 'setuptools.extern.jaraco.text', 'setuptools._reqs', 'setuptools._itertools', 'setuptools._entry_points', 'setuptools.dist', 'setuptools.py34compat', 'setuptools._imp', 'setuptools.depends', 'setuptools.logging', 'setuptools.msvc', 'unittest.util', 'unittest.result', 'unittest.case', 'unittest.suite', 'unittest.loader', 'unittest.signals', 'unittest.runner', 'unittest.main', 'unittest', 'unittest.mock', 'distutils.ccompiler', 'distutils._msvccompiler', 'setuptools', 'distutils', 'distutils.version', 'ipykernel.eventloops', 'ipykernel.compiler', 'debugpy._version', 'debugpy.common', 'debugpy.common.json', 'debugpy.common.fmt', 'debugpy.common.compat', 'debugpy', 'debugpy._vendored._util', 'debugpy._vendored', '_pydevd_bundle', 'encodings.ascii', 'stringprep', 'encodings.idna', '_pydevd_bundle.pydevd_vm_type', '_pydev_imps', 'xmlrpc', 'gzip', 'xmlrpc.client', 'socketserver', 'http.server', 'xmlrpc.server', '_pydev_imps._pydev_saved_modules', '_pydevd_bundle.pydevd_constants', '_pydev_bundle', '_pydev_runfiles', '_pydevd_frame_eval', 'pydev_ipython', 'pydevd_concurrency_analyser', 'pydevd_plugins', '_pydev_bundle.pydev_log', '_pydev_bundle._pydev_filesystem_encoding', '_pydevd_bundle.pydevd_comm_constants', 'pydevd_file_utils', '_pydev_imps._pydev_execfile', '_pydevd_bundle.pydevd_exec2', '_pydev_bundle.pydev_imports', '_pydev_bundle.pydev_is_thread_alive', '_pydev_bundle.pydev_override', 'pydevd_plugins.extensions', '_pydevd_bundle.pydevd_extension_utils', '_pydevd_bundle.pydevd_frame_utils', '_pydevd_bundle.pydevd_filtering', '_pydevd_bundle.pydevd_io', '_pydevd_bundle.pydevd_utils', '_pydev_bundle._pydev_tipper_common', '_pydev_bundle._pydev_imports_tipper', '_pydev_bundle._pydev_calltip_util', '_pydevd_bundle.pydevd_safe_repr', '_pydevd_bundle.pydevd_resolver', '_pydevd_bundle.pydevd_extension_api', '_pydevd_bundle.pydevd_xml', '_pydevd_bundle.pydevd_dont_trace', '_pydevd_frame_eval.vendored', '_pydevd_frame_eval.vendored.bytecode.flags', '_pydevd_frame_eval.vendored.bytecode.instr', '_pydevd_frame_eval.vendored.bytecode.bytecode', '_pydevd_frame_eval.vendored.bytecode.concrete', '_pydevd_frame_eval.vendored.bytecode.cfg', '_pydevd_frame_eval.vendored.bytecode', '_pydevd_bundle.pydevd_bytecode_utils', '_pydevd_bundle.pydevd_cython', '_pydevd_bundle.pydevd_cython_wrapper', '_pydevd_bundle.pydevd_additional_thread_info', '_pydevd_bundle.pydevd_thread_lifecycle', '_pydevd_bundle.pydevd_save_locals', '_pydevd_bundle.pydevd_defaults', '_pydev_bundle.pydev_monkey', 'pydevd_tracing', '_pydevd_bundle.pydevd_daemon_thread', '_pydevd_bundle.pydevd_timeout', '_pydevd_bundle.pydevd_vars', '_pydev_bundle.pydev_console_utils', '_pydevd_bundle.pydevd_import_class', '_pydevd_bundle.pydevd_breakpoints', '_pydevd_bundle.pydevd_custom_frames', '_pydevd_bundle.pydevd_dont_trace_files', '_pydevd_bundle.pydevd_net_command', '_pydev_bundle.pydev_umd', 'pydevconsole', '_pydev_bundle._pydev_completer', '_pydevd_bundle.pydevd_net_command_factory_xml', '_pydevd_bundle.pydevd_frame', '_pydevd_bundle.pydevd_additional_thread_info_regular', '_pydevd_bundle.pydevd_trace_dispatch', '_pydevd_frame_eval.pydevd_frame_eval_main', '_pydevd_bundle.pydevd_source_mapping', 'pydevd_concurrency_analyser.pydevd_thread_wrappers', 'pydevd_concurrency_analyser.pydevd_concurrency_logger', '_pydevd_bundle._debug_adapter', '_pydevd_bundle._debug_adapter.pydevd_schema_log', '_pydevd_bundle._debug_adapter.pydevd_base_schema', '_pydevd_bundle._debug_adapter.pydevd_schema', '_pydevd_bundle.pydevd_reload', '_pydev_bundle.fsnotify', '_pydevd_bundle.pydevd_console', '_pydevd_bundle.pydevd_comm', '_pydevd_bundle.pydevd_net_command_factory_json', '_pydevd_bundle.pydevd_collect_bytecode_info', '_pydevd_bundle.pydevd_api', '_pydevd_bundle.pydevd_json_debug_options', '_pydevd_bundle.pydevd_process_net_command_json', '_pydevd_bundle.pydevd_traceproperty', '_pydevd_bundle.pydevd_process_net_command', '_pydevd_bundle.pydevd_suspended_frames', '_pydevd_bundle.pydevd_trace_api', 'pydevd_plugins.django_debug', 'pydevd_plugins.jinja2_debug', '_pydevd_bundle.pydevd_plugin_utils', 'pydevd_plugins.extensions.types', 'pydevd_plugins.extensions.types.pydevd_helpers', 'pydevd_plugins.extensions.types.pydevd_plugin_numpy_types', 'pydevd_plugins.extensions.types.pydevd_plugins_django_form_str', 'pydevd', 'debugpy._vendored.force_pydevd', 'debugpy.server', 'debugpy.adapter', 'debugpy.common.timestamp', 'debugpy.common.util', 'debugpy.common.log', 'debugpy.common.sockets', 'debugpy.server.api', 'ipykernel.debugger', 'ipykernel.ipkernel', 'ipykernel.parentpoller', 'ipykernel.kernelapp', 'win32api', 'win32security', 'ntsecuritycon', 'faulthandler', 'IPython.core.completerlib', 'storemagic', 'pyforest._importable', 'pyforest.user_specific_imports', 'pyforest._imports', 'pyforest.utils', 'pyforest', 'logging.config', 'pythonjsonlogger', 'pythonjsonlogger.jsonlogger', 'daiquiri.types', 'daiquiri.formatter', 'daiquiri.handlers', 'daiquiri.output', 'daiquiri', 'jupyter_require.__about__', 'csscompressor', 'jupyter_require.core', 'jupyter_require.notebook', 'jupyter_nbutils.__about__', 'jupyter_nbutils.config', 'jupyter_nbutils.utils', 'jupyter_nbutils', 'jupyter_require.magic', 'jupyter_require', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'mkl._mklinit', 'mkl._py_mkl_service', 'mkl', 'numpy._distributor_init', 'numpy.core._multiarray_umath', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.compat', 'numpy.core.overrides', 'numpy.core.multiarray', 'numpy.core.umath', 'numpy.core._string_helpers', 'numpy.core._dtype', 'numpy.core._type_aliases', 'numpy.core.numerictypes', 'numpy.core._asarray', 'numpy.core._exceptions', 'numpy.core._methods', 'numpy.core.fromnumeric', 'numpy.core.shape_base', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core.numeric', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._multiarray_tests', 'numpy.core._add_newdocs', 'numpy.core._add_newdocs_scalars', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'numpy._pytesttester', 'numpy.core', 'numpy.lib.mixins', 'numpy.lib.ufunclike', 'numpy.lib.type_check', 'numpy.lib.scimath', 'numpy.lib.twodim_base', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.linalg.linalg', 'numpy.linalg', 'numpy.matrixlib.defmatrix', 'numpy.matrixlib', 'numpy.lib.histograms', 'numpy.lib.function_base', 'numpy.lib.stride_tricks', 'numpy.lib.index_tricks', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.npyio', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.lib', 'numpy.fft._pocketfft_internal', 'numpy.fft._pocketfft', 'numpy.fft.helper', 'numpy.fft', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.polynomial', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.polynomial', 'numpy.random._common', 'secrets', 'numpy.random.bit_generator', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random.mtrand', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.random._pickle', 'numpy.random', 'numpy.ctypeslib', 'numpy.ma.core', 'numpy.ma.extras', 'numpy.ma', 'numpy', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'pytz', 'mmap', 'pandas._typing', 'pandas._libs.tslibs.dtypes', 'pandas._libs.tslibs.base', 'pandas._libs.tslibs.np_datetime', 'pandas._libs.tslibs.nattype', 'pandas._libs.tslibs.timezones', 'pandas._libs.tslibs.ccalendar', 'pandas._libs.tslibs.tzconversion', 'pandas._config.config', 'pandas._config.dates', 'pandas._config.display', 'pandas._config', 'pandas._config.localization', 'pandas._libs.tslibs.strptime', 'pandas._libs.tslibs.fields', 'pandas._libs.tslibs.timedeltas', 'pandas._libs.tslibs.timestamps', 'dateutil.easter', 'pandas._libs.properties', 'pandas._libs.tslibs.offsets', 'pandas._libs.tslibs.parsing', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs.vectorized', 'pandas._libs.tslibs', 'pandas._libs.ops_dispatch', 'pandas._libs.missing', 'pandas._libs.hashtable', 'pandas._libs.algos', 'pandas._libs.interval', 'pandas._libs', 'pandas.util._decorators', 'pandas.core', 'pandas.core.util', 'pandas._libs.tslib', 'pandas._libs.lib', 'pandas._libs.hashing', 'pandas.core.dtypes', 'pandas.errors', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.base', 'pandas.core.dtypes.inference', 'pandas.core.dtypes.dtypes', 'pandas.core.dtypes.common', 'pandas.core.util.hashing', 'pandas.util', 'pandas.util.version', 'pandas.compat.numpy', 'pyarrow._generated_version', '_cython_0_29_28', 'cloudpickle.compat', 'typing_extensions', 'cloudpickle.cloudpickle', 'cloudpickle.cloudpickle_fast', 'cloudpickle', 'pyarrow.util', 'pyarrow.lib', 'pyarrow._hdfsio', 'pyarrow.filesystem', 'pyarrow.hdfs', 'pyarrow.ipc', 'pyarrow.serialization', 'pyarrow.types', 'pyarrow', 'pandas.compat.pyarrow', 'pandas.compat', 'pandas.core.config_init', 'pandas.core.dtypes.missing', 'pandas.util._exceptions', 'pandas.util._validators', 'pandas.core.dtypes.cast', 'pandas.core.array_algos', 'pandas.core.common', 'pandas.core.construction', 'pandas.core.array_algos.take', 'pandas.core.indexers', 'pandas.core.algorithms', 'pandas.compat.numpy.function', 'pandas.compat._optional', 'pandas.core.missing', 'pandas.core.roperator', 'pandas._libs.ops', 'pandas.core.computation', 'numexpr.__config__', 'numexpr.interpreter', 'numexpr.expressions', 'numexpr.utils', 'numexpr.necompiler', 'numexpr.version', 'numexpr', 'pandas.core.computation.check', 'pandas.core.computation.expressions', 'pandas.core.ops.missing', 'pandas.core.ops.dispatch', 'pandas.core.ops.invalid', 'pandas.core.ops.array_ops', 'pandas.core.ops.common', 'pandas.core.ops.docstrings', 'pandas.core.ops.mask_ops', 'pandas.core.ops.methods', 'pandas.core.ops', 'pandas.core.sorting', 'pandas.core.arrays.base', 'bottleneck.reduce', 'bottleneck.nonreduce', 'bottleneck.nonreduce_axis', 'bottleneck.move', 'bottleneck.slow.reduce', 'bottleneck.slow.nonreduce', 'bottleneck.slow.nonreduce_axis', 'bottleneck.slow.move', 'bottleneck.slow', 'bottleneck.benchmark', 'bottleneck.benchmark.autotimeit', 'bottleneck.benchmark.bench', 'bottleneck.benchmark.bench_detailed', 'bottleneck.tests', 'bottleneck.tests.util', 'bottleneck._pytesttester', 'bottleneck._version', 'bottleneck', 'pandas.core.nanops', 'pandas.core.array_algos.masked_reductions', 'pandas.core.arraylike', 'pandas.core.arrays.masked', 'pandas.core.arrays.boolean', 'pandas._libs.arrays', 'pandas.core.accessor', 'pandas.core.array_algos.transforms', 'pandas.core.arrays._mixins', 'pandas.core.base', 'pandas.core.strings.accessor', 'pandas.core.strings.base', 'pandas.core.strings', 'pandas.core.strings.object_array', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.console', 'pandas.core.arrays.categorical', 'pandas.tseries', 'pandas.tseries.frequencies', 'pandas.core.arrays.datetimelike', 'pandas.core.arrays._ranges', 'pandas.core.arrays.numeric', 'pandas.core.tools', 'pandas.core.tools.numeric', 'pandas.core.arrays.integer', 'pandas.tseries.offsets', 'pandas.core.arrays.datetimes', 'pandas.core.arrays.floating', 'pandas.core.indexes', 'pandas._libs.index', 'pandas._libs.join', 'pandas._libs.sparse', 'pandas.core.arrays.sparse.dtype', 'pandas.io.formats.printing', 'pandas.core.arrays.sparse.array', 'pandas.core.arrays.sparse.accessor', 'pandas.core.arrays.sparse', 'pandas.core.dtypes.concat', 'pandas.core.array_algos.putmask', 'pandas.core.indexes.frozen', 'pandas.core.indexes.base', 'pandas.core.arrays.interval', 'pandas.core.arrays.numpy_', 'pandas.core.arrays.period', 'pandas.core.arrays.string_', 'pyarrow._compute', 'pyarrow._compute_docstrings', 'pyarrow.vendored', 'pyarrow.vendored.docscrape', 'pyarrow.compute', 'pandas.core.arrays.string_arrow', 'pandas.core.arrays.timedeltas', 'pandas.core.arrays', 'pandas.core.flags', 'pandas._libs.reduction', 'pandas.core.indexes.extension', 'pandas.core.indexes.category', 'pandas.core.indexes.numeric', 'pandas.core.tools.timedeltas', 'pandas.core.indexes.datetimelike', 'pandas.core.tools.times', 'pandas.core.indexes.datetimes', 'pandas.core.indexes.multi', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.interval', 'pandas.core.indexes.period', 'pandas.core.indexes.range', 'pandas.core.indexes.api', 'pandas.core.aggregation', 'pandas.core.apply', 'pandas._libs.indexing', 'pandas.core.indexing', 'pandas.core.reshape', 'pandas._libs.internals', 'pandas._libs.writers', 'pandas.core.array_algos.quantile', 'pandas.core.array_algos.replace', 'pandas.core.internals.blocks', 'pandas.core.internals.api', 'pandas.core.internals.base', 'pandas.core.internals.array_manager', 'pandas.core.internals.ops', 'pandas.core.internals.managers', 'pandas.core.internals.concat', 'pandas.core.internals', 'pandas.core.reshape.concat', 'pandas.io.common', 'pandas.io.formats.format', 'pandas.core.describe', 'pandas.core.internals.construction', 'pandas.core.shared_docs', 'pandas._libs.window', 'pandas._libs.window.aggregations', 'pandas.core.util.numba_', 'pandas.core.window.common', 'pandas.core.window.doc', 'pandas._libs.window.indexers', 'pandas.core.window.indexers', 'pandas.core.window.numba_', 'pandas.core.window.online', 'pandas.core.window.rolling', 'pandas.core.window.ewm', 'pandas.core.window.expanding', 'pandas.core.window', 'pandas.core.generic', 'pandas.core.reshape.util', 'pandas.core.reshape.melt', 'pandas._libs.reshape', 'pandas.core.indexes.accessors', 'pandas.arrays', 'pandas.core.tools.datetimes', 'pandas.plotting._core', 'pandas.plotting._misc', 'pandas.plotting', 'pandas.core.series', 'pandas.io.formats.info', 'pandas.core.frame', 'pandas.core.groupby.base', 'pandas._libs.groupby', 'pandas.core.groupby.numba_', 'pandas.core.groupby.categorical', 'pandas.core.groupby.grouper', 'pandas.core.groupby.ops', 'pandas.core.groupby.groupby', 'pandas.core.groupby.generic', 'pandas.core.groupby', 'pandas.core.api', 'pandas.tseries.api', 'pandas.core.computation.common', 'pandas.core.computation.align', 'pandas.compat.chainmap', 'pandas.core.computation.scope', 'pandas.core.computation.ops', 'pandas.core.computation.parsing', 'pandas.core.computation.expr', 'pandas.core.computation.engines', 'pandas.core.computation.eval', 'pandas.core.computation.api', 'pandas.core.reshape.merge', 'pandas.core.reshape.pivot', 'pandas.core.reshape.reshape', 'pandas.core.reshape.tile', 'pandas.core.reshape.api', 'pandas.api.extensions', 'pandas.api.indexers', 'pandas.core.dtypes.api', 'pandas.api.types', 'pandas.api', 'pandas.util._print_versions', 'pandas.io.clipboards', 'pandas._libs.parsers', 'pandas.io.excel._util', 'pandas.io.date_converters', 'pandas.io.parsers.base_parser', 'pandas.io.parsers.c_parser_wrapper', 'pandas.io.parsers.python_parser', 'pandas.io.parsers.readers', 'pandas.io.parsers', 'pandas.io.excel._odfreader', 'pandas.io.excel._openpyxl', 'pandas.io.excel._pyxlsb', 'pandas.io.excel._xlrd', 'pandas.io.excel._base', 'pandas._libs.json', 'pandas.io.formats._color_data', 'pandas.io.formats.css', 'pandas.io.formats.excel', 'pandas.io.excel._odswriter', 'pandas.io.excel._xlsxwriter', 'pandas.io.excel._xlwt', 'pandas.io.excel', 'pandas.io.feather_format', 'pandas.io.gbq', 'pandas.io.html', 'pandas.io.json._normalize', 'pandas.io.json._table_schema', 'pandas.io.json._json', 'pandas.io.json', 'pandas.io.orc', 'pandas.io.parquet', 'pandas.compat.pickle_compat', 'pandas.io.pickle', 'pandas.core.computation.pytables', 'pandas.io.pytables', 'pandas.io.sas.sasreader', 'pandas.io.sas', 'pandas.io.spss', 'pandas.io.sql', 'pandas.io.stata', 'pandas.io.xml', 'pandas.io.api', 'pandas.util._tester', 'pandas._testing._random', 'pandas._testing.contexts', 'pandas._testing._io', 'pandas._testing._warnings', 'cmath', 'pandas._libs.testing', 'pandas._testing.asserters', 'pandas._testing.compat', 'pandas._testing', 'pandas.testing', 'pandas._version', 'pandas', 'seaborn', 'seaborn.rcmod', 'matplotlib', 'matplotlib._api.deprecation', 'matplotlib._api', 'matplotlib._c_internal_utils', 'matplotlib.cbook', 'matplotlib.docstring', 'PIL._version', 'PIL', 'defusedxml.common', 'defusedxml', 'xml.etree', 'xml.etree.ElementPath', '_elementtree', 'xml.etree.ElementTree', 'defusedxml.ElementTree', 'PIL.ImageMode', 'PIL.TiffTags', 'PIL._binary', 'PIL._util', 'PIL._imaging', 'cffi.lock', 'cffi.error', 'cffi.model', 'cffi.api', 'cffi', 'PIL.Image', 'matplotlib._animation_data', 'matplotlib.animation', 'PIL.ImageChops', 'PIL.ImageFile', 'PIL.GimpGradientFile', 'PIL.GimpPaletteFile', 'PIL.ImageColor', 'PIL.PaletteFile', 'PIL.ImagePalette', 'PIL.ImageSequence', 'PIL.PngImagePlugin', 'matplotlib._path', 'matplotlib.bezier', 'matplotlib.path', 'matplotlib.transforms', 'matplotlib.ticker', 'matplotlib.scale', 'matplotlib._color_data', 'matplotlib.colors', 'pyparsing.util', 'pyparsing.unicode', 'pyparsing.exceptions', 'pyparsing.actions', 'pyparsing.results', 'pyparsing.core', 'pyparsing.helpers', 'pyparsing.testing', 'pyparsing.common', 'pyparsing', 'matplotlib.fontconfig_pattern', 'matplotlib._enums', 'cycler', 'matplotlib.rcsetup', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver', 'dateutil.rrule', 'matplotlib.units', 'matplotlib.dates']
2023-02-22 17:23:03,409 [19608] DEBUG    matplotlib:224: [JupyterRequire] CACHEDIR=C:\Users\sunny\.matplotlib
2023-02-22 17:23:03,414 [19608] DEBUG    matplotlib.font_manager:1439: [JupyterRequire] Using fontManager instance from C:\Users\sunny\.matplotlib\fontlist-v330.json
2023-02-22 17:23:03,625 [19608] DEBUG    matplotlib.pyplot:290: [JupyterRequire] Loaded backend module://matplotlib_inline.backend_inline version unknown.
2023-02-22 17:23:03,628 [19608] DEBUG    matplotlib.pyplot:290: [JupyterRequire] Loaded backend module://matplotlib_inline.backend_inline version unknown.
2023-02-22 17:23:03,819 [19608] DEBUG    matplotlib.pyplot:290: [JupyterRequire] Loaded backend module://matplotlib_inline.backend_inline version unknown.
2023-02-22 17:23:12,446 [19608] DEBUG    matplotlib.font_manager:1329: [JupyterRequire] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.
2023-02-22 17:23:12,447 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2023-02-22 17:23:12,447 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,447 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2023-02-22 17:23:12,448 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2023-02-22 17:23:12,448 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-02-22 17:23:12,448 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,448 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2023-02-22 17:23:12,448 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,448 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,448 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,448 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,449 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,450 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2023-02-22 17:23:12,450 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2023-02-22 17:23:12,450 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2023-02-22 17:23:12,450 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-02-22 17:23:12,451 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,451 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,451 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2023-02-22 17:23:12,451 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,451 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2023-02-22 17:23:12,451 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2023-02-22 17:23:12,451 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,451 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,451 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,451 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2023-02-22 17:23:12,452 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,452 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-02-22 17:23:12,452 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,452 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,452 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-02-22 17:23:12,454 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2023-02-22 17:23:12,454 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,454 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-02-22 17:23:12,454 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2023-02-22 17:23:12,454 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,454 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2023-02-22 17:23:12,455 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-02-22 17:23:12,455 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,455 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,455 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,455 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25
2023-02-22 17:23:12,455 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
2023-02-22 17:23:12,455 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,455 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,456 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24
2023-02-22 17:23:12,456 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335
2023-02-22 17:23:12,456 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,456 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05
2023-02-22 17:23:12,456 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975
2023-02-22 17:23:12,457 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,457 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,457 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,457 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,457 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,458 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
2023-02-22 17:23:12,458 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,458 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
2023-02-22 17:23:12,458 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,458 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25
2023-02-22 17:23:12,459 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24
2023-02-22 17:23:12,459 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
2023-02-22 17:23:12,459 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24
2023-02-22 17:23:12,459 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,460 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05
2023-02-22 17:23:12,460 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,461 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545
2023-02-22 17:23:12,461 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335
2023-02-22 17:23:12,461 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,461 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,462 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145
2023-02-22 17:23:12,462 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,462 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
2023-02-22 17:23:12,463 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sitka' (SitkaVF.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,463 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
2023-02-22 17:23:12,463 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525
2023-02-22 17:23:12,463 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335
2023-02-22 17:23:12,463 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335
2023-02-22 17:23:12,464 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,464 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,464 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
2023-02-22 17:23:12,464 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,464 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05
2023-02-22 17:23:12,464 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,465 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,465 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,465 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
2023-02-22 17:23:12,465 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,465 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
2023-02-22 17:23:12,465 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,466 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
2023-02-22 17:23:12,466 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24
2023-02-22 17:23:12,466 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
2023-02-22 17:23:12,466 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,466 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05
2023-02-22 17:23:12,467 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,467 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05
2023-02-22 17:23:12,467 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
2023-02-22 17:23:12,467 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05
2023-02-22 17:23:12,467 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,467 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,467 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05
2023-02-22 17:23:12,468 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,468 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,468 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
2023-02-22 17:23:12,468 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,468 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,468 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24
2023-02-22 17:23:12,469 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,469 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,469 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,469 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
2023-02-22 17:23:12,469 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,469 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335
2023-02-22 17:23:12,469 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335
2023-02-22 17:23:12,470 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145
2023-02-22 17:23:12,470 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535
2023-02-22 17:23:12,470 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,470 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05
2023-02-22 17:23:12,470 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25
2023-02-22 17:23:12,470 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,471 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335
2023-02-22 17:23:12,471 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635
2023-02-22 17:23:12,471 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,471 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363
2023-02-22 17:23:12,471 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,471 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
2023-02-22 17:23:12,471 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
2023-02-22 17:23:12,471 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145
2023-02-22 17:23:12,472 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
2023-02-22 17:23:12,472 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
2023-02-22 17:23:12,472 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335
2023-02-22 17:23:12,472 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
2023-02-22 17:23:12,472 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,472 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,473 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335
2023-02-22 17:23:12,473 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335
2023-02-22 17:23:12,473 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,473 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,474 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,474 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,474 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
2023-02-22 17:23:12,475 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,475 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145
2023-02-22 17:23:12,475 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,475 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,475 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335
2023-02-22 17:23:12,475 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05
2023-02-22 17:23:12,475 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
2023-02-22 17:23:12,475 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364
2023-02-22 17:23:12,475 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,477 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,477 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 500 normal>) = 10.145
2023-02-22 17:23:12,477 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43
2023-02-22 17:23:12,477 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI Variable' (SegUIVar.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,477 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
2023-02-22 17:23:12,478 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,478 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,478 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,478 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,478 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,478 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,479 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05
2023-02-22 17:23:12,479 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05
2023-02-22 17:23:12,479 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335
2023-02-22 17:23:12,479 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,479 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,479 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335
2023-02-22 17:23:12,480 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
2023-02-22 17:23:12,480 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145
2023-02-22 17:23:12,480 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,480 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24
2023-02-22 17:23:12,480 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,480 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,480 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335
2023-02-22 17:23:12,481 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,481 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
2023-02-22 17:23:12,481 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24
2023-02-22 17:23:12,481 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25
2023-02-22 17:23:12,481 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
2023-02-22 17:23:12,481 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,481 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
2023-02-22 17:23:12,482 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
2023-02-22 17:23:12,482 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
2023-02-22 17:23:12,482 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,482 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,482 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25
2023-02-22 17:23:12,482 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
2023-02-22 17:23:12,482 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335
2023-02-22 17:23:12,482 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24
2023-02-22 17:23:12,484 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,484 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,484 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05
2023-02-22 17:23:12,484 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25
2023-02-22 17:23:12,484 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,484 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,485 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,485 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25
2023-02-22 17:23:12,485 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,485 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25
2023-02-22 17:23:12,485 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,485 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975
2023-02-22 17:23:12,486 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,486 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,486 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05
2023-02-22 17:23:12,486 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,486 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,487 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335
2023-02-22 17:23:12,487 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145
2023-02-22 17:23:12,487 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145
2023-02-22 17:23:12,487 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24
2023-02-22 17:23:12,487 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145
2023-02-22 17:23:12,488 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24
2023-02-22 17:23:12,488 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,488 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,488 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,488 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
2023-02-22 17:23:12,488 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,489 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,489 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
2023-02-22 17:23:12,489 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335
2023-02-22 17:23:12,489 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05
2023-02-22 17:23:12,489 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,489 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,489 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,490 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,490 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05
2023-02-22 17:23:12,490 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,490 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
2023-02-22 17:23:12,490 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525
2023-02-22 17:23:12,490 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25
2023-02-22 17:23:12,490 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,490 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,490 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535
2023-02-22 17:23:12,490 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,491 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,491 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,491 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
2023-02-22 17:23:12,491 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
2023-02-22 17:23:12,491 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335
2023-02-22 17:23:12,491 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,492 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
2023-02-22 17:23:12,492 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335
2023-02-22 17:23:12,492 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05
2023-02-22 17:23:12,493 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,493 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05
2023-02-22 17:23:12,493 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,493 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,493 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
2023-02-22 17:23:12,494 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05
2023-02-22 17:23:12,494 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
2023-02-22 17:23:12,494 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,494 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,494 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
2023-02-22 17:23:12,495 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sitka' (SitkaVF-Italic.ttf) italic normal 400 normal>) = 11.05
2023-02-22 17:23:12,495 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05
2023-02-22 17:23:12,495 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335
2023-02-22 17:23:12,495 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,495 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,495 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,496 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
2023-02-22 17:23:12,496 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,496 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335
2023-02-22 17:23:12,496 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,496 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05
2023-02-22 17:23:12,497 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,497 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24
2023-02-22 17:23:12,497 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
2023-02-22 17:23:12,497 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,497 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335
2023-02-22 17:23:12,497 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
2023-02-22 17:23:12,498 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
2023-02-22 17:23:12,498 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,498 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
2023-02-22 17:23:12,498 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145
2023-02-22 17:23:12,498 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,498 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525
2023-02-22 17:23:12,499 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,499 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,499 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25
2023-02-22 17:23:12,499 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,499 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,500 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,500 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
2023-02-22 17:23:12,500 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,500 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545
2023-02-22 17:23:12,500 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
2023-02-22 17:23:12,500 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
2023-02-22 17:23:12,501 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,501 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145
2023-02-22 17:23:12,501 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24
2023-02-22 17:23:12,501 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,501 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,501 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145
2023-02-22 17:23:12,502 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,502 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
2023-02-22 17:23:12,502 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05
2023-02-22 17:23:12,502 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,502 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
2023-02-22 17:23:12,502 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25
2023-02-22 17:23:12,503 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25
2023-02-22 17:23:12,503 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,503 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,504 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,504 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,504 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,504 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
2023-02-22 17:23:12,504 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335
2023-02-22 17:23:12,505 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,505 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,505 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535
2023-02-22 17:23:12,506 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,506 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335
2023-02-22 17:23:12,506 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
2023-02-22 17:23:12,506 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335
2023-02-22 17:23:12,506 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
2023-02-22 17:23:12,506 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
2023-02-22 17:23:12,507 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635
2023-02-22 17:23:12,507 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335
2023-02-22 17:23:12,507 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,507 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05
2023-02-22 17:23:12,507 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05
2023-02-22 17:23:12,508 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05
2023-02-22 17:23:12,508 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05
2023-02-22 17:23:12,508 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05
2023-02-22 17:23:12,508 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
2023-02-22 17:23:12,508 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,509 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
2023-02-22 17:23:12,509 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
2023-02-22 17:23:12,509 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,509 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145
2023-02-22 17:23:12,509 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,509 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25
2023-02-22 17:23:12,510 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363
2023-02-22 17:23:12,510 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05
2023-02-22 17:23:12,510 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975
2023-02-22 17:23:12,510 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25
2023-02-22 17:23:12,510 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,511 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335
2023-02-22 17:23:12,511 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
2023-02-22 17:23:12,511 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,511 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335
2023-02-22 17:23:12,511 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05
2023-02-22 17:23:12,512 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05
2023-02-22 17:23:12,512 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,512 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,512 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,512 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,512 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,513 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,513 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
2023-02-22 17:23:12,513 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,513 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,513 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
2023-02-22 17:23:12,513 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
2023-02-22 17:23:12,514 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145
2023-02-22 17:23:12,514 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145
2023-02-22 17:23:12,514 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975
2023-02-22 17:23:12,514 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145
2023-02-22 17:23:12,514 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,514 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,514 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,514 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,515 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,515 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535
2023-02-22 17:23:12,515 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335
2023-02-22 17:23:12,515 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05
2023-02-22 17:23:12,515 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
2023-02-22 17:23:12,516 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525
2023-02-22 17:23:12,516 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335
2023-02-22 17:23:12,516 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05
2023-02-22 17:23:12,516 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145
2023-02-22 17:23:12,516 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,516 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335
2023-02-22 17:23:12,517 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145
2023-02-22 17:23:12,517 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
2023-02-22 17:23:12,517 [19608] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe Fluent Icons' (SegoeIcons.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:23:12,517 [19608] DEBUG    matplotlib.font_manager:1367: [JupyterRequire] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('C:\\Users\\sunny\\anaconda3\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.
2023-02-22 17:24:28,924 [19608] DEBUG    matplotlib.colorbar:620: [JupyterRequire] locator: <matplotlib.colorbar._ColorbarAutoLocator object at 0x000001405F4F4BE0>
2023-02-22 17:24:28,924 [19608] DEBUG    matplotlib.colorbar:665: [JupyterRequire] Using auto colorbar locator <matplotlib.colorbar._ColorbarAutoLocator object at 0x000001405F4F4BE0> on colorbar
2023-02-22 17:24:28,924 [19608] DEBUG    matplotlib.colorbar:794: [JupyterRequire] Setting pcolormesh
2023-02-22 17:27:54,674 [19608] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\jedi\third_party\typeshed\stdlib\2and3\builtins.pyi
2023-02-22 17:27:54,713 [19608] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\sklearn\__init__.py
2023-02-22 17:27:54,737 [19608] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\sklearn\base.py
2023-02-22 17:27:54,779 [19608] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\sklearn\utils\__init__.py
2023-02-22 17:30:06,890 [19608] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-22 17:30:06,890 [19608] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-22 17:30:06,891 [19608] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-22 17:30:06,891 [19608] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-22 17:30:06,892 [19608] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-22 17:30:08,370 [19608] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-22 17:30:08,371 [19608] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-22 17:30:08,372 [19608] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-22 17:30:08,372 [19608] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-22 17:30:08,373 [19608] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-22 17:31:42,944 [19608] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-22 17:31:42,945 [19608] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-22 17:31:42,946 [19608] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-22 17:31:42,947 [19608] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-22 17:31:42,947 [19608] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-22 17:31:42,954 [19608] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\pandas\__init__.py
2023-02-22 17:32:13,898 [19608] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-22 17:32:13,900 [19608] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-22 17:32:13,901 [19608] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-22 17:32:13,901 [19608] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-22 17:32:13,902 [19608] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-22 17:32:14,011 [19608] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\pandas\core\frame.py
2023-02-22 17:32:14,035 [19608] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\pandas\core\__init__.py
2023-02-22 17:32:14,112 [19608] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\pandas\core\generic.py
2023-02-22 17:32:14,146 [19608] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\pandas\core\base.py
2023-02-22 17:32:14,158 [19608] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\pandas\core\accessor.py
2023-02-22 17:32:14,187 [19608] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\pandas\core\indexing.py
2023-02-22 17:32:14,204 [19608] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\pandas\core\arraylike.py
2023-02-22 17:33:21,003 [19068] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-02-22 17:33:21,004 [19068] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-02-22 17:33:21,004 [19068] INFO     root:247: [JupyterRequire] Initializing comms.
2023-02-22 17:33:21,006 [19068] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-02-22 17:33:21,007 [19068] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-02-22 17:33:21,007 [19068] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-02-22 17:33:21,820 [19068] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-02-22 17:33:21,820 [19068] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-02-22 17:33:21,820 [19068] INFO     root:247: [JupyterRequire] Initializing comms.
2023-02-22 17:33:21,822 [19068] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-02-22 17:33:21,824 [19068] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-02-22 17:33:21,825 [19068] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-02-22 17:33:28,757 [19068] DEBUG    matplotlib:224: [JupyterRequire] matplotlib data path: C:\Users\sunny\anaconda3\lib\site-packages\matplotlib\mpl-data
2023-02-22 17:33:28,769 [19068] DEBUG    matplotlib:224: [JupyterRequire] CONFIGDIR=C:\Users\sunny\.matplotlib
2023-02-22 17:33:28,772 [19068] DEBUG    matplotlib:1394: [JupyterRequire] matplotlib version 3.4.3
2023-02-22 17:33:28,772 [19068] DEBUG    matplotlib:1395: [JupyterRequire] interactive is False
2023-02-22 17:33:28,772 [19068] DEBUG    matplotlib:1396: [JupyterRequire] platform is win32
2023-02-22 17:33:28,773 [19068] DEBUG    matplotlib:1397: [JupyterRequire] loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_thread', '_warnings', '_weakref', '_io', 'marshal', 'nt', 'winreg', '_frozen_importlib_external', 'time', 'zipimport', '_codecs', 'codecs', 'encodings.aliases', 'encodings', 'encodings.utf_8', 'encodings.cp1252', '_signal', 'encodings.latin_1', '_abc', 'abc', 'io', '__main__', '_stat', 'stat', '_collections_abc', 'genericpath', 'ntpath', 'os.path', 'os', '_sitebuiltins', '_locale', '_bootlocale', '_distutils_hack', 'types', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib', 'importlib.machinery', '_heapq', 'heapq', 'itertools', 'keyword', '_operator', 'operator', 'reprlib', '_collections', 'collections', 'collections.abc', '_functools', 'functools', 'contextlib', 'enum', '_sre', 'sre_constants', 'sre_parse', 'sre_compile', 'copyreg', 're', 'typing.io', 'typing.re', 'typing', 'importlib.abc', 'importlib.util', 'google', 'google.cloud', 'google.logging', 'mpl_toolkits', 'sphinxcontrib', 'zope', 'site', '_weakrefset', 'weakref', 'pkgutil', 'runpy', 'ipykernel._version', '_json', 'json.scanner', 'json.decoder', 'json.encoder', 'json', 'errno', 'signal', 'threading', 'msvcrt', '_winapi', 'subprocess', 'jupyter_client._version', 'posixpath', 'fnmatch', 'glob', '_socket', 'math', 'select', 'selectors', 'socket', 'zlib', '_compression', '_bz2', 'bz2', '_lzma', 'lzma', 'shutil', '_bisect', 'bisect', '_random', '_sha512', 'random', 'tempfile', 'getpass', 'platform', 'zmq.libzmq', 'zmq.backend.select', 'cython_runtime', 'zmq.backend.cython.constants', '_cython_0_29_24', 'zmq.backend.cython.error', 'zmq.error', 'zmq.backend.cython.message', 'zmq.backend.cython.context', 'copy', '_struct', 'struct', '_compat_pickle', '_pickle', 'pickle', 'zmq.backend.cython.socket', 'zmq.backend.cython.utils', 'zmq.backend.cython._poll', 'zmq.backend.cython._version', 'zmq.backend.cython._device', 'zmq.backend.cython._proxy_steerable', 'zmq.backend.cython', 'zmq.backend', 'zmq.utils', 'zmq.utils.constant_names', 'zmq.sugar.constants', 'atexit', 'zmq.sugar.attrsettr', 'zmq.sugar.poll', 'zmq.utils.jsonapi', 'zmq.utils.strtypes', 'zmq.sugar.socket', 'zmq.sugar.context', 'zmq.sugar.frame', 'zmq.sugar.tracker', 'zmq.sugar.version', 'zmq.sugar.stopwatch', 'zmq.sugar', 'zmq', '_ast', 'ast', '_opcode', 'opcode', 'dis', 'token', 'tokenize', 'linecache', 'inspect', 'traitlets.utils', 'traitlets.utils.getargspec', 'traitlets.utils.importstring', 'traitlets.utils.sentinel', 'traitlets.utils.bunch', 'traitlets.utils.descriptions', 'traitlets.traitlets', 'traitlets.utils.decorators', 'traitlets._version', 'traitlets', 'traceback', '_string', 'string', 'logging', 'pprint', 'gettext', 'argparse', 'traitlets.config.loader', 'textwrap', 'traitlets.utils.text', 'traitlets.config.configurable', 'traitlets.config.application', 'traitlets.config', 'jupyter_client.localinterfaces', 'jupyter_core.version', 'jupyter_core', 'urllib', 'urllib.parse', 'pathlib', 'jupyter_core.paths', 'jupyter_client.utils', 'jupyter_client.connect', 'traitlets.log', 'jupyter_client.launcher', 'concurrent', 'concurrent.futures._base', 'concurrent.futures', '_ssl', 'binascii', 'base64', 'ssl', 'asyncio.constants', 'asyncio.format_helpers', 'asyncio.base_futures', 'asyncio.log', 'asyncio.coroutines', '_contextvars', 'contextvars', 'asyncio.exceptions', 'asyncio.base_tasks', '_asyncio', 'asyncio.events', 'asyncio.futures', 'asyncio.protocols', 'asyncio.transports', 'asyncio.sslproto', 'asyncio.locks', 'asyncio.tasks', 'asyncio.staggered', 'asyncio.trsock', 'asyncio.base_events', 'asyncio.runners', 'asyncio.queues', 'asyncio.streams', 'asyncio.subprocess', 'asyncio.threads', '_overlapped', 'asyncio.base_subprocess', 'asyncio.proactor_events', 'asyncio.selector_events', 'asyncio.windows_utils', 'asyncio.windows_events', 'asyncio', 'jupyter_client.channelsabc', 'jupyter_client.channels', 'jupyter_client.clientabc', 'jupyter_client.client', 'jupyter_client.kernelspec', 'jupyter_client.managerabc', 'jupyter_client.manager', '_queue', 'queue', 'jupyter_client.blocking.channels', 'jupyter_client.blocking.client', 'jupyter_client.blocking', 'zmq._future', 'zmq.asyncio', 'jupyter_client.asynchronous.channels', 'jupyter_client.asynchronous.client', 'jupyter_client.asynchronous', '_uuid', 'uuid', 'jupyter_client.multikernelmanager', 'jupyter_client', 'ipykernel.connect', 'ipykernel', 'tornado', '_datetime', 'datetime', 'numbers', 'logging.handlers', 'html.entities', 'html', 'array', 'tornado.speedups', 'tornado.util', 'tornado.escape', 'colorama.ansi', '_ctypes', 'ctypes._endian', 'ctypes', 'ctypes.wintypes', 'colorama.win32', 'colorama.winterm', 'colorama.ansitowin32', 'colorama.initialise', 'colorama', 'tornado.log', 'tornado.concurrent', 'tornado.ioloop', '__future__', 'tornado.platform', 'tornado.gen', 'tornado.platform.asyncio', 'zmq.eventloop.ioloop', 'zmq.eventloop', 'zmq.eventloop.zmqstream', 'IPython.core', 'IPython.core.getipython', 'IPython.core.release', 'sysconfig', 'pydoc', 'bdb', 'IPython.utils', 'IPython.utils.ipstruct', 'IPython.utils.coloransi', 'pygments', 'IPython.utils.colorable', 'IPython.utils.PyColorize', 'locale', 'IPython.utils.encoding', 'IPython.utils.py3compat', 'IPython.core.excolors', 'IPython.testing', 'IPython.testing.skipdoctest', 'cmd', 'codeop', 'code', 'pdb', 'IPython.core.debugger', 'IPython.core.display_trap', 'shlex', 'IPython.utils._process_common', 'IPython.utils._process_win32', 'IPython.utils.process', 'IPython.utils.decorators', 'IPython.utils.path', 'IPython.utils.data', 'IPython.utils.terminal', 'IPython.core.ultratb', 'IPython.utils._sysinfo', 'IPython.utils.sysinfo', 'IPython.core.crashhandler', 'IPython.utils.importstring', 'IPython.paths', 'IPython.core.profiledir', 'IPython.core.application', 'IPython.terminal', '_hashlib', '_blake2', 'hashlib', 'IPython.core.compilerop', 'IPython.core.error', 'IPython.utils.text', 'IPython.core.magic_arguments', 'getopt', 'mimetypes', 'IPython.core.display', 'IPython.core.page', 'IPython.lib.security', 'IPython.lib', 'IPython.lib.pretty', 'IPython.utils.openpy', 'IPython.utils.dir2', 'IPython.utils.wildcard', 'pygments.lexers._mapping', 'pygments.modeline', 'pygments.plugin', 'pygments.util', 'pygments.lexers', 'pygments.filter', 'pygments.token', 'pygments.filters', 'pygments.regexopt', 'pygments.lexer', 'pygments.unistring', 'pygments.lexers.python', 'pygments.formatters._mapping', 'pygments.formatters', 'pygments.styles', 'pygments.formatter', 'pygments.formatters.html', 'IPython.core.oinspect', 'IPython.core.inputtransformer2', 'decorator', 'IPython.core.magic', 'pickleshare', 'IPython.core.autocall', 'IPython.core.macro', 'IPython.core.splitinput', 'IPython.core.prefilter', 'IPython.core.alias', 'IPython.core.builtin_trap', 'backcall.backcall', 'backcall', 'IPython.core.events', 'IPython.core.displayhook', 'IPython.core.displaypub', 'IPython.core.extensions', 'IPython.utils.sentinel', 'IPython.core.formatters', '_sqlite3', 'sqlite3.dbapi2', 'sqlite3', 'IPython.core.history', 'IPython.core.logger', 'IPython.core.payload', 'IPython.core.usage', 'IPython.lib.display', 'IPython.display', 'IPython.utils.capture', 'IPython.utils.io', 'IPython.core.hooks', 'IPython.utils.strdispatch', 'IPython.utils.syspathcontext', 'IPython.utils.tempdir', 'IPython.utils.contexts', 'IPython.core.async_helpers', 'IPython.core.interactiveshell', 'prompt_toolkit.application.current', 'prompt_toolkit.eventloop.utils', 'prompt_toolkit.eventloop.async_generator', 'wcwidth.table_wide', 'wcwidth.table_zero', 'wcwidth.unicode_versions', 'wcwidth.wcwidth', 'wcwidth', 'prompt_toolkit.utils', 'prompt_toolkit.eventloop.inputhook', 'prompt_toolkit.eventloop', 'prompt_toolkit.application.run_in_terminal', 'prompt_toolkit.selection', 'prompt_toolkit.clipboard.base', 'prompt_toolkit.clipboard.in_memory', 'prompt_toolkit.clipboard', 'prompt_toolkit.cache', 'prompt_toolkit.enums', 'prompt_toolkit.filters.base', 'prompt_toolkit.filters.app', 'prompt_toolkit.filters.cli', 'prompt_toolkit.filters.utils', 'prompt_toolkit.filters', 'prompt_toolkit.document', 'prompt_toolkit.auto_suggest', 'prompt_toolkit.data_structures', 'prompt_toolkit.styles.base', 'prompt_toolkit.styles.named_colors', 'prompt_toolkit.styles.style', 'prompt_toolkit.styles.defaults', 'prompt_toolkit.styles.pygments', 'colorsys', 'prompt_toolkit.styles.style_transformation', 'prompt_toolkit.styles', 'prompt_toolkit.output.color_depth', 'prompt_toolkit.output.base', 'prompt_toolkit.output.defaults', 'prompt_toolkit.output', 'prompt_toolkit.output.vt100', 'prompt_toolkit.mouse_events', 'prompt_toolkit.formatted_text.base', 'prompt_toolkit.formatted_text.ansi', 'xml', 'xml.dom.domreg', 'xml.dom', 'xml.dom.minicompat', 'xml.dom.NodeFilter', 'xml.dom.xmlbuilder', 'xml.dom.minidom', 'prompt_toolkit.formatted_text.html', 'prompt_toolkit.formatted_text.pygments', 'prompt_toolkit.formatted_text.utils', 'prompt_toolkit.formatted_text', 'prompt_toolkit.completion.base', 'prompt_toolkit.completion.deduplicate', 'prompt_toolkit.completion.filesystem', 'prompt_toolkit.completion.word_completer', 'prompt_toolkit.completion.fuzzy_completer', 'prompt_toolkit.completion.nested', 'prompt_toolkit.completion', 'prompt_toolkit.history', 'prompt_toolkit.keys', 'prompt_toolkit.key_binding.key_bindings', 'prompt_toolkit.key_binding.key_processor', 'prompt_toolkit.key_binding', 'prompt_toolkit.key_binding.vi_state', 'prompt_toolkit.search', 'prompt_toolkit.validation', 'prompt_toolkit.buffer', 'prompt_toolkit.input.base', 'prompt_toolkit.input.defaults', 'prompt_toolkit.input', 'prompt_toolkit.input.typeahead', 'prompt_toolkit.key_binding.bindings', 'prompt_toolkit.key_binding.bindings.scroll', 'prompt_toolkit.key_binding.bindings.page_navigation', 'prompt_toolkit.lexers.base', 'prompt_toolkit.lexers.pygments', 'prompt_toolkit.lexers', 'prompt_toolkit.layout.utils', 'prompt_toolkit.layout.processors', 'prompt_toolkit.layout.controls', 'prompt_toolkit.layout.dimension', 'prompt_toolkit.layout.margins', 'prompt_toolkit.layout.mouse_handlers', 'prompt_toolkit.layout.screen', 'prompt_toolkit.layout.containers', 'prompt_toolkit.layout.layout', 'prompt_toolkit.layout.menus', 'prompt_toolkit.layout.scrollable_pane', 'prompt_toolkit.layout', 'prompt_toolkit.key_binding.bindings.completion', 'prompt_toolkit.key_binding.bindings.named_commands', 'prompt_toolkit.key_binding.bindings.basic', 'prompt_toolkit.key_binding.bindings.cpr', 'prompt_toolkit.key_binding.bindings.emacs', 'prompt_toolkit.key_binding.bindings.mouse', 'prompt_toolkit.input.ansi_escape_sequences', 'prompt_toolkit.input.vt100_parser', 'prompt_toolkit.key_binding.digraphs', 'prompt_toolkit.key_binding.bindings.vi', 'prompt_toolkit.key_binding.defaults', 'prompt_toolkit.key_binding.emacs_state', 'prompt_toolkit.layout.dummy', 'prompt_toolkit.renderer', 'prompt_toolkit.application.application', 'prompt_toolkit.application.dummy', 'prompt_toolkit.application', 'prompt_toolkit.key_binding.bindings.focus', 'prompt_toolkit.widgets.toolbars', 'prompt_toolkit.widgets.base', 'prompt_toolkit.widgets.dialogs', 'prompt_toolkit.widgets.menus', 'prompt_toolkit.widgets', 'prompt_toolkit.shortcuts.dialogs', 'prompt_toolkit.shortcuts.progress_bar.formatters', 'prompt_toolkit.shortcuts.progress_bar.base', 'prompt_toolkit.shortcuts.progress_bar', 'prompt_toolkit.key_binding.bindings.auto_suggest', 'prompt_toolkit.key_binding.bindings.open_in_editor', 'prompt_toolkit.shortcuts.prompt', 'prompt_toolkit.shortcuts.utils', 'prompt_toolkit.shortcuts', 'prompt_toolkit', 'prompt_toolkit.patch_stdout', 'pygments.style', 'unicodedata', 'IPython.core.latex_symbols', 'IPython.utils.generics', 'parso.utils', 'parso.tree', 'parso.python', 'parso.python.token', 'parso.python.tokenize', 'parso.pgen2.grammar_parser', 'parso.pgen2.generator', 'parso.pgen2', 'parso.parser', 'parso._compatibility', 'difflib', 'parso.python.prefix', 'parso.python.tree', 'parso.python.parser', 'parso.python.diff', 'gc', 'parso.cache', 'parso.normalizer', 'parso.python.errors', 'parso.python.pep8', 'parso.file_io', 'parso.grammar', 'parso', 'jedi._compatibility', 'jedi.parser_utils', 'jedi.debug', 'jedi.settings', 'jedi.cache', 'jedi.file_io', 'jedi.inference.cache', 'jedi.inference.helpers', 'jedi.inference.utils', 'jedi.inference.base_value', 'jedi.inference.sys_path', 'jedi.inference.recursion', 'jedi.inference.flow_analysis', 'jedi.common', 'jedi.inference.lazy_value', 'jedi.inference.docstrings', 'jedi.plugins', 'jedi.inference.names', 'jedi.inference.filters', 'jedi.inference.compiled.getattr_static', 'jedi.inference.compiled.access', 'jedi.inference.signature', 'jedi.inference.context', 'jedi.inference.compiled.value', 'jedi.inference.compiled', 'jedi.inference.analysis', 'jedi.inference.gradual', 'jedi.inference.value.module', 'jedi.inference.value.dynamic_arrays', 'jedi.inference.value.iterable', 'jedi.inference.arguments', 'jedi.inference.parser_cache', 'jedi.inference.gradual.generics', 'jedi.inference.value.function', 'jedi.inference.value.klass', 'jedi.inference.value.instance', 'jedi.inference.value', 'jedi.inference.gradual.base', 'jedi.inference.gradual.type_var', 'jedi.inference.gradual.typing', 'jedi.inference.gradual.stub_value', 'jedi.inference.gradual.typeshed', 'jedi.inference.compiled.subprocess.functions', 'jedi.api.exceptions', 'jedi.inference.compiled.subprocess', 'jedi.inference.imports', 'jedi.inference.param', 'jedi.inference.gradual.annotation', 'jedi.inference.value.decorator', 'jedi.inference.syntax_tree', 'jedi.inference', 'jedi.inference.gradual.conversion', 'jedi.inference.compiled.mixed', 'pydoc_data', 'pydoc_data.topics', 'jedi.api.keywords', 'jedi.api.completion_cache', 'jedi.api.helpers', 'jedi.api.classes', 'jedi.api.interpreter', 'jedi.api.strings', 'jedi.api.file_name', 'jedi.api.completion', 'filecmp', 'jedi.api.environment', 'jedi.inference.references', 'jedi.api.project', 'jedi.api.errors', 'jedi.api.refactoring', 'jedi.api.refactoring.extract', 'jedi.inference.gradual.utils', 'jedi.api', 'jedi.plugins.stdlib', 'jedi.plugins.flask', 'jedi.plugins.pytest', 'jedi.plugins.django', 'jedi.plugins.registry', 'jedi', 'IPython.core.completer', 'IPython.terminal.ptutils', 'IPython.lib.clipboard', 'IPython.terminal.shortcuts', 'IPython.terminal.debugger', 'IPython.terminal.magics', 'IPython.terminal.pt_inputhooks', 'IPython.terminal.prompts', 'IPython.terminal.interactiveshell', 'IPython.core.magics.auto', 'IPython.core.magics.basic', 'email', 'http', 'email.errors', 'email.quoprimime', 'email.base64mime', 'quopri', 'email.encoders', 'email.charset', 'email.header', 'calendar', 'email._parseaddr', 'email.utils', 'email._policybase', 'email.feedparser', 'email.parser', 'uu', 'email._encoded_words', 'email.iterators', 'email.message', 'http.client', 'urllib.response', 'urllib.error', 'nturl2path', 'urllib.request', 'IPython.core.magics.code', 'IPython.core.magics.config', 'IPython.core.magics.display', 'timeit', '_lsprof', 'profile', 'cProfile', 'dataclasses', 'pstats', 'IPython.utils.module_paths', 'IPython.utils.timing', 'IPython.core.magics.execution', 'IPython.core.magics.extension', 'IPython.core.magics.history', 'IPython.core.magics.logging', 'IPython.core.magics.namespace', 'IPython.core.magics.osm', 'IPython.core.magics.packaging', 'IPython.core.pylabtools', 'IPython.core.magics.pylab', 'IPython.lib.backgroundjobs', 'IPython.core.magics.script', 'IPython.core.magics', 'IPython.core.shellapp', 'IPython.extensions', 'IPython.extensions.storemagic', 'IPython.terminal.ipapp', 'IPython.terminal.embed', 'IPython.utils.frame', 'IPython', 'ipython_genutils._version', 'ipython_genutils', 'ipython_genutils.encoding', 'ipython_genutils.py3compat', 'ipython_genutils.path', 'imp', 'hmac', 'dateutil._version', 'dateutil', 'six', '_decimal', 'decimal', 'dateutil._common', 'dateutil.relativedelta', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.tz.win', 'dateutil.tz.tz', 'dateutil.tz', 'dateutil.parser._parser', 'dateutil.parser.isoparser', 'dateutil.parser', '_strptime', 'jupyter_client.jsonutil', 'jupyter_client.adapter', 'jupyter_client.session', 'ipykernel.iostream', 'ipykernel.control', 'ipykernel.heartbeat', 'IPython.utils.tokenutil', 'tornado.locks', 'tornado.queues', 'ipykernel.jsonutil', 'ipykernel.kernelbase', 'ipykernel.comm.comm', 'ipykernel.comm.manager', 'ipykernel.comm', 'IPython.core.payloadpage', 'ipykernel.displayhook', 'ipykernel.zmqshell', 'setuptools._distutils', 'distutils.debug', 'distutils.errors', 'distutils.fancy_getopt', 'distutils.dep_util', 'distutils._log', 'distutils.spawn', 'distutils.util', 'distutils.dist', 'distutils.dir_util', 'distutils.file_util', 'zipfile', 'distutils.archive_util', 'distutils.cmd', 'configparser', 'distutils.config', 'distutils.extension', 'distutils.core', '_distutils_hack.override', 'setuptools._deprecation_warning', 'xml.parsers', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'xml.parsers.expat', 'plistlib', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources._vendor.jaraco', 'pkg_resources.extern.jaraco', 'importlib._common', 'importlib.resources', 'pkg_resources._vendor.more_itertools.recipes', 'pkg_resources._vendor.more_itertools.more', 'pkg_resources._vendor.more_itertools', 'pkg_resources.extern.more_itertools', 'pkg_resources.extern.jaraco.functools', 'pkg_resources.extern.jaraco.context', 'pkg_resources.extern.jaraco.text', 'pkg_resources._vendor.platformdirs.api', 'pkg_resources._vendor.platformdirs.version', 'pkg_resources._vendor.platformdirs.windows', 'pkg_resources._vendor.platformdirs', 'pkg_resources.extern.platformdirs', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources._vendor.packaging', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging.version', 'pkg_resources._vendor.packaging._manylinux', 'pkg_resources._vendor.packaging._musllinux', 'pkg_resources.extern.packaging.tags', 'pkg_resources.extern.packaging.utils', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources._vendor.pyparsing.util', 'pkg_resources._vendor.pyparsing.unicode', 'pkg_resources._vendor.pyparsing.exceptions', 'pkg_resources._vendor.pyparsing.actions', 'pkg_resources._vendor.pyparsing.results', 'pkg_resources._vendor.pyparsing.core', 'pkg_resources._vendor.pyparsing.helpers', 'pkg_resources._vendor.pyparsing.testing', 'pkg_resources._vendor.pyparsing.common', 'pkg_resources._vendor.pyparsing', 'pkg_resources.extern.pyparsing', 'pkg_resources.extern.packaging.markers', 'pkg_resources.extern.packaging.requirements', 'encodings.cp437', 'pkg_resources', 'setuptools.version', 'distutils.filelist', 'setuptools.monkey', 'setuptools.extension', 'distutils.log', 'distutils.command', 'setuptools.extern', 'setuptools._vendor', 'setuptools._vendor.packaging.__about__', 'setuptools._vendor.packaging', 'setuptools.extern.packaging', 'setuptools._vendor.ordered_set', 'setuptools.extern.ordered_set', 'setuptools._vendor.more_itertools.recipes', 'setuptools._vendor.more_itertools.more', 'setuptools._vendor.more_itertools', 'setuptools.extern.more_itertools', '_csv', 'csv', 'setuptools._vendor.zipp', 'setuptools._vendor.importlib_metadata._functools', 'setuptools._vendor.importlib_metadata._text', 'setuptools._vendor.importlib_metadata._adapters', 'setuptools._vendor.importlib_metadata._compat', 'setuptools._vendor.importlib_metadata._meta', 'setuptools._vendor.importlib_metadata._collections', 'setuptools._vendor.importlib_metadata._itertools', 'setuptools._vendor.importlib_metadata', 'setuptools.extern.importlib_metadata', 'zipp', 'importlib_metadata._functools', 'importlib_metadata._text', 'importlib_metadata._adapters', 'importlib_metadata._compat', 'importlib_metadata._meta', 'importlib_metadata._collections', 'importlib_metadata._itertools', 'importlib_metadata', 'setuptools._importlib', 'distutils.command.bdist', 'setuptools.command', 'setuptools.windows_support', 'setuptools._vendor.pyparsing.util', 'setuptools._vendor.pyparsing.unicode', 'setuptools._vendor.pyparsing.exceptions', 'setuptools._vendor.pyparsing.actions', 'setuptools._vendor.pyparsing.results', 'setuptools._vendor.pyparsing.core', 'setuptools._vendor.pyparsing.helpers', 'setuptools._vendor.pyparsing.testing', 'setuptools._vendor.pyparsing.common', 'setuptools._vendor.pyparsing', 'setuptools.extern.pyparsing', 'setuptools._vendor.packaging._manylinux', 'setuptools._vendor.packaging._musllinux', 'setuptools.extern.packaging.tags', 'setuptools.extern.packaging._structures', 'setuptools.extern.packaging.version', 'setuptools.extern.packaging.utils', 'setuptools.extern.packaging.specifiers', 'setuptools.extern.packaging.markers', 'setuptools.extern.packaging.requirements', 'setuptools._path', 'setuptools.config.expand', 'setuptools.config.setupcfg', 'setuptools.config', 'setuptools.errors', 'email._header_value_parser', 'email.headerregistry', 'setuptools.config._apply_pyprojecttoml', 'setuptools.config.pyprojecttoml', 'setuptools.discovery', 'setuptools._vendor.jaraco', 'setuptools.extern.jaraco', 'setuptools.extern.jaraco.functools', 'setuptools.extern.jaraco.context', 'setuptools.extern.jaraco.text', 'setuptools._reqs', 'setuptools._itertools', 'setuptools._entry_points', 'setuptools.dist', 'setuptools.py34compat', 'setuptools._imp', 'setuptools.depends', 'setuptools.logging', 'setuptools.msvc', 'unittest.util', 'unittest.result', 'unittest.case', 'unittest.suite', 'unittest.loader', 'unittest.signals', 'unittest.runner', 'unittest.main', 'unittest', 'unittest.mock', 'distutils.ccompiler', 'distutils._msvccompiler', 'setuptools', 'distutils', 'distutils.version', 'ipykernel.eventloops', 'ipykernel.compiler', 'debugpy._version', 'debugpy.common', 'debugpy.common.json', 'debugpy.common.fmt', 'debugpy.common.compat', 'debugpy', 'debugpy._vendored._util', 'debugpy._vendored', '_pydevd_bundle', 'encodings.ascii', 'stringprep', 'encodings.idna', '_pydevd_bundle.pydevd_vm_type', '_pydev_imps', 'xmlrpc', 'gzip', 'xmlrpc.client', 'socketserver', 'http.server', 'xmlrpc.server', '_pydev_imps._pydev_saved_modules', '_pydevd_bundle.pydevd_constants', '_pydev_bundle', '_pydev_runfiles', '_pydevd_frame_eval', 'pydev_ipython', 'pydevd_concurrency_analyser', 'pydevd_plugins', '_pydev_bundle.pydev_log', '_pydev_bundle._pydev_filesystem_encoding', '_pydevd_bundle.pydevd_comm_constants', 'pydevd_file_utils', '_pydev_imps._pydev_execfile', '_pydevd_bundle.pydevd_exec2', '_pydev_bundle.pydev_imports', '_pydev_bundle.pydev_is_thread_alive', '_pydev_bundle.pydev_override', 'pydevd_plugins.extensions', '_pydevd_bundle.pydevd_extension_utils', '_pydevd_bundle.pydevd_frame_utils', '_pydevd_bundle.pydevd_filtering', '_pydevd_bundle.pydevd_io', '_pydevd_bundle.pydevd_utils', '_pydev_bundle._pydev_tipper_common', '_pydev_bundle._pydev_imports_tipper', '_pydev_bundle._pydev_calltip_util', '_pydevd_bundle.pydevd_safe_repr', '_pydevd_bundle.pydevd_resolver', '_pydevd_bundle.pydevd_extension_api', '_pydevd_bundle.pydevd_xml', '_pydevd_bundle.pydevd_dont_trace', '_pydevd_frame_eval.vendored', '_pydevd_frame_eval.vendored.bytecode.flags', '_pydevd_frame_eval.vendored.bytecode.instr', '_pydevd_frame_eval.vendored.bytecode.bytecode', '_pydevd_frame_eval.vendored.bytecode.concrete', '_pydevd_frame_eval.vendored.bytecode.cfg', '_pydevd_frame_eval.vendored.bytecode', '_pydevd_bundle.pydevd_bytecode_utils', '_pydevd_bundle.pydevd_cython', '_pydevd_bundle.pydevd_cython_wrapper', '_pydevd_bundle.pydevd_additional_thread_info', '_pydevd_bundle.pydevd_thread_lifecycle', '_pydevd_bundle.pydevd_save_locals', '_pydevd_bundle.pydevd_defaults', '_pydev_bundle.pydev_monkey', 'pydevd_tracing', '_pydevd_bundle.pydevd_daemon_thread', '_pydevd_bundle.pydevd_timeout', '_pydevd_bundle.pydevd_vars', '_pydev_bundle.pydev_console_utils', '_pydevd_bundle.pydevd_import_class', '_pydevd_bundle.pydevd_breakpoints', '_pydevd_bundle.pydevd_custom_frames', '_pydevd_bundle.pydevd_dont_trace_files', '_pydevd_bundle.pydevd_net_command', '_pydev_bundle.pydev_umd', 'pydevconsole', '_pydev_bundle._pydev_completer', '_pydevd_bundle.pydevd_net_command_factory_xml', '_pydevd_bundle.pydevd_frame', '_pydevd_bundle.pydevd_additional_thread_info_regular', '_pydevd_bundle.pydevd_trace_dispatch', '_pydevd_frame_eval.pydevd_frame_eval_main', '_pydevd_bundle.pydevd_source_mapping', 'pydevd_concurrency_analyser.pydevd_thread_wrappers', 'pydevd_concurrency_analyser.pydevd_concurrency_logger', '_pydevd_bundle._debug_adapter', '_pydevd_bundle._debug_adapter.pydevd_schema_log', '_pydevd_bundle._debug_adapter.pydevd_base_schema', '_pydevd_bundle._debug_adapter.pydevd_schema', '_pydevd_bundle.pydevd_reload', '_pydev_bundle.fsnotify', '_pydevd_bundle.pydevd_console', '_pydevd_bundle.pydevd_comm', '_pydevd_bundle.pydevd_net_command_factory_json', '_pydevd_bundle.pydevd_collect_bytecode_info', '_pydevd_bundle.pydevd_api', '_pydevd_bundle.pydevd_json_debug_options', '_pydevd_bundle.pydevd_process_net_command_json', '_pydevd_bundle.pydevd_traceproperty', '_pydevd_bundle.pydevd_process_net_command', '_pydevd_bundle.pydevd_suspended_frames', '_pydevd_bundle.pydevd_trace_api', 'pydevd_plugins.django_debug', 'pydevd_plugins.jinja2_debug', '_pydevd_bundle.pydevd_plugin_utils', 'pydevd_plugins.extensions.types', 'pydevd_plugins.extensions.types.pydevd_helpers', 'pydevd_plugins.extensions.types.pydevd_plugin_numpy_types', 'pydevd_plugins.extensions.types.pydevd_plugins_django_form_str', 'pydevd', 'debugpy._vendored.force_pydevd', 'debugpy.server', 'debugpy.adapter', 'debugpy.common.timestamp', 'debugpy.common.util', 'debugpy.common.log', 'debugpy.common.sockets', 'debugpy.server.api', 'ipykernel.debugger', 'ipykernel.ipkernel', 'ipykernel.parentpoller', 'ipykernel.kernelapp', 'win32api', 'win32security', 'ntsecuritycon', 'faulthandler', 'IPython.core.completerlib', 'storemagic', 'pyforest._importable', 'pyforest.user_specific_imports', 'pyforest._imports', 'pyforest.utils', 'pyforest', 'logging.config', 'pythonjsonlogger', 'pythonjsonlogger.jsonlogger', 'daiquiri.types', 'daiquiri.formatter', 'daiquiri.handlers', 'daiquiri.output', 'daiquiri', 'jupyter_require.__about__', 'csscompressor', 'jupyter_require.core', 'jupyter_require.notebook', 'jupyter_nbutils.__about__', 'jupyter_nbutils.config', 'jupyter_nbutils.utils', 'jupyter_nbutils', 'jupyter_require.magic', 'jupyter_require', 'sklearn._config', 'sklearn._distributor_init', 'sklearn.__check_build._check_build', 'sklearn.__check_build', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'mkl._mklinit', 'mkl._py_mkl_service', 'mkl', 'numpy._distributor_init', 'numpy.core._multiarray_umath', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.compat', 'numpy.core.overrides', 'numpy.core.multiarray', 'numpy.core.umath', 'numpy.core._string_helpers', 'numpy.core._dtype', 'numpy.core._type_aliases', 'numpy.core.numerictypes', 'numpy.core._asarray', 'numpy.core._exceptions', 'numpy.core._methods', 'numpy.core.fromnumeric', 'numpy.core.shape_base', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core.numeric', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._multiarray_tests', 'numpy.core._add_newdocs', 'numpy.core._add_newdocs_scalars', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'numpy._pytesttester', 'numpy.core', 'numpy.lib.mixins', 'numpy.lib.ufunclike', 'numpy.lib.type_check', 'numpy.lib.scimath', 'numpy.lib.twodim_base', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.linalg.linalg', 'numpy.linalg', 'numpy.matrixlib.defmatrix', 'numpy.matrixlib', 'numpy.lib.histograms', 'numpy.lib.function_base', 'numpy.lib.stride_tricks', 'numpy.lib.index_tricks', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.npyio', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.lib', 'numpy.fft._pocketfft_internal', 'numpy.fft._pocketfft', 'numpy.fft.helper', 'numpy.fft', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.polynomial', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.polynomial', 'numpy.random._common', 'secrets', 'numpy.random.bit_generator', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random.mtrand', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.random._pickle', 'numpy.random', 'numpy.ctypeslib', 'numpy.ma.core', 'numpy.ma.extras', 'numpy.ma', 'numpy', 'scipy._lib._testutils', 'scipy._lib', 'scipy._lib.deprecation', 'scipy.__config__', 'scipy.version', 'scipy._distributor_init', 'scipy._lib._pep440', 'scipy._lib._ccallback_c', 'scipy._lib._ccallback', 'scipy', 'scipy._lib._util', 'scipy.sparse.sputils', 'scipy.sparse.base', 'scipy.sparse._sparsetools', 'scipy.sparse.data', 'scipy.sparse.dia', 'scipy.sparse._index', 'scipy.sparse.compressed', 'scipy.sparse.csr', 'scipy.sparse.csc', 'scipy.sparse._csparsetools', 'scipy.sparse.lil', 'scipy.sparse.dok', 'scipy.sparse.coo', 'scipy.sparse.bsr', 'scipy.sparse.construct', 'scipy.sparse.extract', 'scipy.sparse._matrix_io', 'scipy.sparse.csgraph._laplacian', 'scipy.sparse.csgraph._tools', 'scipy.sparse.csgraph._validation', 'scipy.sparse.csgraph._shortest_path', 'scipy.sparse.csgraph._traversal', 'scipy.sparse.csgraph._min_spanning_tree', 'scipy.sparse.csgraph._flow', 'scipy.sparse.csgraph._matching', 'scipy.sparse.csgraph._reordering', 'scipy.sparse.csgraph', 'scipy.sparse', 'sklearn.utils.murmurhash', 'sklearn.utils.class_weight', 'joblib.hashing', 'multiprocessing.process', 'multiprocessing.reduction', 'multiprocessing.context', '__mp_main__', 'multiprocessing', 'multiprocessing.util', 'joblib.disk', 'joblib.logger', 'joblib.func_inspect', 'joblib.backports', 'joblib.compressor', 'joblib.numpy_pickle_utils', 'joblib.numpy_pickle_compat', 'joblib.numpy_pickle', 'joblib._store_backends', 'joblib.memory', '_multiprocessing', 'joblib._multiprocessing_helpers', 'joblib._deprecated_my_exceptions', 'joblib.my_exceptions', 'mmap', 'joblib.externals', 'joblib.externals.loky._base', 'multiprocessing.synchronize', 'joblib.externals.loky.backend.process', 'joblib.externals.loky.backend.context', 'joblib.externals.loky.backend', 'multiprocessing.connection', 'joblib.externals.loky.backend._win_reduction', 'joblib.externals.cloudpickle.compat', 'typing_extensions', 'joblib.externals.cloudpickle.cloudpickle', 'joblib.externals.cloudpickle.cloudpickle_fast', 'joblib.externals.cloudpickle', 'joblib.externals.loky.backend.reduction', 'multiprocessing.queues', 'concurrent.futures.process', 'joblib.externals.loky.backend.queues', 'psutil._common', 'psutil._compat', 'psutil._psutil_windows', 'psutil._pswindows', 'psutil', 'joblib.externals.loky.backend.utils', 'joblib.externals.loky.initializers', 'joblib.externals.loky.process_executor', 'joblib.externals.loky.reusable_executor', 'joblib.externals.loky.cloudpickle_wrapper', 'joblib.externals.loky', 'joblib.externals.loky.backend.spawn', 'joblib.externals.loky.backend.resource_tracker', 'joblib._memmapping_reducer', 'multiprocessing.pool', 'joblib.pool', 'joblib.executor', 'joblib._parallel_backends', 'joblib._utils', 'joblib.parallel', 'joblib._cloudpickle_wrapper', 'joblib', 'sklearn.utils._joblib', 'sklearn.exceptions', 'sklearn.utils.deprecation', 'sklearn.utils.discovery', 'scipy.spatial.ckdtree', 'scipy.spatial.kdtree', 'scipy._lib.messagestream', 'scipy.spatial.qhull', 'scipy.spatial._voronoi', 'scipy.spatial._spherical_voronoi', 'scipy._lib.decorator', 'scipy.spatial._plotutils', 'scipy.linalg._fblas', 'scipy.linalg.blas', 'scipy.linalg._flapack', 'scipy.linalg.lapack', 'scipy.linalg.misc', 'scipy.linalg._flinalg', 'scipy.linalg.flinalg', 'scipy.linalg.decomp', 'scipy.linalg.decomp_svd', 'scipy.linalg._solve_toeplitz', 'scipy.linalg.basic', 'scipy.linalg.decomp_lu', 'scipy.linalg._decomp_ldl', 'scipy.linalg.decomp_cholesky', 'scipy.linalg.decomp_qr', 'scipy.linalg._decomp_qz', 'scipy.linalg.decomp_schur', 'scipy.linalg._decomp_polar', 'scipy.linalg.special_matrices', 'scipy.linalg._expm_frechet', 'scipy.linalg._matfuncs_sqrtm_triu', 'scipy.linalg._matfuncs_sqrtm', 'scipy.linalg.matfuncs', 'scipy.linalg._solvers', 'scipy.linalg._procrustes', 'scipy.linalg.cython_blas', 'scipy.linalg.cython_lapack', 'scipy.linalg._decomp_update', 'scipy.linalg._sketches', 'scipy.linalg._decomp_cossin', 'scipy.linalg', 'scipy.spatial._procrustes', 'scipy.spatial._distance_wrap', 'scipy.spatial._hausdorff', 'scipy.special.sf_error', 'scipy.special._ufuncs_cxx', 'scipy.special._ufuncs', 'scipy.special.specfun', 'scipy.special.orthogonal', 'scipy.special._comb', 'scipy.special._basic', 'scipy.special._logsumexp', 'scipy.special.spfun_stats', 'scipy.special._ellip_harm_2', 'scipy.special._ellip_harm', 'scipy.special._lambertw', 'scipy.special._spherical_bessel', 'scipy.special', 'scipy.spatial._distance_pybind', 'scipy.spatial.distance', 'scipy.spatial._geometric_slerp', 'scipy.constants.codata', 'scipy.constants.constants', 'scipy.constants', 'scipy.spatial.transform._rotation_groups', 'scipy.spatial.transform.rotation', 'scipy.spatial.transform._rotation_spline', 'scipy.spatial.transform', 'scipy.spatial', 'scipy.ndimage._ni_support', 'scipy.ndimage._nd_image', 'scipy._lib.doccer', 'scipy.ndimage._ni_docstrings', 'scipy.ndimage.filters', 'scipy.ndimage.fourier', 'scipy.ndimage.interpolation', '_ni_label', 'scipy.ndimage._ni_label', 'scipy.ndimage.morphology', 'scipy.ndimage.measurements', 'scipy.ndimage', 'scipy.stats._distr_params', 'scipy.optimize.minpack2', 'scipy.optimize.linesearch', 'scipy.sparse.linalg.isolve._iterative', 'scipy.sparse.linalg.interface', 'scipy.sparse.linalg.isolve.utils', 'scipy._lib._threadsafety', 'scipy.sparse.linalg.isolve.iterative', 'scipy.sparse.linalg.isolve.minres', 'scipy.sparse.linalg.isolve._gcrotmk', 'scipy.sparse.linalg.isolve.lgmres', 'scipy.sparse.linalg.isolve.lsqr', 'scipy.sparse.linalg.isolve.lsmr', 'scipy.sparse.linalg.isolve', 'scipy.sparse.linalg.dsolve._superlu', 'scipy.sparse.linalg.dsolve.linsolve', 'scipy.sparse.linalg.dsolve._add_newdocs', 'scipy.sparse.linalg.dsolve', 'scipy.sparse.linalg.eigen.arpack._arpack', 'scipy.sparse.linalg.eigen.lobpcg.lobpcg', 'scipy.sparse.linalg.eigen.lobpcg', 'scipy.sparse.linalg.eigen.arpack.arpack', 'scipy.sparse.linalg.eigen.arpack', 'scipy.sparse.linalg.eigen', 'scipy.sparse.linalg._expm_multiply', 'scipy.sparse.linalg.matfuncs', 'scipy.sparse.linalg._onenormest', 'scipy.sparse.linalg._norm', 'scipy.sparse.linalg', 'scipy.optimize._group_columns', 'scipy.optimize._numdiff', 'scipy.optimize._hessian_update_strategy', 'scipy.optimize._differentiable_functions', 'scipy.optimize.optimize', 'scipy.optimize._trustregion', 'scipy.optimize._trustregion_dogleg', 'scipy.optimize._trustregion_ncg', 'scipy.optimize._trlib._trlib', 'scipy.optimize._trlib', 'scipy.optimize._trustregion_krylov', 'scipy.optimize._trustregion_exact', 'numpy.testing._private', 'numpy.testing._private.utils', 'numpy.testing._private.decorators', 'numpy.testing._private.nosetester', 'numpy.testing', 'scipy.optimize._constraints', 'scipy.optimize._trustregion_constr.projections', 'scipy.optimize._trustregion_constr.qp_subproblem', 'scipy.optimize._trustregion_constr.equality_constrained_sqp', 'scipy.optimize._trustregion_constr.canonical_constraint', 'scipy.optimize._trustregion_constr.tr_interior_point', 'scipy.optimize._trustregion_constr.report', 'scipy.optimize._trustregion_constr.minimize_trustregion_constr', 'scipy.optimize._trustregion_constr', 'scipy.optimize._lbfgsb', 'scipy.optimize.lbfgsb', 'scipy.optimize.moduleTNC', 'scipy.optimize.tnc', 'scipy.optimize._cobyla', 'scipy.optimize.cobyla', 'scipy.optimize._slsqp', 'scipy.optimize.slsqp', 'scipy.optimize._minimize', 'scipy.optimize._minpack', 'scipy.optimize._lsq.common', 'scipy.optimize._lsq.trf', 'scipy.optimize._lsq.dogbox', 'scipy.optimize._lsq.least_squares', 'scipy.optimize._lsq.givens_elimination', 'scipy.optimize._lsq.trf_linear', 'scipy.optimize._lsq.bvls', 'scipy.optimize._lsq.lsq_linear', 'scipy.optimize._lsq', 'scipy.optimize.minpack', 'scipy.optimize._spectral', 'scipy.optimize.nonlin', 'scipy.optimize._root', 'scipy.optimize._zeros', 'scipy.optimize.zeros', 'scipy.optimize._root_scalar', 'scipy.optimize.__nnls', 'scipy.optimize._nnls', 'scipy.optimize._basinhopping', 'scipy.optimize._highs', 'scipy.optimize._highs.cython.src._highs_wrapper', 'scipy.optimize._highs._highs_wrapper', 'scipy.optimize._highs.cython.src._highs_constants', 'scipy.optimize._highs._highs_constants', 'scipy.optimize._linprog_highs', 'scipy.linalg._interpolative', 'scipy.linalg._interpolative_backend', 'scipy.linalg.interpolative', 'scipy.optimize._remove_redundancy', 'scipy.optimize._linprog_util', 'scipy.optimize._linprog_ip', 'scipy.optimize._linprog_simplex', 'scipy.optimize._bglu_dense', 'scipy.optimize._linprog_rs', 'scipy.optimize._linprog_doc', 'scipy.optimize._linprog', 'scipy.optimize._lsap_module', 'scipy.optimize._lsap', 'scipy.optimize._differentialevolution', 'scipy.optimize._shgo_lib', 'scipy.optimize._shgo_lib.triangulation', 'scipy.optimize._shgo', 'scipy.optimize._dual_annealing', 'scipy.optimize._qap', 'scipy.optimize', 'scipy.integrate._quadrature', 'scipy.integrate._odepack', 'scipy.integrate.odepack', 'scipy.integrate._quadpack', 'scipy.integrate.quadpack', 'scipy.integrate.vode', 'scipy.integrate._dop', 'scipy.integrate.lsoda', 'scipy.integrate._ode', 'scipy.integrate._bvp', 'scipy.integrate._ivp.common', 'scipy.integrate._ivp.base', 'scipy.integrate._ivp.bdf', 'scipy.integrate._ivp.radau', 'scipy.integrate._ivp.dop853_coefficients', 'scipy.integrate._ivp.rk', 'scipy.integrate._ivp.lsoda', 'scipy.integrate._ivp.ivp', 'scipy.integrate._ivp', 'scipy.integrate._quad_vec', 'scipy.integrate', 'scipy.misc.doccer', 'scipy.misc.common', 'scipy.misc', 'scipy.stats._constants', 'scipy.stats._distn_infrastructure', 'scipy.interpolate._fitpack', 'scipy.interpolate.dfitpack', 'scipy.interpolate._fitpack_impl', 'scipy.interpolate._bspl', 'scipy.interpolate._bsplines', 'scipy.interpolate.fitpack', 'scipy.interpolate.polyint', 'scipy.interpolate._ppoly', 'scipy.interpolate.fitpack2', 'scipy.interpolate.interpnd', 'scipy.interpolate.interpolate', 'scipy.interpolate.rbf', 'scipy.interpolate._rbfinterp_pythran', 'scipy.interpolate._rbfinterp', 'scipy.interpolate._cubic', 'scipy.interpolate.ndgriddata', 'scipy.interpolate._pade', 'scipy.interpolate', 'scipy.special.cython_special', 'scipy.stats._stats', 'scipy.stats._rvs_sampling', 'scipy.stats._tukeylambda_stats', 'scipy.stats._ksstats', 'beta_ufunc', 'scipy.stats._boost.beta_ufunc', 'binom_ufunc', 'scipy.stats._boost.binom_ufunc', 'nbinom_ufunc', 'scipy.stats._boost.nbinom_ufunc', 'scipy.stats._boost', 'scipy.stats._continuous_distns', 'scipy.stats.biasedurn', 'scipy.stats._discrete_distns', 'scipy.stats._entropy', 'scipy.stats.distributions', 'scipy._lib._bunch', 'scipy.stats._stats_mstats_common', 'scipy.stats.mstats_basic', 'scipy.stats._wilcoxon_data', 'scipy.stats._hypotests', 'scipy.stats.stats', 'scipy.stats.statlib', 'scipy.stats._common', 'scipy.stats._relative_risk', 'scipy.stats._crosstab', 'scipy.stats.contingency', 'scipy.stats.morestats', 'scipy.stats._binomtest', 'scipy.stats._binned_statistic', 'scipy.stats.mvn', 'scipy.stats.kde', 'scipy.stats.mstats_extras', 'scipy.stats.mstats', 'scipy.stats._sobol', 'scipy.stats._qmc_cy', 'scipy.stats._qmc', 'scipy.stats.qmc', 'scipy.stats._multivariate', 'scipy.stats._bootstrap', 'scipy.stats._page_trend_test', 'scipy.stats._mannwhitneyu', 'scipy.stats', 'ctypes.util', 'threadpoolctl', 'sklearn.externals', 'sklearn.externals._packaging', 'sklearn.externals._packaging._structures', 'sklearn.externals._packaging.version', 'sklearn.utils.fixes', 'sklearn.utils._estimator_html_repr', 'sklearn.utils._array_api', '_cython_0_29_32', 'sklearn.utils._isfinite', 'sklearn.utils.validation', 'sklearn.utils._bunch', 'sklearn.utils', 'sklearn.utils._available_if', 'sklearn.utils._set_output', 'sklearn.utils._tags', 'sklearn.utils._param_validation', 'sklearn.base', 'sklearn.utils._openmp_helpers', 'sklearn.utils._show_versions', 'sklearn', 'sklearn.utils.multiclass', 'sklearn.utils._logistic_sigmoid', 'sklearn.utils.sparsefuncs_fast', 'sklearn.utils.extmath', 'sklearn.utils.sparsefuncs', 'sklearn.utils.metaestimators', 'sklearn.preprocessing._function_transformer', 'sklearn.utils._mask', 'sklearn.utils._encode', 'sklearn.preprocessing._encoders', 'sklearn.preprocessing._data', 'sklearn.preprocessing._label', 'sklearn.preprocessing._discretization', 'sklearn.utils.stats', 'sklearn.preprocessing._csr_polynomial_expansion', 'sklearn.preprocessing._polynomial', 'sklearn.preprocessing', 'sklearn.metrics._base', 'sklearn.metrics._ranking', 'sklearn.metrics._classification', 'sklearn.utils._typedefs', 'sklearn.utils._readonly_array_wrapper', 'sklearn.metrics._dist_metrics', 'sklearn.metrics.cluster._expected_mutual_info_fast', 'sklearn.metrics.cluster._supervised', 'sklearn.metrics._pairwise_distances_reduction._datasets_pair', 'sklearn.utils._cython_blas', 'sklearn.metrics._pairwise_distances_reduction._base', 'sklearn.metrics._pairwise_distances_reduction._middle_term_computer', 'sklearn.utils._heap', 'sklearn.utils._sorting', 'sklearn.metrics._pairwise_distances_reduction._argkmin', 'sklearn.utils._vector_sentinel', 'sklearn.metrics._pairwise_distances_reduction._radius_neighbors', 'sklearn.metrics._pairwise_distances_reduction._dispatcher', 'sklearn.metrics._pairwise_distances_reduction', 'sklearn.metrics._pairwise_fast', 'sklearn.metrics.pairwise', 'sklearn.metrics.cluster._unsupervised', 'sklearn.metrics.cluster._bicluster', 'sklearn.metrics.cluster', 'sklearn.metrics._regression', 'sklearn.metrics._scorer', 'sklearn.metrics._plot', 'sklearn.metrics._plot.base', 'sklearn.metrics._plot.det_curve', 'sklearn.metrics._plot.roc_curve', 'sklearn.metrics._plot.precision_recall_curve', 'sklearn.metrics._plot.confusion_matrix', 'sklearn.metrics._plot.regression', 'sklearn.metrics', 'sklearn.neighbors._partition_nodes', 'sklearn.neighbors._ball_tree', 'sklearn.neighbors._kd_tree', 'sklearn.neighbors._distance_metric', 'sklearn.neighbors._base', 'sklearn.neighbors._unsupervised', 'sklearn.neighbors._graph', 'sklearn.neighbors._classification', 'sklearn.neighbors._regression', 'sklearn.neighbors._nearest_centroid', 'sklearn.neighbors._kde', 'sklearn.neighbors._lof', 'sklearn.decomposition._cdnmf_fast', 'sklearn.decomposition._nmf', 'sklearn.decomposition._base', 'sklearn.utils._arpack', 'sklearn.decomposition._pca', 'sklearn.decomposition._incremental_pca', 'sklearn.decomposition._kernel_pca', 'sklearn.utils._random', 'sklearn.utils._seq_dataset', 'sklearn.linear_model._base', 'sklearn.linear_model._bayes', 'sklearn.utils.arrayfuncs', 'sklearn.model_selection._split', 'sklearn.model_selection._validation', 'sklearn.utils.random', 'sklearn.model_selection._search', 'sklearn.model_selection._plot', 'sklearn.model_selection', 'sklearn.linear_model._least_angle', 'sklearn.linear_model._cd_fast', 'sklearn.linear_model._coordinate_descent', 'sklearn._loss._loss', 'sklearn._loss.link', 'sklearn._loss.loss', 'sklearn._loss', 'sklearn.utils.optimize', 'sklearn.linear_model._linear_loss', 'sklearn.linear_model._glm._newton_solver', 'sklearn._loss.glm_distribution', 'sklearn.linear_model._glm.glm', 'sklearn.linear_model._glm', 'sklearn.linear_model._huber', 'sklearn.utils._weight_vector', 'sklearn.linear_model._sgd_fast', 'sklearn.linear_model._stochastic_gradient', 'sklearn.linear_model._sag_fast', 'sklearn.linear_model._sag', 'sklearn.linear_model._ridge', 'sklearn.svm._libsvm', 'sklearn.svm._liblinear', 'sklearn.svm._libsvm_sparse', 'sklearn.svm._base', 'sklearn.svm._classes', 'sklearn.svm._bounds', 'sklearn.svm', 'sklearn.linear_model._logistic', 'sklearn.linear_model._omp', 'sklearn.linear_model._passive_aggressive', 'sklearn.linear_model._perceptron', 'sklearn.linear_model._quantile', 'sklearn.linear_model._ransac', 'sklearn.linear_model._theil_sen', 'sklearn.linear_model', 'sklearn.decomposition._dict_learning', 'sklearn.decomposition._sparse_pca', 'sklearn.decomposition._truncated_svd', 'sklearn.decomposition._fastica', 'sklearn.decomposition._factor_analysis', 'sklearn.decomposition._online_lda_fast', 'sklearn.decomposition._lda', 'sklearn.decomposition', 'sklearn.neighbors._nca', 'sklearn.neighbors', 'sklearn.manifold._locally_linear', 'sklearn.utils.graph', 'sklearn.manifold._isomap', 'sklearn._isotonic', 'sklearn.isotonic', 'sklearn.manifold._mds', 'sklearn.manifold._spectral_embedding', 'sklearn.manifold._utils', 'sklearn.tree._utils', 'sklearn.tree._tree', 'sklearn.tree._splitter', 'sklearn.tree._criterion', 'sklearn.tree._classes', 'sklearn.tree._reingold_tilford', 'sklearn.tree._export', 'sklearn.tree', 'sklearn.neighbors._quad_tree', 'sklearn.manifold._barnes_hut_tsne', 'sklearn.manifold._t_sne', 'sklearn.manifold', 'sklearn.cluster._k_means_common', 'sklearn.cluster._k_means_minibatch', 'sklearn.cluster._k_means_lloyd', 'sklearn.cluster._k_means_elkan', 'sklearn.cluster._kmeans', 'sklearn.cluster._spectral', 'sklearn.cluster._mean_shift', 'sklearn.cluster._affinity_propagation', 'sklearn.utils._fast_dict', 'sklearn.cluster._hierarchical_fast', 'sklearn.cluster._feature_agglomeration', 'sklearn.cluster._agglomerative', 'sklearn.cluster._bisect_k_means', 'sklearn.cluster._dbscan_inner', 'sklearn.cluster._dbscan', 'sklearn.cluster._optics', 'sklearn.cluster._bicluster', 'sklearn.cluster._birch', 'sklearn.cluster', 'sklearn.datasets._base', 'sklearn.datasets._covtype', 'sklearn.datasets._kddcup99', 'sklearn.datasets._lfw', 'tarfile', 'sklearn.feature_extraction._dict_vectorizer', 'sklearn.feature_extraction._hashing_fast', 'sklearn.feature_extraction._hash', 'sklearn.feature_extraction.image', 'sklearn.feature_extraction._stop_words', 'sklearn.feature_extraction.text', 'sklearn.feature_extraction', 'sklearn.datasets._twenty_newsgroups', 'sklearn.externals._arff', 'sklearn.datasets._arff_parser', 'sklearn.datasets._openml', 'sklearn.datasets._samples_generator', 'sklearn.datasets._svmlight_format_fast', 'sklearn.datasets._svmlight_format_io', 'scipy.io.matlab.byteordercodes', 'scipy.io.matlab.miobase', 'scipy.io.matlab.mio_utils', 'scipy.io.matlab.mio4', 'scipy.io.matlab.streams', 'scipy.io.matlab.mio5_params', 'scipy.io.matlab.mio5_utils', 'scipy.io.matlab.mio5', 'scipy.io.matlab.mio', 'scipy.io.matlab', 'scipy.io.netcdf', 'scipy.io._fortran', 'scipy.io.mmio', 'scipy.io.idl', 'scipy.io.harwell_boeing._fortran_format_parser', 'scipy.io.harwell_boeing.hb', 'scipy.io.harwell_boeing', 'scipy.io', 'sklearn.datasets._olivetti_faces', 'sklearn.datasets._species_distributions', 'sklearn.datasets._california_housing', 'sklearn.datasets._rcv1', 'sklearn.datasets', 'matplotlib', 'matplotlib._api.deprecation', 'matplotlib._api', 'matplotlib._c_internal_utils', 'matplotlib.cbook', 'matplotlib.docstring', 'PIL._version', 'PIL', 'defusedxml.common', 'defusedxml', 'xml.etree', 'xml.etree.ElementPath', '_elementtree', 'xml.etree.ElementTree', 'defusedxml.ElementTree', 'PIL.ImageMode', 'PIL.TiffTags', 'PIL._binary', 'PIL._util', 'PIL._imaging', 'cffi.lock', 'cffi.error', 'cffi.model', 'cffi.api', 'cffi', 'PIL.Image', 'matplotlib._animation_data', 'matplotlib.animation', 'PIL.ImageChops', 'PIL.ImageFile', 'PIL.GimpGradientFile', 'PIL.GimpPaletteFile', 'PIL.ImageColor', 'PIL.PaletteFile', 'PIL.ImagePalette', 'PIL.ImageSequence', 'PIL.PngImagePlugin', 'matplotlib._path', 'matplotlib.bezier', 'matplotlib.path', 'matplotlib.transforms', 'matplotlib.ticker', 'matplotlib.scale', 'matplotlib._color_data', 'matplotlib.colors', 'pyparsing.util', 'pyparsing.unicode', 'pyparsing.exceptions', 'pyparsing.actions', 'pyparsing.results', 'pyparsing.core', 'pyparsing.helpers', 'pyparsing.testing', 'pyparsing.common', 'pyparsing', 'matplotlib.fontconfig_pattern', 'matplotlib._enums', 'cycler', 'matplotlib.rcsetup', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver', 'dateutil.rrule', 'matplotlib.units', 'matplotlib.dates']
2023-02-22 17:33:28,820 [19068] DEBUG    matplotlib:224: [JupyterRequire] CACHEDIR=C:\Users\sunny\.matplotlib
2023-02-22 17:33:28,823 [19068] DEBUG    matplotlib.font_manager:1439: [JupyterRequire] Using fontManager instance from C:\Users\sunny\.matplotlib\fontlist-v330.json
2023-02-22 17:33:29,039 [19068] DEBUG    matplotlib.pyplot:290: [JupyterRequire] Loaded backend module://matplotlib_inline.backend_inline version unknown.
2023-02-22 17:33:29,042 [19068] DEBUG    matplotlib.pyplot:290: [JupyterRequire] Loaded backend module://matplotlib_inline.backend_inline version unknown.
2023-02-22 17:33:30,190 [19068] DEBUG    matplotlib.font_manager:1329: [JupyterRequire] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
2023-02-22 17:33:30,191 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2023-02-22 17:33:30,191 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,191 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2023-02-22 17:33:30,192 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2023-02-22 17:33:30,192 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-02-22 17:33:30,192 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,192 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2023-02-22 17:33:30,193 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,193 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,193 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,193 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,193 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,194 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2023-02-22 17:33:30,194 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2023-02-22 17:33:30,194 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2023-02-22 17:33:30,194 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-02-22 17:33:30,194 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,194 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,195 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2023-02-22 17:33:30,195 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,195 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2023-02-22 17:33:30,195 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2023-02-22 17:33:30,195 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,195 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,195 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,195 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2023-02-22 17:33:30,196 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,196 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-02-22 17:33:30,197 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,197 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,197 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-02-22 17:33:30,197 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2023-02-22 17:33:30,197 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,197 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-02-22 17:33:30,198 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2023-02-22 17:33:30,198 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,198 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2023-02-22 17:33:30,198 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-02-22 17:33:30,198 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,199 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,199 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,199 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25
2023-02-22 17:33:30,199 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
2023-02-22 17:33:30,199 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,199 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,199 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24
2023-02-22 17:33:30,199 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335
2023-02-22 17:33:30,200 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,200 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05
2023-02-22 17:33:30,200 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975
2023-02-22 17:33:30,200 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,200 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,201 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,201 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,201 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,201 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
2023-02-22 17:33:30,201 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,201 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
2023-02-22 17:33:30,202 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,202 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25
2023-02-22 17:33:30,202 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24
2023-02-22 17:33:30,202 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
2023-02-22 17:33:30,202 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24
2023-02-22 17:33:30,202 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,202 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05
2023-02-22 17:33:30,203 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,203 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545
2023-02-22 17:33:30,203 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335
2023-02-22 17:33:30,203 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,203 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,203 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145
2023-02-22 17:33:30,204 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,204 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
2023-02-22 17:33:30,204 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sitka' (SitkaVF.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,204 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
2023-02-22 17:33:30,205 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525
2023-02-22 17:33:30,205 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335
2023-02-22 17:33:30,205 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335
2023-02-22 17:33:30,205 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,205 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,205 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
2023-02-22 17:33:30,205 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,206 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05
2023-02-22 17:33:30,206 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,206 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,206 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,206 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
2023-02-22 17:33:30,206 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,206 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
2023-02-22 17:33:30,206 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,206 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
2023-02-22 17:33:30,206 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24
2023-02-22 17:33:30,208 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
2023-02-22 17:33:30,208 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,208 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05
2023-02-22 17:33:30,208 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,208 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05
2023-02-22 17:33:30,208 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
2023-02-22 17:33:30,209 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05
2023-02-22 17:33:30,209 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,209 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,209 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05
2023-02-22 17:33:30,209 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,210 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,210 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
2023-02-22 17:33:30,210 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,210 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,210 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24
2023-02-22 17:33:30,210 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,210 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,210 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,212 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
2023-02-22 17:33:30,212 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,212 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335
2023-02-22 17:33:30,212 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335
2023-02-22 17:33:30,212 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145
2023-02-22 17:33:30,212 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535
2023-02-22 17:33:30,212 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,213 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05
2023-02-22 17:33:30,213 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25
2023-02-22 17:33:30,213 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,213 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335
2023-02-22 17:33:30,213 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635
2023-02-22 17:33:30,213 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,213 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363
2023-02-22 17:33:30,214 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,214 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
2023-02-22 17:33:30,214 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
2023-02-22 17:33:30,215 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145
2023-02-22 17:33:30,215 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
2023-02-22 17:33:30,215 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
2023-02-22 17:33:30,215 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335
2023-02-22 17:33:30,215 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
2023-02-22 17:33:30,216 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,216 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,216 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335
2023-02-22 17:33:30,216 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335
2023-02-22 17:33:30,216 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,217 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,217 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,217 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,217 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
2023-02-22 17:33:30,217 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,217 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145
2023-02-22 17:33:30,217 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,218 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,218 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335
2023-02-22 17:33:30,218 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05
2023-02-22 17:33:30,218 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
2023-02-22 17:33:30,218 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364
2023-02-22 17:33:30,219 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,219 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,219 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 500 normal>) = 10.145
2023-02-22 17:33:30,219 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43
2023-02-22 17:33:30,220 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI Variable' (SegUIVar.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,220 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
2023-02-22 17:33:30,220 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,220 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,220 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,221 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,221 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,221 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,221 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05
2023-02-22 17:33:30,221 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05
2023-02-22 17:33:30,222 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335
2023-02-22 17:33:30,222 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,222 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,222 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335
2023-02-22 17:33:30,222 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
2023-02-22 17:33:30,223 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145
2023-02-22 17:33:30,223 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,223 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24
2023-02-22 17:33:30,223 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,223 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,224 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335
2023-02-22 17:33:30,224 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,224 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
2023-02-22 17:33:30,224 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24
2023-02-22 17:33:30,224 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25
2023-02-22 17:33:30,225 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
2023-02-22 17:33:30,225 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,225 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
2023-02-22 17:33:30,225 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
2023-02-22 17:33:30,225 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
2023-02-22 17:33:30,226 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,226 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,226 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25
2023-02-22 17:33:30,226 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
2023-02-22 17:33:30,226 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335
2023-02-22 17:33:30,226 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24
2023-02-22 17:33:30,227 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,227 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,227 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05
2023-02-22 17:33:30,227 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25
2023-02-22 17:33:30,227 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,228 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,228 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,228 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25
2023-02-22 17:33:30,228 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,228 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25
2023-02-22 17:33:30,229 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,229 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975
2023-02-22 17:33:30,229 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,230 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,230 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05
2023-02-22 17:33:30,230 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,230 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,230 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335
2023-02-22 17:33:30,231 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145
2023-02-22 17:33:30,231 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145
2023-02-22 17:33:30,231 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24
2023-02-22 17:33:30,231 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145
2023-02-22 17:33:30,231 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24
2023-02-22 17:33:30,232 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,232 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,232 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,232 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
2023-02-22 17:33:30,232 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,233 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,233 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
2023-02-22 17:33:30,233 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335
2023-02-22 17:33:30,233 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05
2023-02-22 17:33:30,234 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,234 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,234 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,234 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,234 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05
2023-02-22 17:33:30,235 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,235 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
2023-02-22 17:33:30,235 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525
2023-02-22 17:33:30,235 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25
2023-02-22 17:33:30,235 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,236 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,236 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535
2023-02-22 17:33:30,236 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,236 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,236 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,237 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
2023-02-22 17:33:30,237 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
2023-02-22 17:33:30,237 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335
2023-02-22 17:33:30,237 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,238 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
2023-02-22 17:33:30,238 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335
2023-02-22 17:33:30,238 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05
2023-02-22 17:33:30,238 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,238 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05
2023-02-22 17:33:30,238 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,239 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,239 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
2023-02-22 17:33:30,239 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05
2023-02-22 17:33:30,239 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
2023-02-22 17:33:30,239 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,240 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,240 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
2023-02-22 17:33:30,240 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sitka' (SitkaVF-Italic.ttf) italic normal 400 normal>) = 11.05
2023-02-22 17:33:30,240 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05
2023-02-22 17:33:30,240 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335
2023-02-22 17:33:30,240 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,240 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,241 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,241 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
2023-02-22 17:33:30,241 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,241 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335
2023-02-22 17:33:30,241 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,242 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05
2023-02-22 17:33:30,242 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,242 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24
2023-02-22 17:33:30,242 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
2023-02-22 17:33:30,243 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,243 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335
2023-02-22 17:33:30,243 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
2023-02-22 17:33:30,243 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
2023-02-22 17:33:30,243 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,244 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
2023-02-22 17:33:30,244 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145
2023-02-22 17:33:30,244 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,244 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525
2023-02-22 17:33:30,244 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,245 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,245 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25
2023-02-22 17:33:30,245 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,245 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,245 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,246 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
2023-02-22 17:33:30,246 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,246 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545
2023-02-22 17:33:30,246 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
2023-02-22 17:33:30,246 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
2023-02-22 17:33:30,247 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,247 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145
2023-02-22 17:33:30,247 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24
2023-02-22 17:33:30,247 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,247 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,248 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145
2023-02-22 17:33:30,248 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,248 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
2023-02-22 17:33:30,248 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05
2023-02-22 17:33:30,248 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,249 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
2023-02-22 17:33:30,249 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25
2023-02-22 17:33:30,249 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25
2023-02-22 17:33:30,249 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,249 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,250 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,250 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,251 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,251 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
2023-02-22 17:33:30,251 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335
2023-02-22 17:33:30,251 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,252 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,252 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535
2023-02-22 17:33:30,252 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,252 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335
2023-02-22 17:33:30,252 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
2023-02-22 17:33:30,253 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335
2023-02-22 17:33:30,253 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
2023-02-22 17:33:30,253 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
2023-02-22 17:33:30,253 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635
2023-02-22 17:33:30,253 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335
2023-02-22 17:33:30,253 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,254 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05
2023-02-22 17:33:30,254 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05
2023-02-22 17:33:30,254 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05
2023-02-22 17:33:30,254 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05
2023-02-22 17:33:30,255 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05
2023-02-22 17:33:30,255 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
2023-02-22 17:33:30,255 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,255 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
2023-02-22 17:33:30,255 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
2023-02-22 17:33:30,256 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,256 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145
2023-02-22 17:33:30,256 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,256 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25
2023-02-22 17:33:30,257 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363
2023-02-22 17:33:30,257 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05
2023-02-22 17:33:30,257 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975
2023-02-22 17:33:30,257 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25
2023-02-22 17:33:30,257 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,258 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335
2023-02-22 17:33:30,258 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
2023-02-22 17:33:30,258 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,258 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335
2023-02-22 17:33:30,258 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05
2023-02-22 17:33:30,258 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05
2023-02-22 17:33:30,259 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,259 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,259 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,259 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,259 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,260 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,260 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
2023-02-22 17:33:30,260 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,260 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,260 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
2023-02-22 17:33:30,261 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
2023-02-22 17:33:30,261 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145
2023-02-22 17:33:30,261 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145
2023-02-22 17:33:30,261 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975
2023-02-22 17:33:30,261 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145
2023-02-22 17:33:30,261 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,262 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,262 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,262 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,262 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,262 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535
2023-02-22 17:33:30,263 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335
2023-02-22 17:33:30,263 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05
2023-02-22 17:33:30,263 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
2023-02-22 17:33:30,263 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525
2023-02-22 17:33:30,263 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335
2023-02-22 17:33:30,264 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05
2023-02-22 17:33:30,264 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145
2023-02-22 17:33:30,264 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,264 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335
2023-02-22 17:33:30,264 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145
2023-02-22 17:33:30,265 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
2023-02-22 17:33:30,265 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe Fluent Icons' (SegoeIcons.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,265 [19068] DEBUG    matplotlib.font_manager:1367: [JupyterRequire] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans ('C:\\Users\\sunny\\anaconda3\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.
2023-02-22 17:33:30,273 [19068] DEBUG    matplotlib.font_manager:1329: [JupyterRequire] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.
2023-02-22 17:33:30,274 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2023-02-22 17:33:30,274 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,275 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2023-02-22 17:33:30,275 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2023-02-22 17:33:30,275 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-02-22 17:33:30,275 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,276 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2023-02-22 17:33:30,276 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,276 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,276 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,276 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,277 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,277 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2023-02-22 17:33:30,277 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2023-02-22 17:33:30,277 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2023-02-22 17:33:30,277 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-02-22 17:33:30,278 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,278 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,278 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2023-02-22 17:33:30,279 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,279 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2023-02-22 17:33:30,279 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2023-02-22 17:33:30,279 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,280 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,280 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,280 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2023-02-22 17:33:30,280 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,280 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-02-22 17:33:30,280 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,281 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,281 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-02-22 17:33:30,281 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2023-02-22 17:33:30,281 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,281 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-02-22 17:33:30,281 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2023-02-22 17:33:30,281 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,281 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2023-02-22 17:33:30,283 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-02-22 17:33:30,283 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,283 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,283 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,284 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25
2023-02-22 17:33:30,284 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
2023-02-22 17:33:30,284 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,284 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,285 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24
2023-02-22 17:33:30,285 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335
2023-02-22 17:33:30,285 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,285 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05
2023-02-22 17:33:30,285 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975
2023-02-22 17:33:30,286 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,286 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,286 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,286 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,287 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,287 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
2023-02-22 17:33:30,287 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,287 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
2023-02-22 17:33:30,287 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,287 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25
2023-02-22 17:33:30,287 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24
2023-02-22 17:33:30,288 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
2023-02-22 17:33:30,288 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24
2023-02-22 17:33:30,288 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,288 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05
2023-02-22 17:33:30,289 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,289 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545
2023-02-22 17:33:30,289 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335
2023-02-22 17:33:30,289 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,289 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,290 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145
2023-02-22 17:33:30,290 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,290 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
2023-02-22 17:33:30,290 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sitka' (SitkaVF.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,290 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
2023-02-22 17:33:30,290 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525
2023-02-22 17:33:30,291 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335
2023-02-22 17:33:30,291 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335
2023-02-22 17:33:30,291 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,291 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,291 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
2023-02-22 17:33:30,291 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,291 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05
2023-02-22 17:33:30,291 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,293 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,293 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,293 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
2023-02-22 17:33:30,293 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,293 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
2023-02-22 17:33:30,293 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,294 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
2023-02-22 17:33:30,294 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24
2023-02-22 17:33:30,294 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
2023-02-22 17:33:30,294 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,294 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05
2023-02-22 17:33:30,295 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,295 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05
2023-02-22 17:33:30,295 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
2023-02-22 17:33:30,295 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05
2023-02-22 17:33:30,295 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,295 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,296 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05
2023-02-22 17:33:30,296 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,296 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,296 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
2023-02-22 17:33:30,296 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,296 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,297 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24
2023-02-22 17:33:30,297 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,297 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,297 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,297 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
2023-02-22 17:33:30,297 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,298 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335
2023-02-22 17:33:30,298 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335
2023-02-22 17:33:30,298 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145
2023-02-22 17:33:30,298 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535
2023-02-22 17:33:30,298 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,298 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05
2023-02-22 17:33:30,299 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25
2023-02-22 17:33:30,299 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,299 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335
2023-02-22 17:33:30,299 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635
2023-02-22 17:33:30,299 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,299 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363
2023-02-22 17:33:30,299 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,301 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
2023-02-22 17:33:30,301 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
2023-02-22 17:33:30,301 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145
2023-02-22 17:33:30,301 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
2023-02-22 17:33:30,301 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
2023-02-22 17:33:30,302 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335
2023-02-22 17:33:30,302 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
2023-02-22 17:33:30,302 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,302 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,302 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335
2023-02-22 17:33:30,302 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335
2023-02-22 17:33:30,303 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,303 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,303 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,303 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,303 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
2023-02-22 17:33:30,304 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,304 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145
2023-02-22 17:33:30,304 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,304 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,304 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335
2023-02-22 17:33:30,304 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05
2023-02-22 17:33:30,304 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
2023-02-22 17:33:30,305 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364
2023-02-22 17:33:30,305 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,305 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,305 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 500 normal>) = 10.145
2023-02-22 17:33:30,305 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43
2023-02-22 17:33:30,305 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI Variable' (SegUIVar.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,306 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
2023-02-22 17:33:30,306 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,306 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,306 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,306 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,307 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,307 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,307 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05
2023-02-22 17:33:30,307 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05
2023-02-22 17:33:30,307 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335
2023-02-22 17:33:30,308 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,308 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,308 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335
2023-02-22 17:33:30,308 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
2023-02-22 17:33:30,308 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145
2023-02-22 17:33:30,308 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,308 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24
2023-02-22 17:33:30,310 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,310 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,310 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335
2023-02-22 17:33:30,310 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,310 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
2023-02-22 17:33:30,310 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24
2023-02-22 17:33:30,310 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25
2023-02-22 17:33:30,310 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
2023-02-22 17:33:30,311 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,311 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
2023-02-22 17:33:30,311 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
2023-02-22 17:33:30,311 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
2023-02-22 17:33:30,311 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,312 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,312 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25
2023-02-22 17:33:30,312 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
2023-02-22 17:33:30,312 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335
2023-02-22 17:33:30,312 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24
2023-02-22 17:33:30,312 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,313 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,313 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05
2023-02-22 17:33:30,313 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25
2023-02-22 17:33:30,313 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,313 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,314 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,314 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25
2023-02-22 17:33:30,314 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,314 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25
2023-02-22 17:33:30,314 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,314 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975
2023-02-22 17:33:30,316 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,316 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,316 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05
2023-02-22 17:33:30,316 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,316 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,316 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335
2023-02-22 17:33:30,316 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145
2023-02-22 17:33:30,317 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145
2023-02-22 17:33:30,317 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24
2023-02-22 17:33:30,317 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145
2023-02-22 17:33:30,317 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24
2023-02-22 17:33:30,317 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,317 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,318 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,318 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
2023-02-22 17:33:30,318 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,318 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,318 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
2023-02-22 17:33:30,318 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335
2023-02-22 17:33:30,319 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05
2023-02-22 17:33:30,319 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,319 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,319 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,319 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,319 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05
2023-02-22 17:33:30,320 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,320 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
2023-02-22 17:33:30,320 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525
2023-02-22 17:33:30,320 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25
2023-02-22 17:33:30,320 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,322 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,322 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535
2023-02-22 17:33:30,322 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,322 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,322 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,322 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
2023-02-22 17:33:30,322 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
2023-02-22 17:33:30,323 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335
2023-02-22 17:33:30,323 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,323 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
2023-02-22 17:33:30,323 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335
2023-02-22 17:33:30,323 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05
2023-02-22 17:33:30,323 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,324 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05
2023-02-22 17:33:30,324 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,324 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,324 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
2023-02-22 17:33:30,325 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05
2023-02-22 17:33:30,325 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
2023-02-22 17:33:30,325 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,325 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,325 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
2023-02-22 17:33:30,325 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sitka' (SitkaVF-Italic.ttf) italic normal 400 normal>) = 11.05
2023-02-22 17:33:30,325 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05
2023-02-22 17:33:30,325 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335
2023-02-22 17:33:30,326 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,326 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,326 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,326 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
2023-02-22 17:33:30,326 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,327 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335
2023-02-22 17:33:30,327 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,327 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05
2023-02-22 17:33:30,327 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,327 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24
2023-02-22 17:33:30,327 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
2023-02-22 17:33:30,329 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,329 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335
2023-02-22 17:33:30,329 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
2023-02-22 17:33:30,329 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
2023-02-22 17:33:30,329 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,329 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
2023-02-22 17:33:30,330 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145
2023-02-22 17:33:30,330 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,330 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525
2023-02-22 17:33:30,330 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,330 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,330 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25
2023-02-22 17:33:30,331 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,331 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,331 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,331 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
2023-02-22 17:33:30,331 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,332 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545
2023-02-22 17:33:30,332 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
2023-02-22 17:33:30,332 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
2023-02-22 17:33:30,332 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,332 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145
2023-02-22 17:33:30,332 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24
2023-02-22 17:33:30,332 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,333 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,333 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145
2023-02-22 17:33:30,333 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,333 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
2023-02-22 17:33:30,333 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05
2023-02-22 17:33:30,334 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,334 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
2023-02-22 17:33:30,334 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25
2023-02-22 17:33:30,334 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25
2023-02-22 17:33:30,334 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,335 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,335 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,335 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,335 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,335 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
2023-02-22 17:33:30,337 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335
2023-02-22 17:33:30,337 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,337 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,337 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535
2023-02-22 17:33:30,337 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,337 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335
2023-02-22 17:33:30,337 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
2023-02-22 17:33:30,338 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335
2023-02-22 17:33:30,338 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
2023-02-22 17:33:30,338 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
2023-02-22 17:33:30,338 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635
2023-02-22 17:33:30,338 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335
2023-02-22 17:33:30,338 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,339 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05
2023-02-22 17:33:30,339 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05
2023-02-22 17:33:30,339 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05
2023-02-22 17:33:30,339 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05
2023-02-22 17:33:30,339 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05
2023-02-22 17:33:30,339 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
2023-02-22 17:33:30,339 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,340 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
2023-02-22 17:33:30,340 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
2023-02-22 17:33:30,340 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,340 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145
2023-02-22 17:33:30,340 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,340 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25
2023-02-22 17:33:30,341 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363
2023-02-22 17:33:30,341 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05
2023-02-22 17:33:30,341 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975
2023-02-22 17:33:30,341 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25
2023-02-22 17:33:30,341 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,341 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335
2023-02-22 17:33:30,342 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
2023-02-22 17:33:30,342 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,342 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335
2023-02-22 17:33:30,342 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05
2023-02-22 17:33:30,342 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05
2023-02-22 17:33:30,342 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,345 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,346 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,346 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,346 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,346 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,347 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
2023-02-22 17:33:30,347 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,347 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,347 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
2023-02-22 17:33:30,347 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
2023-02-22 17:33:30,347 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145
2023-02-22 17:33:30,349 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145
2023-02-22 17:33:30,349 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975
2023-02-22 17:33:30,349 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145
2023-02-22 17:33:30,349 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,349 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,349 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,350 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,350 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,350 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535
2023-02-22 17:33:30,350 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335
2023-02-22 17:33:30,350 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05
2023-02-22 17:33:30,350 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
2023-02-22 17:33:30,350 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525
2023-02-22 17:33:30,350 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335
2023-02-22 17:33:30,351 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05
2023-02-22 17:33:30,351 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145
2023-02-22 17:33:30,351 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,351 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335
2023-02-22 17:33:30,351 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145
2023-02-22 17:33:30,351 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
2023-02-22 17:33:30,352 [19068] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe Fluent Icons' (SegoeIcons.ttf) normal normal 400 normal>) = 10.05
2023-02-22 17:33:30,352 [19068] DEBUG    matplotlib.font_manager:1367: [JupyterRequire] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('C:\\Users\\sunny\\anaconda3\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.
2023-02-22 17:36:35,143 [19608] DEBUG    matplotlib.colorbar:620: [JupyterRequire] locator: <matplotlib.colorbar._ColorbarAutoLocator object at 0x00000140741318E0>
2023-02-22 17:36:35,143 [19608] DEBUG    matplotlib.colorbar:665: [JupyterRequire] Using auto colorbar locator <matplotlib.colorbar._ColorbarAutoLocator object at 0x00000140741318E0> on colorbar
2023-02-22 17:36:35,143 [19608] DEBUG    matplotlib.colorbar:794: [JupyterRequire] Setting pcolormesh
2023-02-22 22:37:26,662 [19608] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-22 22:37:26,673 [19608] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-22 22:37:26,674 [19608] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-22 22:37:26,686 [19608] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-22 22:37:26,687 [19608] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-22 22:37:26,745 [19608] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\sklearn\neighbors\_lof.py
2023-02-22 22:37:26,800 [19608] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\sklearn\neighbors\__init__.py
2023-02-22 22:37:26,898 [19608] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\sklearn\neighbors\_base.py
